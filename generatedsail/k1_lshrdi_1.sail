// executing lshrdi_1 test 
val k1_lshrdi_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_lshrdi_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let variable_shift: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let constant_shift: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _64(0x00000001f901b7c0),        //compw.gtu $r0 = $r0, 63 (0x3f);;
     _32(0x0c004100),        //cb.wnez $r0? 16c70 <constant_shift+0x430>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _96(0x00000000800000fde1007000),        //addd $r0 = $r0, 259520 (0x3f5c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x0fd80000),        //igoto $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022040),        //srld $r0 = $r0, 1 (0x1);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000fb),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022080),        //srld $r0 = $r0, 2 (0x2);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000f7),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0220c0),        //srld $r0 = $r0, 3 (0x3);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000f3),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022100),        //srld $r0 = $r0, 4 (0x4);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000ef),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022140),        //srld $r0 = $r0, 5 (0x5);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000eb),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022180),        //srld $r0 = $r0, 6 (0x6);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000e7),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0221c0),        //srld $r0 = $r0, 7 (0x7);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000e3),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022200),        //srld $r0 = $r0, 8 (0x8);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000df),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022240),        //srld $r0 = $r0, 9 (0x9);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000db),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022280),        //srld $r0 = $r0, 10 (0xa);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000d7),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0222c0),        //srld $r0 = $r0, 11 (0xb);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000d3),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022300),        //srld $r0 = $r0, 12 (0xc);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000cf),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022340),        //srld $r0 = $r0, 13 (0xd);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000cb),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022380),        //srld $r0 = $r0, 14 (0xe);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000c7),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0223c0),        //srld $r0 = $r0, 15 (0xf);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000c3),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022400),        //srld $r0 = $r0, 16 (0x10);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000bf),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022440),        //srld $r0 = $r0, 17 (0x11);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000bb),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022480),        //srld $r0 = $r0, 18 (0x12);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000b7),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0224c0),        //srld $r0 = $r0, 19 (0x13);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000b3),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022500),        //srld $r0 = $r0, 20 (0x14);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000af),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022540),        //srld $r0 = $r0, 21 (0x15);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000ab),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022580),        //srld $r0 = $r0, 22 (0x16);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000a7),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0225c0),        //srld $r0 = $r0, 23 (0x17);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x100000a3),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022600),        //srld $r0 = $r0, 24 (0x18);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000009f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022640),        //srld $r0 = $r0, 25 (0x19);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000009b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022680),        //srld $r0 = $r0, 26 (0x1a);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000097),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0226c0),        //srld $r0 = $r0, 27 (0x1b);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000093),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022700),        //srld $r0 = $r0, 28 (0x1c);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000008f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022740),        //srld $r0 = $r0, 29 (0x1d);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000008b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022780),        //srld $r0 = $r0, 30 (0x1e);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000087),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0227c0),        //srld $r0 = $r0, 31 (0x1f);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000083),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000007f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022840),        //srld $r0 = $r0, 33 (0x21);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000007b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022880),        //srld $r0 = $r0, 34 (0x22);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000077),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0228c0),        //srld $r0 = $r0, 35 (0x23);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000073),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022900),        //srld $r0 = $r0, 36 (0x24);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000006f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022940),        //srld $r0 = $r0, 37 (0x25);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000006b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022980),        //srld $r0 = $r0, 38 (0x26);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000067),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b0229c0),        //srld $r0 = $r0, 39 (0x27);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000063),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022a00),        //srld $r0 = $r0, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000005f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022a40),        //srld $r0 = $r0, 41 (0x29);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000005b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022a80),        //srld $r0 = $r0, 42 (0x2a);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000057),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022ac0),        //srld $r0 = $r0, 43 (0x2b);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000053),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022b00),        //srld $r0 = $r0, 44 (0x2c);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000004f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022b40),        //srld $r0 = $r0, 45 (0x2d);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000004b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022b80),        //srld $r0 = $r0, 46 (0x2e);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000047),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022bc0),        //srld $r0 = $r0, 47 (0x2f);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000043),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022c00),        //srld $r0 = $r0, 48 (0x30);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000003f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022c40),        //srld $r0 = $r0, 49 (0x31);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000003b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022c80),        //srld $r0 = $r0, 50 (0x32);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000037),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022cc0),        //srld $r0 = $r0, 51 (0x33);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000033),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022d00),        //srld $r0 = $r0, 52 (0x34);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000002f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022d40),        //srld $r0 = $r0, 53 (0x35);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000002b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022d80),        //srld $r0 = $r0, 54 (0x36);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000027),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022dc0),        //srld $r0 = $r0, 55 (0x37);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000023),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022e00),        //srld $r0 = $r0, 56 (0x38);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000001f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022e40),        //srld $r0 = $r0, 57 (0x39);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000001b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022e80),        //srld $r0 = $r0, 58 (0x3a);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000017),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022ec0),        //srld $r0 = $r0, 59 (0x3b);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000013),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022f00),        //srld $r0 = $r0, 60 (0x3c);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000000f),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022f40),        //srld $r0 = $r0, 61 (0x3d);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x1000000b),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022f80),        //srld $r0 = $r0, 62 (0x3e);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000007),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7b022fc0),        //srld $r0 = $r0, 63 (0x3f);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000003),        //goto 16c78 <constant_shift+0x438>;;
     _32(0x18000040),        //call 16d70 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000013),        //goto 16cf0 <main+0x60>;;
     _96(0x043b2a19807fb72ee000a400),        //make $r0 = 9756277981056907920 (0x87654321fedcba90);;
     _32(0x3004070c),        //lwz $r1 = 28 (0x1c)[$r12];;
     _32(0x1ffffeda),        //call 16820 <variable_shift>;;
     _32(0x2701020c),        //sd 8 (0x8)[$r12] = $r0;;
     _96(0x00000000800000fce004f000),        //make $r1 = 259008 (0x3f3c0);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ce4 <main+0x54>;;
     _32(0x18000024),        //call 16d70 <abort>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f401b7c0),        //compw.le $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffac0),        //cb.wnez $r0? 16ca8 <main+0x18>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000013),        //goto 16d54 <main+0xc4>;;
     _96(0x043b2a19807fb72ee000a400),        //make $r0 = 9756277981056907920 (0x87654321fedcba90);;
     _32(0x3004070c),        //lwz $r1 = 28 (0x1c)[$r12];;
     _32(0x1ffffec9),        //call 16840 <constant_shift>;;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _96(0x00000000800000fce004f000),        //make $r1 = 259008 (0x3f3c0);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16d48 <main+0xb8>;;
     _32(0x1800000b),        //call 16d70 <abort>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f401b7c0),        //compw.le $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffac0),        //cb.wnez $r0? 16d0c <main+0x7c>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1800000a),        //call 16d90 <exit>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000105),        //call 17190 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000839),        //call 18e68 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit_: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000161),        //call 17328 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x00000000800000fde000f000),        //make $r0 = 260032 (0x3f7c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 16dcc <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x98000827),        //call 18e68 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110110010010000; //0x16c90
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(variable_shift, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(constant_shift, 0b00010110100001000000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110110010010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110110101110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit_, 0b00010110110110010000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
