// executing pr65369 test 
val k1_pr65369: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pr65369() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let foo: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x60080040),        //make $r2 = 64 (0x40);;
     _96(0x00000000800000fce004f000),        //make $r1 = 259008 (0x3f3c0);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x180000fb),        //call 16c30 <memcmp>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16854 <foo+0x34>;;
     _32(0x180000b0),        //call 16b10 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let bar: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000100),        //addd $r0 = $r0, 4 (0x4);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040101),        //addd $r1 = $r1, 4 (0x4);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040201),        //addd $r1 = $r1, 8 (0x8);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000300),        //addd $r0 = $r0, 12 (0xc);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040301),        //addd $r1 = $r1, 12 (0xc);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000400),        //addd $r0 = $r0, 16 (0x10);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040401),        //addd $r1 = $r1, 16 (0x10);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000500),        //addd $r0 = $r0, 20 (0x14);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040501),        //addd $r1 = $r1, 20 (0x14);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000600),        //addd $r0 = $r0, 24 (0x18);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040601),        //addd $r1 = $r1, 24 (0x18);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000700),        //addd $r0 = $r0, 28 (0x1c);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040701),        //addd $r1 = $r1, 28 (0x1c);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000800),        //addd $r0 = $r0, 32 (0x20);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040801),        //addd $r1 = $r1, 32 (0x20);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000900),        //addd $r0 = $r0, 36 (0x24);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040901),        //addd $r1 = $r1, 36 (0x24);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000a00),        //addd $r0 = $r0, 40 (0x28);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040a01),        //addd $r1 = $r1, 40 (0x28);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000b00),        //addd $r0 = $r0, 44 (0x2c);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040b01),        //addd $r1 = $r1, 44 (0x2c);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000c00),        //addd $r0 = $r0, 48 (0x30);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040c01),        //addd $r1 = $r1, 48 (0x30);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000d00),        //addd $r0 = $r0, 52 (0x34);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040d01),        //addd $r1 = $r1, 52 (0x34);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000e00),        //addd $r0 = $r0, 56 (0x38);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040e01),        //addd $r1 = $r1, 56 (0x38);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61000f00),        //addd $r0 = $r0, 60 (0x3c);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x61040f01),        //addd $r1 = $r1, 60 (0x3c);;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x1fffff8c),        //call 16820 <foo>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130180c),        //addd $r12 = $r12, 96 (0x60);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x6100040c),        //addd $r0 = $r12, 16 (0x10);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050200),        //sd 8 (0x8)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050400),        //sd 16 (0x10)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050600),        //sd 24 (0x18)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050800),        //sd 32 (0x20)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050a00),        //sd 40 (0x28)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050c00),        //sd 48 (0x30)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050e00),        //sd 56 (0x38)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27051000),        //sd 64 (0x40)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27051200),        //sd 72 (0x48)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27051400),        //sd 80 (0x50)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27051600),        //sd 88 (0x58)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x24051800),        //sb 96 (0x60)[$r0] = $r1;;
     _32(0x6100040c),        //addd $r0 = $r12, 16 (0x10);;
     _32(0x61000040),        //addd $r0 = $r0, 1 (0x1);;
     _96(0x00000000800000fce004f000),        //make $r1 = 259008 (0x3f3c0);;
     _32(0x38080001),        //ld $r2 = 0 (0x0)[$r1];;
     _32(0x27090000),        //sd 0 (0x0)[$r0] = $r2;;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x27090200),        //sd 8 (0x8)[$r0] = $r2;;
     _32(0x38080401),        //ld $r2 = 16 (0x10)[$r1];;
     _32(0x27090400),        //sd 16 (0x10)[$r0] = $r2;;
     _32(0x38080601),        //ld $r2 = 24 (0x18)[$r1];;
     _32(0x27090600),        //sd 24 (0x18)[$r0] = $r2;;
     _32(0x38080801),        //ld $r2 = 32 (0x20)[$r1];;
     _32(0x27090800),        //sd 32 (0x20)[$r0] = $r2;;
     _32(0x38080a01),        //ld $r2 = 40 (0x28)[$r1];;
     _32(0x27090a00),        //sd 40 (0x28)[$r0] = $r2;;
     _32(0x38080c01),        //ld $r2 = 48 (0x30)[$r1];;
     _32(0x27090c00),        //sd 48 (0x30)[$r0] = $r2;;
     _32(0x38080e01),        //ld $r2 = 56 (0x38)[$r1];;
     _32(0x27090e00),        //sd 56 (0x38)[$r0] = $r2;;
     _32(0x38081001),        //ld $r2 = 64 (0x40)[$r1];;
     _32(0x27091000),        //sd 64 (0x40)[$r0] = $r2;;
     _32(0x38081201),        //ld $r2 = 72 (0x48)[$r1];;
     _32(0x27091200),        //sd 72 (0x48)[$r0] = $r2;;
     _32(0x20041401),        //lbz $r1 = 80 (0x50)[$r1];;
     _32(0x24051400),        //sb 80 (0x50)[$r0] = $r1;;
     _32(0x6100040c),        //addd $r0 = $r12, 16 (0x10);;
     _32(0x61000040),        //addd $r0 = $r0, 1 (0x1);;
     _32(0x1fffff5d),        //call 16868 <bar>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000115),        //call 16f70 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007df),        //call 18aa0 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110101000001000; //0x16a08
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(bar, 0b00010110100001101000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110101000001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110101100010000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
