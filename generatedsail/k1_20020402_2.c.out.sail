// executing 20020402_2.c.out.dumped test 
val k1_20020402_2.c.out.dumped: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_20020402_2.c.out.dumped() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let setStatPointers: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x2705020c),        //sd 8 (0x8)[$r12] = $r1;;
     _32(0x3800020c),        //ld $r0 = 8 (0x8)[$r12];;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x26050100),        //sw 4 (0x4)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050200),        //sd 8 (0x8)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x60040005),        //make $r1 = 5 (0x5);;
     _32(0x27050400),        //sd 16 (0x10)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61000600),        //addd $r0 = $r0, 24 (0x18);;
     _96(0x0000000080000118e0041400),        //make $r1 = 286800 (0x46050);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61000800),        //addd $r0 = $r0, 32 (0x20);;
     _96(0x0000000080000118e0042600),        //make $r1 = 286872 (0x46098);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61000a00),        //addd $r0 = $r0, 40 (0x28);;
     _96(0x0000000080000118e0041e00),        //make $r1 = 286840 (0x46078);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61000c00),        //addd $r0 = $r0, 48 (0x30);;
     _96(0x0000000080000118e0040e00),        //make $r1 = 286776 (0x46038);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61000e00),        //addd $r0 = $r0, 56 (0x38);;
     _96(0x0000000080000118e0040c00),        //make $r1 = 286768 (0x46030);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61001000),        //addd $r0 = $r0, 64 (0x40);;
     _96(0x0000000080000118e0041000),        //make $r1 = 286784 (0x46040);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000118e0001000),        //make $r0 = 286784 (0x46040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61004c00),        //addd $r0 = $r0, 304 (0x130);;
     _96(0x0000000080000117e004e800),        //make $r1 = 286624 (0x45fa0);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61004e00),        //addd $r0 = $r0, 312 (0x138);;
     _96(0x0000000080000118e0041c00),        //make $r1 = 286832 (0x46070);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61005000),        //addd $r0 = $r0, 320 (0x140);;
     _96(0x0000000080000118e0040200),        //make $r1 = 286728 (0x46008);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61005200),        //addd $r0 = $r0, 328 (0x148);;
     _96(0x0000000080000118e0042000),        //make $r1 = 286848 (0x46080);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61005400),        //addd $r0 = $r0, 336 (0x150);;
     _96(0x0000000080000118e0040000),        //make $r1 = 286720 (0x46000);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61005600),        //addd $r0 = $r0, 344 (0x158);;
     _96(0x0000000080000118e0041800),        //make $r1 = 286816 (0x46060);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000117e000ea00),        //make $r0 = 286632 (0x45fa8);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61045800),        //addd $r1 = $r0, 352 (0x160);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61045a00),        //addd $r1 = $r0, 360 (0x168);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050200),        //sd 8 (0x8)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61045c00),        //addd $r1 = $r0, 368 (0x170);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050400),        //sd 16 (0x10)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61045e00),        //addd $r1 = $r0, 376 (0x178);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050600),        //sd 24 (0x18)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61046000),        //addd $r1 = $r0, 384 (0x180);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050800),        //sd 32 (0x20)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61046200),        //addd $r1 = $r0, 392 (0x188);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050a00),        //sd 40 (0x28)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61046400),        //addd $r1 = $r0, 400 (0x190);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050c00),        //sd 48 (0x30)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61046600),        //addd $r1 = $r0, 408 (0x198);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050e00),        //sd 56 (0x38)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61046800),        //addd $r1 = $r0, 416 (0x1a0);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27051000),        //sd 64 (0x40)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61046a00),        //addd $r1 = $r0, 424 (0x1a8);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27051200),        //sd 72 (0x48)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61046c00),        //addd $r1 = $r0, 432 (0x1b0);;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27051400),        //sd 80 (0x50)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61003400),        //addd $r0 = $r0, 208 (0xd0);;
     _96(0x0000000080000118e0042a00),        //make $r1 = 286888 (0x460a8);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61003600),        //addd $r0 = $r0, 216 (0xd8);;
     _96(0x0000000080000118e0041a00),        //make $r1 = 286824 (0x46068);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61003800),        //addd $r0 = $r0, 224 (0xe0);;
     _96(0x0000000080000118e0040800),        //make $r1 = 286752 (0x46020);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61003a00),        //addd $r0 = $r0, 232 (0xe8);;
     _96(0x0000000080000118e0041600),        //make $r1 = 286808 (0x46058);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61003c00),        //addd $r0 = $r0, 240 (0xf0);;
     _96(0x0000000080000118e0040400),        //make $r1 = 286736 (0x46010);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61003e00),        //addd $r0 = $r0, 248 (0xf8);;
     _96(0x0000000080000118e0040600),        //make $r1 = 286744 (0x46018);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61004000),        //addd $r0 = $r0, 256 (0x100);;
     _96(0x0000000080000118e0042800),        //make $r1 = 286880 (0x460a0);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61004200),        //addd $r0 = $r0, 264 (0x108);;
     _96(0x0000000080000118e0040a00),        //make $r1 = 286760 (0x46028);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61004400),        //addd $r0 = $r0, 272 (0x110);;
     _96(0x0000000080000118e0042c00),        //make $r1 = 286896 (0x460b0);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61004600),        //addd $r0 = $r0, 280 (0x118);;
     _96(0x0000000080000118e0042400),        //make $r1 = 286864 (0x46090);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61004800),        //addd $r0 = $r0, 288 (0x120);;
     _96(0x0000000080000118e0042200),        //make $r1 = 286856 (0x46088);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61004a00),        //addd $r0 = $r0, 296 (0x128);;
     _96(0x0000000080000118e0041200),        //make $r1 = 286792 (0x46048);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let initPte: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x2705020c),        //sd 8 (0x8)[$r12] = $r1;;
     _96(0x0000000080000117e0002600),        //make $r0 = 285848 (0x45c98);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x1fffff1f),        //call 16820 <setStatPointers>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let InitCache: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3400060c),        //lws $r0 = 24 (0x18)[$r12];;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffffe7),        //call 16b78 <initPte>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x60000005),        //make $r0 = 5 (0x5);;
     _32(0x1fffffec),        //call 16bc0 <InitCache>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110101111111000; //0x16bf8
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(setStatPointers, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(initPte, 0b00010110101101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(InitCache, 0b00010110101111000000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110101111111000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
