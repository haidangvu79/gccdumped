// executing pr69691.c.out.dumped test 
val k1_pr69691.: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pr69691.() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let fn: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x18000404),        //call 17850 <strchr>;;
     _32(0x08000140),        //cb.dnez $r0? 16858 <fn+0x38>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000003f001b000),        //compw.ne $r0 = $r0, 96 (0x60);;
     _32(0x0c0000c0),        //cb.wnez $r0? 16860 <fn+0x40>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x10000002),        //goto 16864 <fn+0x44>;;
     _32(0x18000204),        //call 17070 <abort>;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let foo: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16894 <foo+0x1c>;;
     _32(0x180001f8),        //call 17070 <abort>;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffffe1),        //call 16820 <fn>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000002f401b7c0),        //compw.le $r0 = $r0, 95 (0x5f);;
     _32(0x0c0003c0),        //cb.wnez $r0? 168e8 <foo+0x70>;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffffda),        //call 16820 <fn>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000003f501b680),        //compw.gt $r0 = $r0, 122 (0x7a);;
     _32(0x0c000200),        //cb.wnez $r0? 168e8 <foo+0x70>;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffffd3),        //call 16820 <fn>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7100e800),        //addw $r0 = $r0, -96 (0xffffffa0);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x10000010),        //goto 16924 <foo+0xac>;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _64(0x00000001f001b380),        //compw.ne $r0 = $r0, 46 (0x2e);;
     _32(0x0c0000c0),        //cb.wnez $r0? 16900 <foo+0x88>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1000000a),        //goto 16924 <foo+0xac>;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _96(0x0000000080000100e000f000),        //make $r0 = 263104 (0x403c0);;
     _32(0x180002a4),        //call 173a8 <printf>;;
     _64(0x003fffffe000ffc0),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let bar: list_I = 
 [|
     _64(0x07ffffffe130680c),        //addd $r12 = $r12, -608 (0xfffffffffffffda0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61044200),        //addd $r1 = $r0, 264 (0x108);;
     _96(0x00000000800000fce0080800),        //make $r2 = 258080 (0x3f020);;
     _32(0x27050002),        //sd 0 (0x0)[$r2] = $r1;;
     _96(0x000000008000010ae0047000),        //make $r1 = 272832 (0x429c0);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _64(0x18000000a701960c),        //sd 600 (0x258)[$r12] = $r0;;
     _32(0x100000a3),        //goto 16c18 <bar+0x2e0>;;
     _64(0x18000000b800960c),        //ld $r0 = 600 (0x258)[$r12];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x61000e0c),        //addd $r0 = $r12, 56 (0x38);;
     _32(0x1800040a),        //call 179c8 <strcpy>;;
     _32(0x61000e0c),        //addd $r0 = $r12, 56 (0x38);;
     _64(0x18000000a701940c),        //sd 592 (0x250)[$r12] = $r0;;
     _32(0x60040020),        //make $r1 = 32 (0x20);;
     _64(0x18000000b800940c),        //ld $r0 = 592 (0x250)[$r12];;
     _32(0x180003a5),        //call 17850 <strchr>;;
     _64(0x18000000a7018e0c),        //sd 568 (0x238)[$r12] = $r0;;
     _64(0x18000000b8008e0c),        //ld $r0 = 568 (0x238)[$r12];;
     _32(0x08800140),        //cb.deqz $r0? 169e4 <bar+0xac>;;
     _64(0x18000000b8008e0c),        //ld $r0 = 568 (0x238)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x24050000),        //sb 0 (0x0)[$r0] = $r1;;
     _64(0x18000000b800940c),        //ld $r0 = 592 (0x250)[$r12];;
     _32(0x18000419),        //call 17a50 <strlen>;;
     _64(0x18000000a6018d0c),        //sw 564 (0x234)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000a601920c),        //sw 584 (0x248)[$r12] = $r0;;
     _96(0x000000008000010ae0007000),        //make $r0 = 272832 (0x429c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _64(0x18000000a701900c),        //sd 576 (0x240)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x25050200),        //sh 8 (0x8)[$r0] = $r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000a601930c),        //sw 588 (0x24c)[$r12] = $r0;;
     _32(0x1000005b),        //goto 16ba8 <bar+0x270>;;
     _64(0x18000000b400930c),        //lws $r0 = 588 (0x24c)[$r12];;
     _64(0x18000000b804940c),        //ld $r1 = 592 (0x250)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _64(0x18000000a4018ccc),        //sb 563 (0x233)[$r12] = $r0;;
     _64(0x18000000a4008ccc),        //lbs $r0 = 563 (0x233)[$r12];;
     _64(0x00000001f401b3c0),        //compw.le $r0 = $r0, 47 (0x2f);;
     _32(0x0c0004c0),        //cb.wnez $r0? 16abc <bar+0x184>;;
     _64(0x18000000a4008ccc),        //lbs $r0 = 563 (0x233)[$r12];;
     _64(0x00000001f501b640),        //compw.gt $r0 = $r0, 57 (0x39);;
     _32(0x0c000380),        //cb.wnez $r0? 16abc <bar+0x184>;;
     _64(0x18000000a0008ccc),        //lbz $r0 = 563 (0x233)[$r12];;
     _32(0x7100f400),        //addw $r0 = $r0, -48 (0xffffffd0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _64(0x18000000b400920c),        //lws $r0 = 584 (0x248)[$r12];;
     _64(0x00000000e108980c),        //addd $r2 = $r12, 608 (0x260);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _64(0x1fffffffa4057200),        //sb -568 (0xfffffffffffffdc8)[$r0] = $r1;;
     _32(0x10000037),        //goto 16b94 <bar+0x25c>;;
     _64(0x18000000a4008ccc),        //lbs $r0 = 563 (0x233)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff6c),        //call 16878 <foo>;;
     _64(0x18000000a6018b0c),        //sw 556 (0x22c)[$r12] = $r0;;
     _64(0x18000000b804900c),        //ld $r1 = 576 (0x240)[$r12];;
     _64(0x18000000b4008b0c),        //lws $r0 = 556 (0x22c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x080006c0),        //cb.dnez $r0? 16b5c <bar+0x224>;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x61004201),        //addd $r0 = $r1, 264 (0x108);;
     _96(0x00000000800000fce0080800),        //make $r2 = 258080 (0x3f020);;
     _32(0x27010002),        //sd 0 (0x0)[$r2] = $r0;;
     _64(0x18000000b808900c),        //ld $r2 = 576 (0x240)[$r12];;
     _64(0x18000000b4008b0c),        //lws $r0 = 556 (0x22c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x27050400),        //sd 16 (0x10)[$r0] = $r1;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x000000008000011de0040e00),        //make $r1 = 291896 (0x47438);;
     _32(0x7001a040),        //compd.ne $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16b5c <bar+0x224>;;
     _32(0x18000146),        //call 17070 <abort>;;
     _64(0x18000000b804900c),        //ld $r1 = 576 (0x240)[$r12];;
     _64(0x18000000b4008b0c),        //lws $r0 = 556 (0x22c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _64(0x18000000a701900c),        //sd 576 (0x240)[$r12] = $r0;;
     _64(0x18000000b000920c),        //lwz $r0 = 584 (0x248)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000000a601920c),        //sw 584 (0x248)[$r12] = $r0;;
     _64(0x18000000b000930c),        //lwz $r0 = 588 (0x24c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000000a601930c),        //sw 588 (0x24c)[$r12] = $r0;;
     _64(0x18000000b004930c),        //lwz $r1 = 588 (0x24c)[$r12];;
     _64(0x18000000b0008d0c),        //lwz $r0 = 564 (0x234)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7fe840),        //cb.wnez $r0? 16a40 <bar+0x108>;;
     _64(0x18000000b800900c),        //ld $r0 = 576 (0x240)[$r12];;
     _32(0x38040a0c),        //ld $r1 = 40 (0x28)[$r12];;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x28040c0c),        //lhz $r1 = 48 (0x30)[$r12];;
     _32(0x25050200),        //sh 8 (0x8)[$r0] = $r1;;
     _64(0x18000000b8008e0c),        //ld $r0 = 568 (0x238)[$r12];;
     _32(0x08800180),        //cb.deqz $r0? 16bf8 <bar+0x2c0>;;
     _64(0x18000000b8008e0c),        //ld $r0 = 568 (0x238)[$r12];;
     _32(0x61000040),        //addd $r0 = $r0, 1 (0x1);;
     _64(0x18000000a701940c),        //sd 592 (0x250)[$r12] = $r0;;
     _64(0x18000000b8008e0c),        //ld $r0 = 568 (0x238)[$r12];;
     _32(0x087fdb00),        //cb.dnez $r0? 169b0 <bar+0x78>;;
     _64(0x18000000b800960c),        //ld $r0 = 600 (0x258)[$r12];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _64(0x18000000a701960c),        //sd 600 (0x258)[$r12] = $r0;;
     _64(0x18000000b800960c),        //ld $r0 = 600 (0x258)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x087fd6c0),        //cb.dnez $r0? 16990 <bar+0x58>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _64(0x00000000e130980c),        //addd $r12 = $r12, 608 (0x260);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let baz: list_I = 
 [|
     _64(0x07ffffffe130580c),        //addd $r12 = $r12, -672 (0xfffffffffffffd60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x1800037c),        //call 17a50 <strlen>;;
     _64(0x18000000a601a10c),        //sw 644 (0x284)[$r12] = $r0;;
     _32(0x60000060),        //make $r0 = 96 (0x60);;
     _32(0x2401560c),        //sb 344 (0x158)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000a601a70c),        //sw 668 (0x29c)[$r12] = $r0;;
     _32(0x10000027),        //goto 16d1c <baz+0xd4>;;
     _64(0x18000000b400a70c),        //lws $r0 = 668 (0x29c)[$r12];;
     _32(0x3804080c),        //ld $r1 = 32 (0x20)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffee0),        //call 16820 <fn>;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _64(0x18000000b000a70c),        //lwz $r0 = 668 (0x29c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78043fc1),        //zxbd $r1 = $r1;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _64(0x00000000e108a80c),        //addd $r2 = $r12, 672 (0x2a0);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2405ae00),        //sb -328 (0xfffffeb8)[$r0] = $r1;;
     _64(0x18000000b000a70c),        //lwz $r0 = 668 (0x29c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _64(0x00000000e104a80c),        //addd $r1 = $r12, 672 (0x2a0);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x2000ae00),        //lbz $r0 = -328 (0xfffffeb8)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffedf),        //call 16878 <foo>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0e002f80),        //cb.wlez $r0? 16ffc <baz+0x3b4>;;
     _64(0x18000000b000a70c),        //lwz $r0 = 668 (0x29c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000000a601a70c),        //sw 668 (0x29c)[$r12] = $r0;;
     _64(0x18000000b004a70c),        //lwz $r1 = 668 (0x29c)[$r12];;
     _64(0x18000000b000a10c),        //lwz $r0 = 644 (0x284)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7ff540),        //cb.wnez $r0? 16c84 <baz+0x3c>;;
     _64(0x18000000b000a10c),        //lwz $r0 = 644 (0x284)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _64(0x00000000e104a80c),        //addd $r1 = $r12, 672 (0x2a0);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x60040060),        //make $r1 = 96 (0x60);;
     _32(0x2405ae00),        //sb -328 (0xfffffeb8)[$r0] = $r1;;
     _64(0x18000000b000a10c),        //lwz $r0 = 644 (0x284)[$r12];;
     _32(0x71000080),        //addw $r0 = $r0, 2 (0x2);;
     _64(0x18000000a601a10c),        //sw 644 (0x284)[$r12] = $r0;;
     _64(0x18000000b000a10c),        //lwz $r0 = 644 (0x284)[$r12];;
     _32(0x71000080),        //addw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6907f000),        //sxwd $r1 = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x6a080001),        //copyd $r2 = $r1;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x18000100),        //call 17190 <memset>;;
     _96(0x000000008000010ae0007000),        //make $r0 = 272832 (0x429c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x08802600),        //cb.deqz $r0? 17004 <baz+0x3bc>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000a601a70c),        //sw 668 (0x29c)[$r12] = $r0;;
     _32(0x1000006e),        //goto 16f6c <baz+0x324>;;
     _96(0x000000008000010ae0007000),        //make $r0 = 272832 (0x429c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _64(0x18000000a701a20c),        //sd 648 (0x288)[$r12] = $r0;;
     _64(0x18000000b000a70c),        //lwz $r0 = 668 (0x29c)[$r12];;
     _64(0x18000000a601a60c),        //sw 664 (0x298)[$r12] = $r0;;
     _32(0x10000056),        //goto 16f38 <baz+0x2f0>;;
     _64(0x18000000b400a60c),        //lws $r0 = 664 (0x298)[$r12];;
     _64(0x00000000e104a80c),        //addd $r1 = $r12, 672 (0x2a0);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x2000ae00),        //lbz $r0 = -328 (0xfffffeb8)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffe9d),        //call 16878 <foo>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x18000000b804a20c),        //ld $r1 = 648 (0x288)[$r12];;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _64(0x18000000a701a20c),        //sd 648 (0x288)[$r12] = $r0;;
     _64(0x18000000b800a20c),        //ld $r0 = 648 (0x288)[$r12];;
     _32(0x08801200),        //cb.deqz $r0? 16f54 <baz+0x30c>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000a601a50c),        //sw 660 (0x294)[$r12] = $r0;;
     _32(0x1000002c),        //goto 16ef4 <baz+0x2ac>;;
     _64(0x18000000b804a20c),        //ld $r1 = 648 (0x288)[$r12];;
     _64(0x18000000b400a50c),        //lws $r0 = 660 (0x294)[$r12];;
     _32(0x200ae001),        //lbz $r2 = $r0[$r1];;
     _64(0x18000000b004a70c),        //lwz $r1 = 668 (0x29c)[$r12];;
     _64(0x18000000b000a50c),        //lwz $r0 = 660 (0x294)[$r12];;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _64(0x00000000e104a80c),        //addd $r1 = $r12, 672 (0x2a0);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _64(0x1fffffffa0006200),        //lbz $r0 = -632 (0xfffffffffffffd88)[$r0];;
     _32(0x68077002),        //sxbd $r1 = $r2;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7401b001),        //compw.le $r0 = $r1, $r0;;
     _32(0x0c000480),        //cb.wnez $r0? 16ee0 <baz+0x298>;;
     _64(0x18000000b004a70c),        //lwz $r1 = 668 (0x29c)[$r12];;
     _64(0x18000000b000a50c),        //lwz $r0 = 660 (0x294)[$r12];;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _64(0x18000000b804a20c),        //ld $r1 = 648 (0x288)[$r12];;
     _64(0x18000000b400a50c),        //lws $r0 = 660 (0x294)[$r12];;
     _32(0x2006e001),        //lbz $r1 = $r0[$r1];;
     _32(0x6903f002),        //sxwd $r0 = $r2;;
     _64(0x00000000e108a80c),        //addd $r2 = $r12, 672 (0x2a0);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _64(0x1fffffffa4056200),        //sb -632 (0xfffffffffffffd88)[$r0] = $r1;;
     _64(0x18000000b000a50c),        //lwz $r0 = 660 (0x294)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000000a601a50c),        //sw 660 (0x294)[$r12] = $r0;;
     _64(0x18000000b004a60c),        //lwz $r1 = 664 (0x298)[$r12];;
     _64(0x18000000b000a70c),        //lwz $r0 = 668 (0x29c)[$r12];;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000080),        //addw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x18000000b004a50c),        //lwz $r1 = 660 (0x294)[$r12];;
     _32(0x7401b001),        //compw.le $r0 = $r1, $r0;;
     _32(0x0c7ff280),        //cb.wnez $r0? 16e48 <baz+0x200>;;
     _64(0x18000000b000a60c),        //lwz $r0 = 664 (0x298)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000000a601a60c),        //sw 664 (0x298)[$r12] = $r0;;
     _64(0x18000000b004a60c),        //lwz $r1 = 664 (0x298)[$r12];;
     _64(0x18000000b000a10c),        //lwz $r0 = 644 (0x284)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7fe980),        //cb.wnez $r0? 16de4 <baz+0x19c>;;
     _32(0x10000002),        //goto 16f58 <baz+0x310>;;
     _32(0x7f03f000),        //nop ;;
     _64(0x18000000b000a70c),        //lwz $r0 = 668 (0x29c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000000a601a70c),        //sw 668 (0x29c)[$r12] = $r0;;
     _64(0x18000000b004a70c),        //lwz $r1 = 668 (0x29c)[$r12];;
     _64(0x18000000b000a10c),        //lwz $r0 = 644 (0x284)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7fe380),        //cb.wnez $r0? 16db8 <baz+0x170>;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _64(0x18000000a601a70c),        //sw 668 (0x29c)[$r12] = $r0;;
     _32(0x10000012),        //goto 16fd8 <baz+0x390>;;
     _64(0x18000000b400a70c),        //lws $r0 = 668 (0x29c)[$r12];;
     _64(0x00000000e104a80c),        //addd $r1 = $r12, 672 (0x2a0);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _64(0x1fffffffa0006200),        //lbz $r0 = -632 (0xfffffffffffffd88)[$r0];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800040),        //cb.deqz $r0? 16fc4 <baz+0x37c>;;
     _64(0x18000000b000a70c),        //lwz $r0 = 668 (0x29c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000000a601a70c),        //sw 668 (0x29c)[$r12] = $r0;;
     _64(0x18000000b000a10c),        //lwz $r0 = 644 (0x284)[$r12];;
     _32(0x7100ff80),        //addw $r0 = $r0, -2 (0xfffffffe);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x18000000b004a70c),        //lwz $r1 = 668 (0x29c)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7ffa00),        //cb.wnez $r0? 16f94 <baz+0x34c>;;
     _32(0x10000004),        //goto 17008 <baz+0x3c0>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000002),        //goto 17008 <baz+0x3c0>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _64(0x00000000e130a80c),        //addd $r12 = $r12, 672 (0x2a0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x1ffffe40),        //call 16938 <bar>;;
     _64(0x00185858e0005840),        //make $r0 = 1633771873 (0x61616161);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000061),        //make $r0 = 97 (0x61);;
     _32(0x2501070c),        //sh 28 (0x1c)[$r12] = $r0;;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x1ffffefd),        //call 16c48 <baz>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x9800018f),        //call 176b8 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98002c49),        //call 221a8 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010111000000100000; //0x17020
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo, 0b00010110100001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(bar, 0b00010110100100111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(baz, 0b00010110110001001000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010111000000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111000001110000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
