// executing 20020108_1 test 
val k1_20020108_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_20020108_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let ashift_qi_0: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_qi_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_qi_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_qi_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_qi_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x79023100),        //sllw $r0 = $r0, 4 (0x4);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_qi_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x79023140),        //sllw $r0 = $r0, 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_qi_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x79023180),        //sllw $r0 = $r0, 6 (0x6);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_qi_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x790231c0),        //sllw $r0 = $r0, 7 (0x7);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_qi_0: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_qi_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023040),        //srlw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_qi_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023080),        //srlw $r0 = $r0, 2 (0x2);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_qi_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0230c0),        //srlw $r0 = $r0, 3 (0x3);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_qi_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023100),        //srlw $r0 = $r0, 4 (0x4);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_qi_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023140),        //srlw $r0 = $r0, 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_qi_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023180),        //srlw $r0 = $r0, 6 (0x6);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_qi_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0231c0),        //srlw $r0 = $r0, 7 (0x7);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_qi_0: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_qi_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023040),        //sraw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_qi_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023080),        //sraw $r0 = $r0, 2 (0x2);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_qi_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7a0230c0),        //sraw $r0 = $r0, 3 (0x3);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_qi_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023100),        //sraw $r0 = $r0, 4 (0x4);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_qi_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023140),        //sraw $r0 = $r0, 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_qi_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023180),        //sraw $r0 = $r0, 6 (0x6);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_qi_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x7a0231c0),        //sraw $r0 = $r0, 7 (0x7);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_0: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023100),        //sllw $r0 = $r0, 4 (0x4);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023140),        //sllw $r0 = $r0, 5 (0x5);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023180),        //sllw $r0 = $r0, 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x790231c0),        //sllw $r0 = $r0, 7 (0x7);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023200),        //sllw $r0 = $r0, 8 (0x8);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023240),        //sllw $r0 = $r0, 9 (0x9);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_10: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023280),        //sllw $r0 = $r0, 10 (0xa);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_11: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x790232c0),        //sllw $r0 = $r0, 11 (0xb);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_12: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023300),        //sllw $r0 = $r0, 12 (0xc);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_13: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023340),        //sllw $r0 = $r0, 13 (0xd);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_14: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x79023380),        //sllw $r0 = $r0, 14 (0xe);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_hi_15: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x790233c0),        //sllw $r0 = $r0, 15 (0xf);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_0: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023040),        //srlw $r0 = $r0, 1 (0x1);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023080),        //srlw $r0 = $r0, 2 (0x2);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0230c0),        //srlw $r0 = $r0, 3 (0x3);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023100),        //srlw $r0 = $r0, 4 (0x4);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023140),        //srlw $r0 = $r0, 5 (0x5);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023180),        //srlw $r0 = $r0, 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0231c0),        //srlw $r0 = $r0, 7 (0x7);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023200),        //srlw $r0 = $r0, 8 (0x8);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023240),        //srlw $r0 = $r0, 9 (0x9);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_10: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023280),        //srlw $r0 = $r0, 10 (0xa);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_11: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0232c0),        //srlw $r0 = $r0, 11 (0xb);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_12: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023300),        //srlw $r0 = $r0, 12 (0xc);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_13: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023340),        //srlw $r0 = $r0, 13 (0xd);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_14: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023380),        //srlw $r0 = $r0, 14 (0xe);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_hi_15: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0233c0),        //srlw $r0 = $r0, 15 (0xf);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_0: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023040),        //sraw $r0 = $r0, 1 (0x1);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023080),        //sraw $r0 = $r0, 2 (0x2);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a0230c0),        //sraw $r0 = $r0, 3 (0x3);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023100),        //sraw $r0 = $r0, 4 (0x4);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023140),        //sraw $r0 = $r0, 5 (0x5);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023180),        //sraw $r0 = $r0, 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a0231c0),        //sraw $r0 = $r0, 7 (0x7);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023200),        //sraw $r0 = $r0, 8 (0x8);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023240),        //sraw $r0 = $r0, 9 (0x9);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_10: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023280),        //sraw $r0 = $r0, 10 (0xa);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_11: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a0232c0),        //sraw $r0 = $r0, 11 (0xb);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_12: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023300),        //sraw $r0 = $r0, 12 (0xc);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_13: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023340),        //sraw $r0 = $r0, 13 (0xd);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_14: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a023380),        //sraw $r0 = $r0, 14 (0xe);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_hi_15: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x7a0233c0),        //sraw $r0 = $r0, 15 (0xf);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_0: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023100),        //sllw $r0 = $r0, 4 (0x4);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023140),        //sllw $r0 = $r0, 5 (0x5);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023180),        //sllw $r0 = $r0, 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x790231c0),        //sllw $r0 = $r0, 7 (0x7);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023200),        //sllw $r0 = $r0, 8 (0x8);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023240),        //sllw $r0 = $r0, 9 (0x9);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_10: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023280),        //sllw $r0 = $r0, 10 (0xa);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_11: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x790232c0),        //sllw $r0 = $r0, 11 (0xb);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_12: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023300),        //sllw $r0 = $r0, 12 (0xc);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_13: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023340),        //sllw $r0 = $r0, 13 (0xd);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_14: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023380),        //sllw $r0 = $r0, 14 (0xe);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_15: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x790233c0),        //sllw $r0 = $r0, 15 (0xf);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_16: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023400),        //sllw $r0 = $r0, 16 (0x10);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_17: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023440),        //sllw $r0 = $r0, 17 (0x11);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_18: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023480),        //sllw $r0 = $r0, 18 (0x12);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_19: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x790234c0),        //sllw $r0 = $r0, 19 (0x13);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_20: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023500),        //sllw $r0 = $r0, 20 (0x14);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_21: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023540),        //sllw $r0 = $r0, 21 (0x15);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_22: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023580),        //sllw $r0 = $r0, 22 (0x16);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_23: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x790235c0),        //sllw $r0 = $r0, 23 (0x17);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_24: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023600),        //sllw $r0 = $r0, 24 (0x18);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_25: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023640),        //sllw $r0 = $r0, 25 (0x19);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_26: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023680),        //sllw $r0 = $r0, 26 (0x1a);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_27: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x790236c0),        //sllw $r0 = $r0, 27 (0x1b);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_28: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023700),        //sllw $r0 = $r0, 28 (0x1c);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_29: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023740),        //sllw $r0 = $r0, 29 (0x1d);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_30: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x79023780),        //sllw $r0 = $r0, 30 (0x1e);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashift_si_31: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x790237c0),        //sllw $r0 = $r0, 31 (0x1f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_0: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023040),        //srlw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023080),        //srlw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0230c0),        //srlw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023100),        //srlw $r0 = $r0, 4 (0x4);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023140),        //srlw $r0 = $r0, 5 (0x5);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023180),        //srlw $r0 = $r0, 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0231c0),        //srlw $r0 = $r0, 7 (0x7);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023200),        //srlw $r0 = $r0, 8 (0x8);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023240),        //srlw $r0 = $r0, 9 (0x9);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_10: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023280),        //srlw $r0 = $r0, 10 (0xa);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_11: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0232c0),        //srlw $r0 = $r0, 11 (0xb);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_12: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023300),        //srlw $r0 = $r0, 12 (0xc);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_13: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023340),        //srlw $r0 = $r0, 13 (0xd);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_14: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023380),        //srlw $r0 = $r0, 14 (0xe);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_15: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0233c0),        //srlw $r0 = $r0, 15 (0xf);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_16: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023400),        //srlw $r0 = $r0, 16 (0x10);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_17: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023440),        //srlw $r0 = $r0, 17 (0x11);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_18: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023480),        //srlw $r0 = $r0, 18 (0x12);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_19: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0234c0),        //srlw $r0 = $r0, 19 (0x13);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_20: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023500),        //srlw $r0 = $r0, 20 (0x14);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_21: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023540),        //srlw $r0 = $r0, 21 (0x15);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_22: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023580),        //srlw $r0 = $r0, 22 (0x16);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_23: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0235c0),        //srlw $r0 = $r0, 23 (0x17);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_24: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023600),        //srlw $r0 = $r0, 24 (0x18);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_25: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023640),        //srlw $r0 = $r0, 25 (0x19);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_26: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023680),        //srlw $r0 = $r0, 26 (0x1a);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_27: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0236c0),        //srlw $r0 = $r0, 27 (0x1b);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_28: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023700),        //srlw $r0 = $r0, 28 (0x1c);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_29: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023740),        //srlw $r0 = $r0, 29 (0x1d);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_30: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b023780),        //srlw $r0 = $r0, 30 (0x1e);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let lshiftrt_si_31: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7b0237c0),        //srlw $r0 = $r0, 31 (0x1f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_0: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023040),        //sraw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023080),        //sraw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a0230c0),        //sraw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023100),        //sraw $r0 = $r0, 4 (0x4);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023140),        //sraw $r0 = $r0, 5 (0x5);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023180),        //sraw $r0 = $r0, 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a0231c0),        //sraw $r0 = $r0, 7 (0x7);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023200),        //sraw $r0 = $r0, 8 (0x8);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023240),        //sraw $r0 = $r0, 9 (0x9);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_10: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023280),        //sraw $r0 = $r0, 10 (0xa);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_11: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a0232c0),        //sraw $r0 = $r0, 11 (0xb);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_12: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023300),        //sraw $r0 = $r0, 12 (0xc);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_13: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023340),        //sraw $r0 = $r0, 13 (0xd);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_14: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023380),        //sraw $r0 = $r0, 14 (0xe);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_15: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a0233c0),        //sraw $r0 = $r0, 15 (0xf);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_16: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023400),        //sraw $r0 = $r0, 16 (0x10);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_17: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023440),        //sraw $r0 = $r0, 17 (0x11);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_18: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023480),        //sraw $r0 = $r0, 18 (0x12);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_19: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a0234c0),        //sraw $r0 = $r0, 19 (0x13);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_20: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023500),        //sraw $r0 = $r0, 20 (0x14);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_21: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023540),        //sraw $r0 = $r0, 21 (0x15);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_22: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023580),        //sraw $r0 = $r0, 22 (0x16);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_23: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a0235c0),        //sraw $r0 = $r0, 23 (0x17);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_24: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023600),        //sraw $r0 = $r0, 24 (0x18);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_25: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023640),        //sraw $r0 = $r0, 25 (0x19);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_26: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023680),        //sraw $r0 = $r0, 26 (0x1a);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_27: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a0236c0),        //sraw $r0 = $r0, 27 (0x1b);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_28: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023700),        //sraw $r0 = $r0, 28 (0x1c);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_29: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023740),        //sraw $r0 = $r0, 29 (0x1d);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_30: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a023780),        //sraw $r0 = $r0, 30 (0x1e);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ashiftrt_si_31: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a0237c0),        //sraw $r0 = $r0, 31 (0x1f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1fffface),        //call 16820 <ashift_qi_0>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000007f101b7c0),        //compw.eq $r0 = $r0, 255 (0xff);;
     _32(0x0c000080),        //cb.wnez $r0? 17d00 <main+0x28>;;
     _32(0x180005e5),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffacd),        //call 16838 <ashift_qi_1>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000007f101b780),        //compw.eq $r0 = $r0, 254 (0xfe);;
     _32(0x0c000080),        //cb.wnez $r0? 17d1c <main+0x44>;;
     _32(0x180005de),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1fffface),        //call 16858 <ashift_qi_2>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000007f101b700),        //compw.eq $r0 = $r0, 252 (0xfc);;
     _32(0x0c000080),        //cb.wnez $r0? 17d38 <main+0x60>;;
     _32(0x180005d7),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffacf),        //call 16878 <ashift_qi_3>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000007f101b600),        //compw.eq $r0 = $r0, 248 (0xf8);;
     _32(0x0c000080),        //cb.wnez $r0? 17d54 <main+0x7c>;;
     _32(0x180005d0),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad0),        //call 16898 <ashift_qi_4>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000007f101b400),        //compw.eq $r0 = $r0, 240 (0xf0);;
     _32(0x0c000080),        //cb.wnez $r0? 17d70 <main+0x98>;;
     _32(0x180005c9),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad1),        //call 168b8 <ashift_qi_5>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000007f101b000),        //compw.eq $r0 = $r0, 224 (0xe0);;
     _32(0x0c000080),        //cb.wnez $r0? 17d8c <main+0xb4>;;
     _32(0x180005c2),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad2),        //call 168d8 <ashift_qi_6>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000006f101b000),        //compw.eq $r0 = $r0, 192 (0xc0);;
     _32(0x0c000080),        //cb.wnez $r0? 17da8 <main+0xd0>;;
     _32(0x180005bb),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad3),        //call 168f8 <ashift_qi_7>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000004f101b000),        //compw.eq $r0 = $r0, 128 (0x80);;
     _32(0x0c000080),        //cb.wnez $r0? 17dc4 <main+0xec>;;
     _32(0x180005b4),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad4),        //call 16918 <lshiftrt_qi_0>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000007f101b7c0),        //compw.eq $r0 = $r0, 255 (0xff);;
     _32(0x0c000080),        //cb.wnez $r0? 17de0 <main+0x108>;;
     _32(0x180005ad),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad3),        //call 16930 <lshiftrt_qi_1>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000003f101b7c0),        //compw.eq $r0 = $r0, 127 (0x7f);;
     _32(0x0c000080),        //cb.wnez $r0? 17dfc <main+0x124>;;
     _32(0x180005a6),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad4),        //call 16950 <lshiftrt_qi_2>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000001f101b7c0),        //compw.eq $r0 = $r0, 63 (0x3f);;
     _32(0x0c000080),        //cb.wnez $r0? 17e18 <main+0x140>;;
     _32(0x1800059f),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad5),        //call 16970 <lshiftrt_qi_3>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 17e34 <main+0x15c>;;
     _32(0x18000598),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad6),        //call 16990 <lshiftrt_qi_4>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b3c0),        //compw.eq $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 17e50 <main+0x178>;;
     _32(0x18000591),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad7),        //call 169b0 <lshiftrt_qi_5>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b1c0),        //compw.eq $r0 = $r0, 7 (0x7);;
     _32(0x0c000080),        //cb.wnez $r0? 17e6c <main+0x194>;;
     _32(0x1800058a),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad8),        //call 169d0 <lshiftrt_qi_6>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b0c0),        //compw.eq $r0 = $r0, 3 (0x3);;
     _32(0x0c000080),        //cb.wnez $r0? 17e88 <main+0x1b0>;;
     _32(0x18000583),        //call 19490 <abort>;;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffad9),        //call 169f0 <lshiftrt_qi_7>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17ea4 <main+0x1cc>;;
     _32(0x1800057c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffada),        //call 16a10 <ashiftrt_qi_0>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 17ec4 <main+0x1ec>;;
     _32(0x18000574),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffad8),        //call 16a28 <ashiftrt_qi_1>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 17ee4 <main+0x20c>;;
     _32(0x1800056c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffad8),        //call 16a48 <ashiftrt_qi_2>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 17f04 <main+0x22c>;;
     _32(0x18000564),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffad8),        //call 16a68 <ashiftrt_qi_3>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 17f24 <main+0x24c>;;
     _32(0x1800055c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffad8),        //call 16a88 <ashiftrt_qi_4>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 17f44 <main+0x26c>;;
     _32(0x18000554),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffad8),        //call 16aa8 <ashiftrt_qi_5>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 17f64 <main+0x28c>;;
     _32(0x1800054c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffad8),        //call 16ac8 <ashiftrt_qi_6>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 17f84 <main+0x2ac>;;
     _32(0x18000544),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffad8),        //call 16ae8 <ashiftrt_qi_7>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 17fa4 <main+0x2cc>;;
     _32(0x1800053c),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa9a),        //call 16a10 <ashiftrt_qi_0>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17fb8 <main+0x2e0>;;
     _32(0x18000537),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa9b),        //call 16a28 <ashiftrt_qi_1>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17fcc <main+0x2f4>;;
     _32(0x18000532),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa9e),        //call 16a48 <ashiftrt_qi_2>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17fe0 <main+0x308>;;
     _32(0x1800052d),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffaa1),        //call 16a68 <ashiftrt_qi_3>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17ff4 <main+0x31c>;;
     _32(0x18000528),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffaa4),        //call 16a88 <ashiftrt_qi_4>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18008 <main+0x330>;;
     _32(0x18000523),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffaa7),        //call 16aa8 <ashiftrt_qi_5>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1801c <main+0x344>;;
     _32(0x1800051e),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffaaa),        //call 16ac8 <ashiftrt_qi_6>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18030 <main+0x358>;;
     _32(0x18000519),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffaad),        //call 16ae8 <ashiftrt_qi_7>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18044 <main+0x36c>;;
     _32(0x18000514),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaaf),        //call 16b08 <ashift_hi_0>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007fff101b7c0),        //compw.eq $r0 = $r0, 65535 (0xffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18064 <main+0x38c>;;
     _32(0x1800050c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16b20 <ashift_hi_1>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007fff101b780),        //compw.eq $r0 = $r0, 65534 (0xfffe);;
     _32(0x0c000080),        //cb.wnez $r0? 18084 <main+0x3ac>;;
     _32(0x18000504),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16b40 <ashift_hi_2>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007fff101b700),        //compw.eq $r0 = $r0, 65532 (0xfffc);;
     _32(0x0c000080),        //cb.wnez $r0? 180a4 <main+0x3cc>;;
     _32(0x180004fc),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16b60 <ashift_hi_3>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007fff101b600),        //compw.eq $r0 = $r0, 65528 (0xfff8);;
     _32(0x0c000080),        //cb.wnez $r0? 180c4 <main+0x3ec>;;
     _32(0x180004f4),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16b80 <ashift_hi_4>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007fff101b400),        //compw.eq $r0 = $r0, 65520 (0xfff0);;
     _32(0x0c000080),        //cb.wnez $r0? 180e4 <main+0x40c>;;
     _32(0x180004ec),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16ba0 <ashift_hi_5>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007fff101b000),        //compw.eq $r0 = $r0, 65504 (0xffe0);;
     _32(0x0c000080),        //cb.wnez $r0? 18104 <main+0x42c>;;
     _32(0x180004e4),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16bc0 <ashift_hi_6>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007fef101b000),        //compw.eq $r0 = $r0, 65472 (0xffc0);;
     _32(0x0c000080),        //cb.wnez $r0? 18124 <main+0x44c>;;
     _32(0x180004dc),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16be0 <ashift_hi_7>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007fcf101b000),        //compw.eq $r0 = $r0, 65408 (0xff80);;
     _32(0x0c000080),        //cb.wnez $r0? 18144 <main+0x46c>;;
     _32(0x180004d4),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16c00 <ashift_hi_8>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007f8f101b000),        //compw.eq $r0 = $r0, 65280 (0xff00);;
     _32(0x0c000080),        //cb.wnez $r0? 18164 <main+0x48c>;;
     _32(0x180004cc),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16c20 <ashift_hi_9>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007f0f101b000),        //compw.eq $r0 = $r0, 65024 (0xfe00);;
     _32(0x0c000080),        //cb.wnez $r0? 18184 <main+0x4ac>;;
     _32(0x180004c4),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16c40 <ashift_hi_10>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007e0f101b000),        //compw.eq $r0 = $r0, 64512 (0xfc00);;
     _32(0x0c000080),        //cb.wnez $r0? 181a4 <main+0x4cc>;;
     _32(0x180004bc),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16c60 <ashift_hi_11>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007c0f101b000),        //compw.eq $r0 = $r0, 63488 (0xf800);;
     _32(0x0c000080),        //cb.wnez $r0? 181c4 <main+0x4ec>;;
     _32(0x180004b4),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16c80 <ashift_hi_12>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000780f101b000),        //compw.eq $r0 = $r0, 61440 (0xf000);;
     _32(0x0c000080),        //cb.wnez $r0? 181e4 <main+0x50c>;;
     _32(0x180004ac),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16ca0 <ashift_hi_13>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000700f101b000),        //compw.eq $r0 = $r0, 57344 (0xe000);;
     _32(0x0c000080),        //cb.wnez $r0? 18204 <main+0x52c>;;
     _32(0x180004a4),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16cc0 <ashift_hi_14>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000600f101b000),        //compw.eq $r0 = $r0, 49152 (0xc000);;
     _32(0x0c000080),        //cb.wnez $r0? 18224 <main+0x54c>;;
     _32(0x1800049c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16ce0 <ashift_hi_15>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000400f101b000),        //compw.eq $r0 = $r0, 32768 (0x8000);;
     _32(0x0c000080),        //cb.wnez $r0? 18244 <main+0x56c>;;
     _32(0x18000494),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaad),        //call 16d00 <lshiftrt_hi_0>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000007fff101b7c0),        //compw.eq $r0 = $r0, 65535 (0xffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18264 <main+0x58c>;;
     _32(0x1800048c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16d18 <lshiftrt_hi_1>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000003fff101b7c0),        //compw.eq $r0 = $r0, 32767 (0x7fff);;
     _32(0x0c000080),        //cb.wnez $r0? 18284 <main+0x5ac>;;
     _32(0x18000484),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16d38 <lshiftrt_hi_2>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000001fff101b7c0),        //compw.eq $r0 = $r0, 16383 (0x3fff);;
     _32(0x0c000080),        //cb.wnez $r0? 182a4 <main+0x5cc>;;
     _32(0x1800047c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16d58 <lshiftrt_hi_3>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x000000fff101b7c0),        //compw.eq $r0 = $r0, 8191 (0x1fff);;
     _32(0x0c000080),        //cb.wnez $r0? 182c4 <main+0x5ec>;;
     _32(0x18000474),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16d78 <lshiftrt_hi_4>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000007ff101b7c0),        //compw.eq $r0 = $r0, 4095 (0xfff);;
     _32(0x0c000080),        //cb.wnez $r0? 182e4 <main+0x60c>;;
     _32(0x1800046c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16d98 <lshiftrt_hi_5>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000003ff101b7c0),        //compw.eq $r0 = $r0, 2047 (0x7ff);;
     _32(0x0c000080),        //cb.wnez $r0? 18304 <main+0x62c>;;
     _32(0x18000464),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16db8 <lshiftrt_hi_6>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff101b7c0),        //compw.eq $r0 = $r0, 1023 (0x3ff);;
     _32(0x0c000080),        //cb.wnez $r0? 18324 <main+0x64c>;;
     _32(0x1800045c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16dd8 <lshiftrt_hi_7>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000000ff101b7c0),        //compw.eq $r0 = $r0, 511 (0x1ff);;
     _32(0x0c000080),        //cb.wnez $r0? 18344 <main+0x66c>;;
     _32(0x18000454),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16df8 <lshiftrt_hi_8>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000007f101b7c0),        //compw.eq $r0 = $r0, 255 (0xff);;
     _32(0x0c000080),        //cb.wnez $r0? 18364 <main+0x68c>;;
     _32(0x1800044c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16e18 <lshiftrt_hi_9>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000003f101b7c0),        //compw.eq $r0 = $r0, 127 (0x7f);;
     _32(0x0c000080),        //cb.wnez $r0? 18384 <main+0x6ac>;;
     _32(0x18000444),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16e38 <lshiftrt_hi_10>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f101b7c0),        //compw.eq $r0 = $r0, 63 (0x3f);;
     _32(0x0c000080),        //cb.wnez $r0? 183a4 <main+0x6cc>;;
     _32(0x1800043c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16e58 <lshiftrt_hi_11>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 183c4 <main+0x6ec>;;
     _32(0x18000434),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16e78 <lshiftrt_hi_12>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000000f101b3c0),        //compw.eq $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 183e4 <main+0x70c>;;
     _32(0x1800042c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16e98 <lshiftrt_hi_13>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000000f101b1c0),        //compw.eq $r0 = $r0, 7 (0x7);;
     _32(0x0c000080),        //cb.wnez $r0? 18404 <main+0x72c>;;
     _32(0x18000424),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16eb8 <lshiftrt_hi_14>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000000f101b0c0),        //compw.eq $r0 = $r0, 3 (0x3);;
     _32(0x0c000080),        //cb.wnez $r0? 18424 <main+0x74c>;;
     _32(0x1800041c),        //call 19490 <abort>;;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffaab),        //call 16ed8 <lshiftrt_hi_15>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 18444 <main+0x76c>;;
     _32(0x18000414),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaac),        //call 16ef8 <ashiftrt_hi_0>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18464 <main+0x78c>;;
     _32(0x1800040c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 16f10 <ashiftrt_hi_1>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18484 <main+0x7ac>;;
     _32(0x18000404),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 16f30 <ashiftrt_hi_2>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 184a4 <main+0x7cc>;;
     _32(0x180003fc),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 16f50 <ashiftrt_hi_3>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 184c4 <main+0x7ec>;;
     _32(0x180003f4),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 16f70 <ashiftrt_hi_4>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 184e4 <main+0x80c>;;
     _32(0x180003ec),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 16f90 <ashiftrt_hi_5>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18504 <main+0x82c>;;
     _32(0x180003e4),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 16fb0 <ashiftrt_hi_6>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18524 <main+0x84c>;;
     _32(0x180003dc),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 16fd0 <ashiftrt_hi_7>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18544 <main+0x86c>;;
     _32(0x180003d4),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 16ff0 <ashiftrt_hi_8>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18564 <main+0x88c>;;
     _32(0x180003cc),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 17010 <ashiftrt_hi_9>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18584 <main+0x8ac>;;
     _32(0x180003c4),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 17030 <ashiftrt_hi_10>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 185a4 <main+0x8cc>;;
     _32(0x180003bc),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 17050 <ashiftrt_hi_11>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 185c4 <main+0x8ec>;;
     _32(0x180003b4),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 17070 <ashiftrt_hi_12>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 185e4 <main+0x90c>;;
     _32(0x180003ac),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 17090 <ashiftrt_hi_13>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18604 <main+0x92c>;;
     _32(0x180003a4),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 170b0 <ashiftrt_hi_14>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18624 <main+0x94c>;;
     _32(0x1800039c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 170d0 <ashiftrt_hi_15>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18644 <main+0x96c>;;
     _32(0x18000394),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa2c),        //call 16ef8 <ashiftrt_hi_0>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18658 <main+0x980>;;
     _32(0x1800038f),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa2d),        //call 16f10 <ashiftrt_hi_1>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1866c <main+0x994>;;
     _32(0x1800038a),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa30),        //call 16f30 <ashiftrt_hi_2>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18680 <main+0x9a8>;;
     _32(0x18000385),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa33),        //call 16f50 <ashiftrt_hi_3>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18694 <main+0x9bc>;;
     _32(0x18000380),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa36),        //call 16f70 <ashiftrt_hi_4>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 186a8 <main+0x9d0>;;
     _32(0x1800037b),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa39),        //call 16f90 <ashiftrt_hi_5>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 186bc <main+0x9e4>;;
     _32(0x18000376),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa3c),        //call 16fb0 <ashiftrt_hi_6>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 186d0 <main+0x9f8>;;
     _32(0x18000371),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa3f),        //call 16fd0 <ashiftrt_hi_7>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 186e4 <main+0xa0c>;;
     _32(0x1800036c),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa42),        //call 16ff0 <ashiftrt_hi_8>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 186f8 <main+0xa20>;;
     _32(0x18000367),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa45),        //call 17010 <ashiftrt_hi_9>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1870c <main+0xa34>;;
     _32(0x18000362),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa48),        //call 17030 <ashiftrt_hi_10>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18720 <main+0xa48>;;
     _32(0x1800035d),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa4b),        //call 17050 <ashiftrt_hi_11>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18734 <main+0xa5c>;;
     _32(0x18000358),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa4e),        //call 17070 <ashiftrt_hi_12>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18748 <main+0xa70>;;
     _32(0x18000353),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa51),        //call 17090 <ashiftrt_hi_13>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1875c <main+0xa84>;;
     _32(0x1800034e),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa54),        //call 170b0 <ashiftrt_hi_14>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18770 <main+0xa98>;;
     _32(0x18000349),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa57),        //call 170d0 <ashiftrt_hi_15>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18784 <main+0xaac>;;
     _32(0x18000344),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa5a),        //call 170f0 <ashift_si_0>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 187a0 <main+0xac8>;;
     _32(0x1800033d),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa59),        //call 17108 <ashift_si_1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b780),        //compw.eq $r0 = $r0, 4294967294 (0xfffffffe);;
     _32(0x0c000080),        //cb.wnez $r0? 187bc <main+0xae4>;;
     _32(0x18000336),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa5a),        //call 17128 <ashift_si_2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b700),        //compw.eq $r0 = $r0, 4294967292 (0xfffffffc);;
     _32(0x0c000080),        //cb.wnez $r0? 187d8 <main+0xb00>;;
     _32(0x1800032f),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa5b),        //call 17148 <ashift_si_3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b600),        //compw.eq $r0 = $r0, 4294967288 (0xfffffff8);;
     _32(0x0c000080),        //cb.wnez $r0? 187f4 <main+0xb1c>;;
     _32(0x18000328),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa5c),        //call 17168 <ashift_si_4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b400),        //compw.eq $r0 = $r0, 4294967280 (0xfffffff0);;
     _32(0x0c000080),        //cb.wnez $r0? 18810 <main+0xb38>;;
     _32(0x18000321),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa5d),        //call 17188 <ashift_si_5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b000),        //compw.eq $r0 = $r0, 4294967264 (0xffffffe0);;
     _32(0x0c000080),        //cb.wnez $r0? 1882c <main+0xb54>;;
     _32(0x1800031a),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa5e),        //call 171a8 <ashift_si_6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffef101b000),        //compw.eq $r0 = $r0, 4294967232 (0xffffffc0);;
     _32(0x0c000080),        //cb.wnez $r0? 18848 <main+0xb70>;;
     _32(0x18000313),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa5f),        //call 171c8 <ashift_si_7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffcf101b000),        //compw.eq $r0 = $r0, 4294967168 (0xffffff80);;
     _32(0x0c000080),        //cb.wnez $r0? 18864 <main+0xb8c>;;
     _32(0x1800030c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa60),        //call 171e8 <ashift_si_8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffff8f101b000),        //compw.eq $r0 = $r0, 4294967040 (0xffffff00);;
     _32(0x0c000080),        //cb.wnez $r0? 18880 <main+0xba8>;;
     _32(0x18000305),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa61),        //call 17208 <ashift_si_9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffff0f101b000),        //compw.eq $r0 = $r0, 4294966784 (0xfffffe00);;
     _32(0x0c000080),        //cb.wnez $r0? 1889c <main+0xbc4>;;
     _32(0x180002fe),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa62),        //call 17228 <ashift_si_10>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07ffffe0f101b000),        //compw.eq $r0 = $r0, 4294966272 (0xfffffc00);;
     _32(0x0c000080),        //cb.wnez $r0? 188b8 <main+0xbe0>;;
     _32(0x180002f7),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa63),        //call 17248 <ashift_si_11>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07ffffc0f101b000),        //compw.eq $r0 = $r0, 4294965248 (0xfffff800);;
     _32(0x0c000080),        //cb.wnez $r0? 188d4 <main+0xbfc>;;
     _32(0x180002f0),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa64),        //call 17268 <ashift_si_12>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07ffff80f101b000),        //compw.eq $r0 = $r0, 4294963200 (0xfffff000);;
     _32(0x0c000080),        //cb.wnez $r0? 188f0 <main+0xc18>;;
     _32(0x180002e9),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa65),        //call 17288 <ashift_si_13>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07ffff00f101b000),        //compw.eq $r0 = $r0, 4294959104 (0xffffe000);;
     _32(0x0c000080),        //cb.wnez $r0? 1890c <main+0xc34>;;
     _32(0x180002e2),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa66),        //call 172a8 <ashift_si_14>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffe00f101b000),        //compw.eq $r0 = $r0, 4294950912 (0xffffc000);;
     _32(0x0c000080),        //cb.wnez $r0? 18928 <main+0xc50>;;
     _32(0x180002db),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa67),        //call 172c8 <ashift_si_15>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffc00f101b000),        //compw.eq $r0 = $r0, 4294934528 (0xffff8000);;
     _32(0x0c000080),        //cb.wnez $r0? 18944 <main+0xc6c>;;
     _32(0x180002d4),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa68),        //call 172e8 <ashift_si_16>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fff800f101b000),        //compw.eq $r0 = $r0, 4294901760 (0xffff0000);;
     _32(0x0c000080),        //cb.wnez $r0? 18960 <main+0xc88>;;
     _32(0x180002cd),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa69),        //call 17308 <ashift_si_17>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fff000f101b000),        //compw.eq $r0 = $r0, 4294836224 (0xfffe0000);;
     _32(0x0c000080),        //cb.wnez $r0? 1897c <main+0xca4>;;
     _32(0x180002c6),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa6a),        //call 17328 <ashift_si_18>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07ffe000f101b000),        //compw.eq $r0 = $r0, 4294705152 (0xfffc0000);;
     _32(0x0c000080),        //cb.wnez $r0? 18998 <main+0xcc0>;;
     _32(0x180002bf),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa6b),        //call 17348 <ashift_si_19>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07ffc000f101b000),        //compw.eq $r0 = $r0, 4294443008 (0xfff80000);;
     _32(0x0c000080),        //cb.wnez $r0? 189b4 <main+0xcdc>;;
     _32(0x180002b8),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa6c),        //call 17368 <ashift_si_20>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07ff8000f101b000),        //compw.eq $r0 = $r0, 4293918720 (0xfff00000);;
     _32(0x0c000080),        //cb.wnez $r0? 189d0 <main+0xcf8>;;
     _32(0x180002b1),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa6d),        //call 17388 <ashift_si_21>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07ff0000f101b000),        //compw.eq $r0 = $r0, 4292870144 (0xffe00000);;
     _32(0x0c000080),        //cb.wnez $r0? 189ec <main+0xd14>;;
     _32(0x180002aa),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa6e),        //call 173a8 <ashift_si_22>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fe0000f101b000),        //compw.eq $r0 = $r0, 4290772992 (0xffc00000);;
     _32(0x0c000080),        //cb.wnez $r0? 18a08 <main+0xd30>;;
     _32(0x180002a3),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa6f),        //call 173c8 <ashift_si_23>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fc0000f101b000),        //compw.eq $r0 = $r0, 4286578688 (0xff800000);;
     _32(0x0c000080),        //cb.wnez $r0? 18a24 <main+0xd4c>;;
     _32(0x1800029c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa70),        //call 173e8 <ashift_si_24>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07f80000f101b000),        //compw.eq $r0 = $r0, 4278190080 (0xff000000);;
     _32(0x0c000080),        //cb.wnez $r0? 18a40 <main+0xd68>;;
     _32(0x18000295),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa71),        //call 17408 <ashift_si_25>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07f00000f101b000),        //compw.eq $r0 = $r0, 4261412864 (0xfe000000);;
     _32(0x0c000080),        //cb.wnez $r0? 18a5c <main+0xd84>;;
     _32(0x1800028e),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa72),        //call 17428 <ashift_si_26>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07e00000f101b000),        //compw.eq $r0 = $r0, 4227858432 (0xfc000000);;
     _32(0x0c000080),        //cb.wnez $r0? 18a78 <main+0xda0>;;
     _32(0x18000287),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa73),        //call 17448 <ashift_si_27>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07c00000f101b000),        //compw.eq $r0 = $r0, 4160749568 (0xf8000000);;
     _32(0x0c000080),        //cb.wnez $r0? 18a94 <main+0xdbc>;;
     _32(0x18000280),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa74),        //call 17468 <ashift_si_28>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07800000f101b000),        //compw.eq $r0 = $r0, 4026531840 (0xf0000000);;
     _32(0x0c000080),        //cb.wnez $r0? 18ab0 <main+0xdd8>;;
     _32(0x18000279),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa75),        //call 17488 <ashift_si_29>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07000000f101b000),        //compw.eq $r0 = $r0, 3758096384 (0xe0000000);;
     _32(0x0c000080),        //cb.wnez $r0? 18acc <main+0xdf4>;;
     _32(0x18000272),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa76),        //call 174a8 <ashift_si_30>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x06000000f101b000),        //compw.eq $r0 = $r0, 3221225472 (0xc0000000);;
     _32(0x0c000080),        //cb.wnez $r0? 18ae8 <main+0xe10>;;
     _32(0x1800026b),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa77),        //call 174c8 <ashift_si_31>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x04000000f101b000),        //compw.eq $r0 = $r0, 2147483648 (0x80000000);;
     _32(0x0c000080),        //cb.wnez $r0? 18b04 <main+0xe2c>;;
     _32(0x18000264),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa78),        //call 174e8 <lshiftrt_si_0>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18b20 <main+0xe48>;;
     _32(0x1800025d),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa77),        //call 17500 <lshiftrt_si_1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x03fffffff101b7c0),        //compw.eq $r0 = $r0, 2147483647 (0x7fffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18b3c <main+0xe64>;;
     _32(0x18000256),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa78),        //call 17520 <lshiftrt_si_2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x01fffffff101b7c0),        //compw.eq $r0 = $r0, 1073741823 (0x3fffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18b58 <main+0xe80>;;
     _32(0x1800024f),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa79),        //call 17540 <lshiftrt_si_3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00fffffff101b7c0),        //compw.eq $r0 = $r0, 536870911 (0x1fffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18b74 <main+0xe9c>;;
     _32(0x18000248),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa7a),        //call 17560 <lshiftrt_si_4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x007ffffff101b7c0),        //compw.eq $r0 = $r0, 268435455 (0xfffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18b90 <main+0xeb8>;;
     _32(0x18000241),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa7b),        //call 17580 <lshiftrt_si_5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x003ffffff101b7c0),        //compw.eq $r0 = $r0, 134217727 (0x7ffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18bac <main+0xed4>;;
     _32(0x1800023a),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa7c),        //call 175a0 <lshiftrt_si_6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x001ffffff101b7c0),        //compw.eq $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18bc8 <main+0xef0>;;
     _32(0x18000233),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa7d),        //call 175c0 <lshiftrt_si_7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000ffffff101b7c0),        //compw.eq $r0 = $r0, 33554431 (0x1ffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18be4 <main+0xf0c>;;
     _32(0x1800022c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa7e),        //call 175e0 <lshiftrt_si_8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0007fffff101b7c0),        //compw.eq $r0 = $r0, 16777215 (0xffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18c00 <main+0xf28>;;
     _32(0x18000225),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa7f),        //call 17600 <lshiftrt_si_9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0003fffff101b7c0),        //compw.eq $r0 = $r0, 8388607 (0x7fffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18c1c <main+0xf44>;;
     _32(0x1800021e),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa80),        //call 17620 <lshiftrt_si_10>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0001fffff101b7c0),        //compw.eq $r0 = $r0, 4194303 (0x3fffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18c38 <main+0xf60>;;
     _32(0x18000217),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa81),        //call 17640 <lshiftrt_si_11>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff101b7c0),        //compw.eq $r0 = $r0, 2097151 (0x1fffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18c54 <main+0xf7c>;;
     _32(0x18000210),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa82),        //call 17660 <lshiftrt_si_12>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00007ffff101b7c0),        //compw.eq $r0 = $r0, 1048575 (0xfffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18c70 <main+0xf98>;;
     _32(0x18000209),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa83),        //call 17680 <lshiftrt_si_13>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00003ffff101b7c0),        //compw.eq $r0 = $r0, 524287 (0x7ffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18c8c <main+0xfb4>;;
     _32(0x18000202),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa84),        //call 176a0 <lshiftrt_si_14>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00001ffff101b7c0),        //compw.eq $r0 = $r0, 262143 (0x3ffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18ca8 <main+0xfd0>;;
     _32(0x180001fb),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa85),        //call 176c0 <lshiftrt_si_15>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000ffff101b7c0),        //compw.eq $r0 = $r0, 131071 (0x1ffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18cc4 <main+0xfec>;;
     _32(0x180001f4),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa86),        //call 176e0 <lshiftrt_si_16>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000007fff101b7c0),        //compw.eq $r0 = $r0, 65535 (0xffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18ce0 <main+0x1008>;;
     _32(0x180001ed),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa87),        //call 17700 <lshiftrt_si_17>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003fff101b7c0),        //compw.eq $r0 = $r0, 32767 (0x7fff);;
     _32(0x0c000080),        //cb.wnez $r0? 18cfc <main+0x1024>;;
     _32(0x180001e6),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa88),        //call 17720 <lshiftrt_si_18>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000001fff101b7c0),        //compw.eq $r0 = $r0, 16383 (0x3fff);;
     _32(0x0c000080),        //cb.wnez $r0? 18d18 <main+0x1040>;;
     _32(0x180001df),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa89),        //call 17740 <lshiftrt_si_19>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000000fff101b7c0),        //compw.eq $r0 = $r0, 8191 (0x1fff);;
     _32(0x0c000080),        //cb.wnez $r0? 18d34 <main+0x105c>;;
     _32(0x180001d8),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa8a),        //call 17760 <lshiftrt_si_20>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000007ff101b7c0),        //compw.eq $r0 = $r0, 4095 (0xfff);;
     _32(0x0c000080),        //cb.wnez $r0? 18d50 <main+0x1078>;;
     _32(0x180001d1),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa8b),        //call 17780 <lshiftrt_si_21>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000003ff101b7c0),        //compw.eq $r0 = $r0, 2047 (0x7ff);;
     _32(0x0c000080),        //cb.wnez $r0? 18d6c <main+0x1094>;;
     _32(0x180001ca),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa8c),        //call 177a0 <lshiftrt_si_22>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001ff101b7c0),        //compw.eq $r0 = $r0, 1023 (0x3ff);;
     _32(0x0c000080),        //cb.wnez $r0? 18d88 <main+0x10b0>;;
     _32(0x180001c3),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa8d),        //call 177c0 <lshiftrt_si_23>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000000ff101b7c0),        //compw.eq $r0 = $r0, 511 (0x1ff);;
     _32(0x0c000080),        //cb.wnez $r0? 18da4 <main+0x10cc>;;
     _32(0x180001bc),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa8e),        //call 177e0 <lshiftrt_si_24>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000007f101b7c0),        //compw.eq $r0 = $r0, 255 (0xff);;
     _32(0x0c000080),        //cb.wnez $r0? 18dc0 <main+0x10e8>;;
     _32(0x180001b5),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa8f),        //call 17800 <lshiftrt_si_25>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000003f101b7c0),        //compw.eq $r0 = $r0, 127 (0x7f);;
     _32(0x0c000080),        //cb.wnez $r0? 18ddc <main+0x1104>;;
     _32(0x180001ae),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa90),        //call 17820 <lshiftrt_si_26>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b7c0),        //compw.eq $r0 = $r0, 63 (0x3f);;
     _32(0x0c000080),        //cb.wnez $r0? 18df8 <main+0x1120>;;
     _32(0x180001a7),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa91),        //call 17840 <lshiftrt_si_27>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 18e14 <main+0x113c>;;
     _32(0x180001a0),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa92),        //call 17860 <lshiftrt_si_28>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b3c0),        //compw.eq $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 18e30 <main+0x1158>;;
     _32(0x18000199),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa93),        //call 17880 <lshiftrt_si_29>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b1c0),        //compw.eq $r0 = $r0, 7 (0x7);;
     _32(0x0c000080),        //cb.wnez $r0? 18e4c <main+0x1174>;;
     _32(0x18000192),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa94),        //call 178a0 <lshiftrt_si_30>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b0c0),        //compw.eq $r0 = $r0, 3 (0x3);;
     _32(0x0c000080),        //cb.wnez $r0? 18e68 <main+0x1190>;;
     _32(0x1800018b),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa95),        //call 178c0 <lshiftrt_si_31>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 18e84 <main+0x11ac>;;
     _32(0x18000184),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa96),        //call 178e0 <ashiftrt_si_0>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18ea0 <main+0x11c8>;;
     _32(0x1800017d),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa95),        //call 178f8 <ashiftrt_si_1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18ebc <main+0x11e4>;;
     _32(0x18000176),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa96),        //call 17918 <ashiftrt_si_2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18ed8 <main+0x1200>;;
     _32(0x1800016f),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa97),        //call 17938 <ashiftrt_si_3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18ef4 <main+0x121c>;;
     _32(0x18000168),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa98),        //call 17958 <ashiftrt_si_4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18f10 <main+0x1238>;;
     _32(0x18000161),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa99),        //call 17978 <ashiftrt_si_5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18f2c <main+0x1254>;;
     _32(0x1800015a),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa9a),        //call 17998 <ashiftrt_si_6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18f48 <main+0x1270>;;
     _32(0x18000153),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa9b),        //call 179b8 <ashiftrt_si_7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18f64 <main+0x128c>;;
     _32(0x1800014c),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa9c),        //call 179d8 <ashiftrt_si_8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18f80 <main+0x12a8>;;
     _32(0x18000145),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa9d),        //call 179f8 <ashiftrt_si_9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18f9c <main+0x12c4>;;
     _32(0x1800013e),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa9e),        //call 17a18 <ashiftrt_si_10>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18fb8 <main+0x12e0>;;
     _32(0x18000137),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa9f),        //call 17a38 <ashiftrt_si_11>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18fd4 <main+0x12fc>;;
     _32(0x18000130),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa0),        //call 17a58 <ashiftrt_si_12>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 18ff0 <main+0x1318>;;
     _32(0x18000129),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa1),        //call 17a78 <ashiftrt_si_13>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 1900c <main+0x1334>;;
     _32(0x18000122),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa2),        //call 17a98 <ashiftrt_si_14>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19028 <main+0x1350>;;
     _32(0x1800011b),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa3),        //call 17ab8 <ashiftrt_si_15>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19044 <main+0x136c>;;
     _32(0x18000114),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa4),        //call 17ad8 <ashiftrt_si_16>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19060 <main+0x1388>;;
     _32(0x1800010d),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa5),        //call 17af8 <ashiftrt_si_17>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 1907c <main+0x13a4>;;
     _32(0x18000106),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa6),        //call 17b18 <ashiftrt_si_18>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19098 <main+0x13c0>;;
     _32(0x180000ff),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa7),        //call 17b38 <ashiftrt_si_19>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 190b4 <main+0x13dc>;;
     _32(0x180000f8),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa8),        //call 17b58 <ashiftrt_si_20>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 190d0 <main+0x13f8>;;
     _32(0x180000f1),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaa9),        //call 17b78 <ashiftrt_si_21>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 190ec <main+0x1414>;;
     _32(0x180000ea),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaa),        //call 17b98 <ashiftrt_si_22>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19108 <main+0x1430>;;
     _32(0x180000e3),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaab),        //call 17bb8 <ashiftrt_si_23>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19124 <main+0x144c>;;
     _32(0x180000dc),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaac),        //call 17bd8 <ashiftrt_si_24>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19140 <main+0x1468>;;
     _32(0x180000d5),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaad),        //call 17bf8 <ashiftrt_si_25>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 1915c <main+0x1484>;;
     _32(0x180000ce),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaae),        //call 17c18 <ashiftrt_si_26>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19178 <main+0x14a0>;;
     _32(0x180000c7),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaf),        //call 17c38 <ashiftrt_si_27>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19194 <main+0x14bc>;;
     _32(0x180000c0),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffab0),        //call 17c58 <ashiftrt_si_28>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 191b0 <main+0x14d8>;;
     _32(0x180000b9),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffab1),        //call 17c78 <ashiftrt_si_29>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 191cc <main+0x14f4>;;
     _32(0x180000b2),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffab2),        //call 17c98 <ashiftrt_si_30>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 191e8 <main+0x1510>;;
     _32(0x180000ab),        //call 19490 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffab3),        //call 17cb8 <ashiftrt_si_31>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07fffffff101b7c0),        //compw.eq $r0 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 19204 <main+0x152c>;;
     _32(0x180000a4),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9b6),        //call 178e0 <ashiftrt_si_0>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19218 <main+0x1540>;;
     _32(0x1800009f),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9b7),        //call 178f8 <ashiftrt_si_1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1922c <main+0x1554>;;
     _32(0x1800009a),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9ba),        //call 17918 <ashiftrt_si_2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19240 <main+0x1568>;;
     _32(0x18000095),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9bd),        //call 17938 <ashiftrt_si_3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19254 <main+0x157c>;;
     _32(0x18000090),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9c0),        //call 17958 <ashiftrt_si_4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19268 <main+0x1590>;;
     _32(0x1800008b),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9c3),        //call 17978 <ashiftrt_si_5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1927c <main+0x15a4>;;
     _32(0x18000086),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9c6),        //call 17998 <ashiftrt_si_6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19290 <main+0x15b8>;;
     _32(0x18000081),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9c9),        //call 179b8 <ashiftrt_si_7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 192a4 <main+0x15cc>;;
     _32(0x1800007c),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9cc),        //call 179d8 <ashiftrt_si_8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 192b8 <main+0x15e0>;;
     _32(0x18000077),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9cf),        //call 179f8 <ashiftrt_si_9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 192cc <main+0x15f4>;;
     _32(0x18000072),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9d2),        //call 17a18 <ashiftrt_si_10>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 192e0 <main+0x1608>;;
     _32(0x1800006d),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9d5),        //call 17a38 <ashiftrt_si_11>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 192f4 <main+0x161c>;;
     _32(0x18000068),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9d8),        //call 17a58 <ashiftrt_si_12>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19308 <main+0x1630>;;
     _32(0x18000063),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9db),        //call 17a78 <ashiftrt_si_13>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1931c <main+0x1644>;;
     _32(0x1800005e),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9de),        //call 17a98 <ashiftrt_si_14>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19330 <main+0x1658>;;
     _32(0x18000059),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9e1),        //call 17ab8 <ashiftrt_si_15>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19344 <main+0x166c>;;
     _32(0x18000054),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9e4),        //call 17ad8 <ashiftrt_si_16>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19358 <main+0x1680>;;
     _32(0x1800004f),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9e7),        //call 17af8 <ashiftrt_si_17>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1936c <main+0x1694>;;
     _32(0x1800004a),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9ea),        //call 17b18 <ashiftrt_si_18>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19380 <main+0x16a8>;;
     _32(0x18000045),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9ed),        //call 17b38 <ashiftrt_si_19>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19394 <main+0x16bc>;;
     _32(0x18000040),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9f0),        //call 17b58 <ashiftrt_si_20>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 193a8 <main+0x16d0>;;
     _32(0x1800003b),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9f3),        //call 17b78 <ashiftrt_si_21>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 193bc <main+0x16e4>;;
     _32(0x18000036),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9f6),        //call 17b98 <ashiftrt_si_22>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 193d0 <main+0x16f8>;;
     _32(0x18000031),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9f9),        //call 17bb8 <ashiftrt_si_23>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 193e4 <main+0x170c>;;
     _32(0x1800002c),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9fc),        //call 17bd8 <ashiftrt_si_24>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 193f8 <main+0x1720>;;
     _32(0x18000027),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffff9ff),        //call 17bf8 <ashiftrt_si_25>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1940c <main+0x1734>;;
     _32(0x18000022),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa02),        //call 17c18 <ashiftrt_si_26>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19420 <main+0x1748>;;
     _32(0x1800001d),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa05),        //call 17c38 <ashiftrt_si_27>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19434 <main+0x175c>;;
     _32(0x18000018),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa08),        //call 17c58 <ashiftrt_si_28>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19448 <main+0x1770>;;
     _32(0x18000013),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa0b),        //call 17c78 <ashiftrt_si_29>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1945c <main+0x1784>;;
     _32(0x1800000e),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa0e),        //call 17c98 <ashiftrt_si_30>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19470 <main+0x1798>;;
     _32(0x18000009),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffa11),        //call 17cb8 <ashiftrt_si_31>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 19484 <main+0x17ac>;;
     _32(0x18000004),        //call 19490 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1800000a),        //call 194b0 <exit>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000105),        //call 198b0 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000839),        //call 1b588 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000161),        //call 19a48 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x0000000080000108e000f000),        //make $r0 = 271296 (0x423c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 194ec <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x98000827),        //call 1b588 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010111110011011000; //0x17cd8
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_qi_0, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_qi_1, 0b00010110100000111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_qi_2, 0b00010110100001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_qi_3, 0b00010110100001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_qi_4, 0b00010110100010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_qi_5, 0b00010110100010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_qi_6, 0b00010110100011011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_qi_7, 0b00010110100011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_qi_0, 0b00010110100100011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_qi_1, 0b00010110100100110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_qi_2, 0b00010110100101010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_qi_3, 0b00010110100101110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_qi_4, 0b00010110100110010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_qi_5, 0b00010110100110110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_qi_6, 0b00010110100111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_qi_7, 0b00010110100111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_qi_0, 0b00010110101000010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_qi_1, 0b00010110101000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_qi_2, 0b00010110101001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_qi_3, 0b00010110101001101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_qi_4, 0b00010110101010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_qi_5, 0b00010110101010101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_qi_6, 0b00010110101011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_qi_7, 0b00010110101011101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_0, 0b00010110101100001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_1, 0b00010110101100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_2, 0b00010110101101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_3, 0b00010110101101100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_4, 0b00010110101110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_5, 0b00010110101110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_6, 0b00010110101111000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_7, 0b00010110101111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_8, 0b00010110110000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_9, 0b00010110110000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_10, 0b00010110110001000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_11, 0b00010110110001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_12, 0b00010110110010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_13, 0b00010110110010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_14, 0b00010110110011000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_hi_15, 0b00010110110011100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_0, 0b00010110110100000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_1, 0b00010110110100011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_2, 0b00010110110100111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_3, 0b00010110110101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_4, 0b00010110110101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_5, 0b00010110110110011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_6, 0b00010110110110111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_7, 0b00010110110111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_8, 0b00010110110111111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_9, 0b00010110111000011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_10, 0b00010110111000111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_11, 0b00010110111001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_12, 0b00010110111001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_13, 0b00010110111010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_14, 0b00010110111010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_hi_15, 0b00010110111011011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_0, 0b00010110111011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_1, 0b00010110111100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_2, 0b00010110111100110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_3, 0b00010110111101010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_4, 0b00010110111101110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_5, 0b00010110111110010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_6, 0b00010110111110110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_7, 0b00010110111111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_8, 0b00010110111111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_9, 0b00010111000000010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_10, 0b00010111000000110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_11, 0b00010111000001010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_12, 0b00010111000001110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_13, 0b00010111000010010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_14, 0b00010111000010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_hi_15, 0b00010111000011010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_0, 0b00010111000011110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_1, 0b00010111000100001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_2, 0b00010111000100101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_3, 0b00010111000101001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_4, 0b00010111000101101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_5, 0b00010111000110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_6, 0b00010111000110101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_7, 0b00010111000111001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_8, 0b00010111000111101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_9, 0b00010111001000001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_10, 0b00010111001000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_11, 0b00010111001001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_12, 0b00010111001001101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_13, 0b00010111001010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_14, 0b00010111001010101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_15, 0b00010111001011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_16, 0b00010111001011101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_17, 0b00010111001100001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_18, 0b00010111001100101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_19, 0b00010111001101001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_20, 0b00010111001101101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_21, 0b00010111001110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_22, 0b00010111001110101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_23, 0b00010111001111001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_24, 0b00010111001111101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_25, 0b00010111010000001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_26, 0b00010111010000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_27, 0b00010111010001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_28, 0b00010111010001101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_29, 0b00010111010010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_30, 0b00010111010010101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashift_si_31, 0b00010111010011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_0, 0b00010111010011101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_1, 0b00010111010100000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_2, 0b00010111010100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_3, 0b00010111010101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_4, 0b00010111010101100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_5, 0b00010111010110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_6, 0b00010111010110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_7, 0b00010111010111000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_8, 0b00010111010111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_9, 0b00010111011000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_10, 0b00010111011000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_11, 0b00010111011001000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_12, 0b00010111011001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_13, 0b00010111011010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_14, 0b00010111011010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_15, 0b00010111011011000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_16, 0b00010111011011100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_17, 0b00010111011100000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_18, 0b00010111011100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_19, 0b00010111011101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_20, 0b00010111011101100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_21, 0b00010111011110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_22, 0b00010111011110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_23, 0b00010111011111000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_24, 0b00010111011111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_25, 0b00010111100000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_26, 0b00010111100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_27, 0b00010111100001000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_28, 0b00010111100001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_29, 0b00010111100010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_30, 0b00010111100010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(lshiftrt_si_31, 0b00010111100011000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_0, 0b00010111100011100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_1, 0b00010111100011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_2, 0b00010111100100011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_3, 0b00010111100100111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_4, 0b00010111100101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_5, 0b00010111100101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_6, 0b00010111100110011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_7, 0b00010111100110111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_8, 0b00010111100111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_9, 0b00010111100111111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_10, 0b00010111101000011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_11, 0b00010111101000111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_12, 0b00010111101001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_13, 0b00010111101001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_14, 0b00010111101010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_15, 0b00010111101010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_16, 0b00010111101011011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_17, 0b00010111101011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_18, 0b00010111101100011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_19, 0b00010111101100111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_20, 0b00010111101101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_21, 0b00010111101101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_22, 0b00010111101110011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_23, 0b00010111101110111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_24, 0b00010111101111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_25, 0b00010111101111111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_26, 0b00010111110000011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_27, 0b00010111110000111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_28, 0b00010111110001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_29, 0b00010111110001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_30, 0b00010111110010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ashiftrt_si_31, 0b00010111110010111000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010111110011011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00011001010010010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit, 0b00011001010010110000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
