// executing va_arg_2.c.out.dumped test 
val k1_va_arg_2.c.out.dumped: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_va_arg_2.c.out.dumped() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let to_hex: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000000f801b3c0),        //compw.leu $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 16844 <to_hex+0x24>;;
     _32(0x1800049c),        //call 17ab0 <abort>;;
     _96(0x00000000800000fce0040200),        //make $r1 = 258056 (0x3f008);;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2002e001),        //lbz $r0 = $r0[$r1];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let f0: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x180005f0),        //call 18068 <strlen>;;
     _32(0x61010400),        //compd.eq $r0 = $r0, 16 (0x10);;
     _32(0x08000480),        //cb.dnez $r0? 168f8 <f0+0x88>;;
     _32(0x1800047f),        //call 17ab0 <abort>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffffcf),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 168f8 <f0+0x88>;;
     _32(0x1800046f),        //call 17ab0 <abort>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 168b8 <f0+0x48>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f1: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741080c),        //sd 32 (0x20)[$r12] = $r16;;
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0x2809140c),        //sq 80 (0x50)[$r12] = $r2r3;;
     _32(0x2811180c),        //sq 96 (0x60)[$r12] = $r4r5;;
     _32(0x28191c0c),        //sq 112 (0x70)[$r12] = $r6r7;;
     _32(0x2821200c),        //sq 128 (0x80)[$r12] = $r8r9;;
     _32(0x2829240c),        //sq 144 (0x90)[$r12] = $r10r11;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x6100140c),        //addd $r0 = $r12, 80 (0x50);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x180005c4),        //call 18068 <strlen>;;
     _32(0x610103c0),        //compd.eq $r0 = $r0, 15 (0xf);;
     _32(0x08000480),        //cb.dnez $r0? 169a8 <f1+0x88>;;
     _32(0x18000453),        //call 17ab0 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050e0c),        //sd 56 (0x38)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffffa3),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 169a8 <f1+0x88>;;
     _32(0x18000443),        //call 17ab0 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 16968 <f1+0x48>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840080c),        //ld $r16 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000)        //ret ;;
 |];

let f2: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x270d160c),        //sd 88 (0x58)[$r12] = $r3;;
     _32(0x2811180c),        //sq 96 (0x60)[$r12] = $r4r5;;
     _32(0x28191c0c),        //sq 112 (0x70)[$r12] = $r6r7;;
     _32(0x2821200c),        //sq 128 (0x80)[$r12] = $r8r9;;
     _32(0x2829240c),        //sq 144 (0x90)[$r12] = $r10r11;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x26050a0c),        //sw 40 (0x28)[$r12] = $r1;;
     _32(0x2709080c),        //sd 32 (0x20)[$r12] = $r2;;
     _32(0x6100160c),        //addd $r0 = $r12, 88 (0x58);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x18000597),        //call 18068 <strlen>;;
     _32(0x61010380),        //compd.eq $r0 = $r0, 14 (0xe);;
     _32(0x08000480),        //cb.dnez $r0? 16a5c <f2+0x8c>;;
     _32(0x18000426),        //call 17ab0 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050e0c),        //sd 56 (0x38)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff76),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16a5c <f2+0x8c>;;
     _32(0x18000416),        //call 17ab0 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 16a1c <f2+0x4c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f3: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x26050a0c),        //sw 40 (0x28)[$r12] = $r1;;
     _32(0x2609080c),        //sw 32 (0x20)[$r12] = $r2;;
     _32(0x270d060c),        //sd 24 (0x18)[$r12] = $r3;;
     _32(0x6100100c),        //addd $r0 = $r12, 64 (0x40);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x18000569),        //call 18068 <strlen>;;
     _32(0x61010340),        //compd.eq $r0 = $r0, 13 (0xd);;
     _32(0x08000480),        //cb.dnez $r0? 16b14 <f3+0x8c>;;
     _32(0x180003f8),        //call 17ab0 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050e0c),        //sd 56 (0x38)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff48),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16b14 <f3+0x8c>;;
     _32(0x180003e8),        //call 17ab0 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 16ad4 <f3+0x4c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f4: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2715120c),        //sd 72 (0x48)[$r12] = $r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x26050a0c),        //sw 40 (0x28)[$r12] = $r1;;
     _32(0x2609080c),        //sw 32 (0x20)[$r12] = $r2;;
     _32(0x260d060c),        //sw 24 (0x18)[$r12] = $r3;;
     _32(0x2711040c),        //sd 16 (0x10)[$r12] = $r4;;
     _32(0x6100120c),        //addd $r0 = $r12, 72 (0x48);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x1800053a),        //call 18068 <strlen>;;
     _32(0x61010300),        //compd.eq $r0 = $r0, 12 (0xc);;
     _32(0x08000480),        //cb.dnez $r0? 16bd0 <f4+0x90>;;
     _32(0x180003c9),        //call 17ab0 <abort>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050e0c),        //sd 56 (0x38)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff19),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16bd0 <f4+0x90>;;
     _32(0x180003b9),        //call 17ab0 <abort>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 16b90 <f4+0x50>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f5: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741080c),        //sd 32 (0x20)[$r12] = $r16;;
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0x28191c0c),        //sq 112 (0x70)[$r12] = $r6r7;;
     _32(0x2821200c),        //sq 128 (0x80)[$r12] = $r8r9;;
     _32(0x2829240c),        //sq 144 (0x90)[$r12] = $r10r11;;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x2605120c),        //sw 72 (0x48)[$r12] = $r1;;
     _32(0x2609100c),        //sw 64 (0x40)[$r12] = $r2;;
     _32(0x260d0e0c),        //sw 56 (0x38)[$r12] = $r3;;
     _32(0x26110c0c),        //sw 48 (0x30)[$r12] = $r4;;
     _32(0x27150a0c),        //sd 40 (0x28)[$r12] = $r5;;
     _32(0x61001c0c),        //addd $r0 = $r12, 112 (0x70);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x1800050c),        //call 18068 <strlen>;;
     _32(0x610102c0),        //compd.eq $r0 = $r0, 11 (0xb);;
     _32(0x08000480),        //cb.dnez $r0? 16c88 <f5+0x90>;;
     _32(0x1800039b),        //call 17ab0 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705160c),        //sd 88 (0x58)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffeeb),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16c88 <f5+0x90>;;
     _32(0x1800038b),        //call 17ab0 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 16c48 <f5+0x50>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840080c),        //ld $r16 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000)        //ret ;;
 |];

let f6: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x271d1e0c),        //sd 120 (0x78)[$r12] = $r7;;
     _32(0x2821200c),        //sq 128 (0x80)[$r12] = $r8r9;;
     _32(0x2829240c),        //sq 144 (0x90)[$r12] = $r10r11;;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x2605120c),        //sw 72 (0x48)[$r12] = $r1;;
     _32(0x2609100c),        //sw 64 (0x40)[$r12] = $r2;;
     _32(0x260d0e0c),        //sw 56 (0x38)[$r12] = $r3;;
     _32(0x26110c0c),        //sw 48 (0x30)[$r12] = $r4;;
     _32(0x26150a0c),        //sw 40 (0x28)[$r12] = $r5;;
     _32(0x2719080c),        //sd 32 (0x20)[$r12] = $r6;;
     _32(0x61001e0c),        //addd $r0 = $r12, 120 (0x78);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x180004dd),        //call 18068 <strlen>;;
     _32(0x61010280),        //compd.eq $r0 = $r0, 10 (0xa);;
     _32(0x08000480),        //cb.dnez $r0? 16d44 <f6+0x94>;;
     _32(0x1800036c),        //call 17ab0 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705160c),        //sd 88 (0x58)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffebc),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16d44 <f6+0x94>;;
     _32(0x1800035c),        //call 17ab0 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 16d04 <f6+0x54>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f7: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x2605120c),        //sw 72 (0x48)[$r12] = $r1;;
     _32(0x2609100c),        //sw 64 (0x40)[$r12] = $r2;;
     _32(0x260d0e0c),        //sw 56 (0x38)[$r12] = $r3;;
     _32(0x26110c0c),        //sw 48 (0x30)[$r12] = $r4;;
     _32(0x26150a0c),        //sw 40 (0x28)[$r12] = $r5;;
     _32(0x2619080c),        //sw 32 (0x20)[$r12] = $r6;;
     _32(0x271d060c),        //sd 24 (0x18)[$r12] = $r7;;
     _32(0x6100180c),        //addd $r0 = $r12, 96 (0x60);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x180004ad),        //call 18068 <strlen>;;
     _32(0x61010240),        //compd.eq $r0 = $r0, 9 (0x9);;
     _32(0x08000480),        //cb.dnez $r0? 16e04 <f7+0x94>;;
     _32(0x1800033c),        //call 17ab0 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705160c),        //sd 88 (0x58)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffe8c),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16e04 <f7+0x94>;;
     _32(0x1800032c),        //call 17ab0 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 16dc4 <f7+0x54>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f8: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x27251a0c),        //sd 104 (0x68)[$r12] = $r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x2605120c),        //sw 72 (0x48)[$r12] = $r1;;
     _32(0x2609100c),        //sw 64 (0x40)[$r12] = $r2;;
     _32(0x260d0e0c),        //sw 56 (0x38)[$r12] = $r3;;
     _32(0x26110c0c),        //sw 48 (0x30)[$r12] = $r4;;
     _32(0x26150a0c),        //sw 40 (0x28)[$r12] = $r5;;
     _32(0x2619080c),        //sw 32 (0x20)[$r12] = $r6;;
     _32(0x261d060c),        //sw 24 (0x18)[$r12] = $r7;;
     _32(0x2721040c),        //sd 16 (0x10)[$r12] = $r8;;
     _32(0x61001a0c),        //addd $r0 = $r12, 104 (0x68);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x1800047c),        //call 18068 <strlen>;;
     _32(0x61010200),        //compd.eq $r0 = $r0, 8 (0x8);;
     _32(0x08000480),        //cb.dnez $r0? 16ec8 <f8+0x98>;;
     _32(0x1800030b),        //call 17ab0 <abort>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705160c),        //sd 88 (0x58)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffe5b),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16ec8 <f8+0x98>;;
     _32(0x180002fb),        //call 17ab0 <abort>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 16e88 <f8+0x58>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f9: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741080c),        //sd 32 (0x20)[$r12] = $r16;;
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0x2829240c),        //sq 144 (0x90)[$r12] = $r10r11;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x27250a0c),        //sd 40 (0x28)[$r12] = $r9;;
     _32(0x6100240c),        //addd $r0 = $r12, 144 (0x90);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x1800044c),        //call 18068 <strlen>;;
     _32(0x610101c0),        //compd.eq $r0 = $r0, 7 (0x7);;
     _32(0x08000480),        //cb.dnez $r0? 16f88 <f9+0x98>;;
     _32(0x180002db),        //call 17ab0 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051e0c),        //sd 120 (0x78)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffe2b),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16f88 <f9+0x98>;;
     _32(0x180002cb),        //call 17ab0 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 16f48 <f9+0x58>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840080c),        //ld $r16 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000)        //ret ;;
 |];

let f10: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x272d260c),        //sd 152 (0x98)[$r12] = $r11;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2729080c),        //sd 32 (0x20)[$r12] = $r10;;
     _32(0x6100260c),        //addd $r0 = $r12, 152 (0x98);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x1800041b),        //call 18068 <strlen>;;
     _32(0x61010180),        //compd.eq $r0 = $r0, 6 (0x6);;
     _32(0x08000480),        //cb.dnez $r0? 1704c <f10+0x9c>;;
     _32(0x180002aa),        //call 17ab0 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051e0c),        //sd 120 (0x78)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffdfa),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 1704c <f10+0x9c>;;
     _32(0x1800029a),        //call 17ab0 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 1700c <f10+0x5c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f11: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x272d060c),        //sd 24 (0x18)[$r12] = $r11;;
     _32(0x6100200c),        //addd $r0 = $r12, 128 (0x80);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x180003e9),        //call 18068 <strlen>;;
     _32(0x61010140),        //compd.eq $r0 = $r0, 5 (0x5);;
     _32(0x08000480),        //cb.dnez $r0? 17114 <f11+0x9c>;;
     _32(0x18000278),        //call 17ab0 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051e0c),        //sd 120 (0x78)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffdc8),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17114 <f11+0x9c>;;
     _32(0x18000268),        //call 17ab0 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 170d4 <f11+0x5c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f12: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x262d060c),        //sw 24 (0x18)[$r12] = $r11;;
     _32(0x6100220c),        //addd $r0 = $r12, 136 (0x88);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x3800200c),        //ld $r0 = 128 (0x80)[$r12];;
     _32(0x180003b7),        //call 18068 <strlen>;;
     _32(0x61010100),        //compd.eq $r0 = $r0, 4 (0x4);;
     _32(0x08000480),        //cb.dnez $r0? 171dc <f12+0x9c>;;
     _32(0x18000246),        //call 17ab0 <abort>;;
     _32(0x3800200c),        //ld $r0 = 128 (0x80)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705200c),        //sd 128 (0x80)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051e0c),        //sd 120 (0x78)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffd96),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 171dc <f12+0x9c>;;
     _32(0x18000236),        //call 17ab0 <abort>;;
     _32(0x3800200c),        //ld $r0 = 128 (0x80)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 1719c <f12+0x5c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f13: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x262d060c),        //sw 24 (0x18)[$r12] = $r11;;
     _32(0x6100240c),        //addd $r0 = $r12, 144 (0x90);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x3800220c),        //ld $r0 = 136 (0x88)[$r12];;
     _32(0x18000385),        //call 18068 <strlen>;;
     _32(0x610100c0),        //compd.eq $r0 = $r0, 3 (0x3);;
     _32(0x08000480),        //cb.dnez $r0? 172a4 <f13+0x9c>;;
     _32(0x18000214),        //call 17ab0 <abort>;;
     _32(0x3800220c),        //ld $r0 = 136 (0x88)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705220c),        //sd 136 (0x88)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051e0c),        //sd 120 (0x78)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffd64),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 172a4 <f13+0x9c>;;
     _32(0x18000204),        //call 17ab0 <abort>;;
     _32(0x3800220c),        //ld $r0 = 136 (0x88)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 17264 <f13+0x5c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f14: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x262d060c),        //sw 24 (0x18)[$r12] = $r11;;
     _32(0x6100260c),        //addd $r0 = $r12, 152 (0x98);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x3800240c),        //ld $r0 = 144 (0x90)[$r12];;
     _32(0x18000353),        //call 18068 <strlen>;;
     _32(0x61010080),        //compd.eq $r0 = $r0, 2 (0x2);;
     _32(0x08000480),        //cb.dnez $r0? 1736c <f14+0x9c>;;
     _32(0x180001e2),        //call 17ab0 <abort>;;
     _32(0x3800240c),        //ld $r0 = 144 (0x90)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705240c),        //sd 144 (0x90)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051e0c),        //sd 120 (0x78)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffd32),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 1736c <f14+0x9c>;;
     _32(0x180001d2),        //call 17ab0 <abort>;;
     _32(0x3800240c),        //ld $r0 = 144 (0x90)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 1732c <f14+0x5c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f15: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x262d060c),        //sw 24 (0x18)[$r12] = $r11;;
     _32(0x6100280c),        //addd $r0 = $r12, 160 (0xa0);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x3800260c),        //ld $r0 = 152 (0x98)[$r12];;
     _32(0x18000321),        //call 18068 <strlen>;;
     _32(0x61010040),        //compd.eq $r0 = $r0, 1 (0x1);;
     _32(0x08000480),        //cb.dnez $r0? 17434 <f15+0x9c>;;
     _32(0x180001b0),        //call 17ab0 <abort>;;
     _32(0x3800260c),        //ld $r0 = 152 (0x98)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x2705260c),        //sd 152 (0x98)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051e0c),        //sd 120 (0x78)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffd00),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17434 <f15+0x9c>;;
     _32(0x180001a0),        //call 17ab0 <abort>;;
     _32(0x3800260c),        //ld $r0 = 152 (0x98)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 173f4 <f15+0x5c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741140c),        //sd 80 (0x50)[$r12] = $r16;;
     _96(0x0000000080000100e000f000),        //make $r0 = 263104 (0x403c0);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x6000000f),        //make $r0 = 15 (0xf);;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _32(0x6000000e),        //make $r0 = 14 (0xe);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x6000000d),        //make $r0 = 13 (0xd);;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x6000000b),        //make $r0 = 11 (0xb);;
     _32(0x2601000c),        //sw 0 (0x0)[$r12] = $r0;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x60100003),        //make $r4 = 3 (0x3);;
     _32(0x600c0002),        //make $r3 = 2 (0x2);;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x1ffffce7),        //call 16870 <f0>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000040),        //addd $r0 = $r0, 1 (0x1);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x60100003),        //make $r4 = 3 (0x3);;
     _32(0x600c0002),        //make $r3 = 2 (0x2);;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffcfa),        //call 16920 <f1>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000080),        //addd $r0 = $r0, 2 (0x2);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x60100003),        //make $r4 = 3 (0x3);;
     _32(0x600c0002),        //make $r3 = 2 (0x2);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffd0d),        //call 169d0 <f2>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x610000c0),        //addd $r0 = $r0, 3 (0x3);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x60100003),        //make $r4 = 3 (0x3);;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffd22),        //call 16a88 <f3>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000100),        //addd $r0 = $r0, 4 (0x4);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x6a100000),        //copyd $r4 = $r0;;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffd37),        //call 16b40 <f4>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000140),        //addd $r0 = $r0, 5 (0x5);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x6a140000),        //copyd $r5 = $r0;;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffd4c),        //call 16bf8 <f5>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000180),        //addd $r0 = $r0, 6 (0x6);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x6a180000),        //copyd $r6 = $r0;;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffd61),        //call 16cb0 <f6>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x610001c0),        //addd $r0 = $r0, 7 (0x7);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x6a1c0000),        //copyd $r7 = $r0;;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffd78),        //call 16d70 <f7>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x6a200000),        //copyd $r8 = $r0;;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffd8f),        //call 16e30 <f8>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000240),        //addd $r0 = $r0, 9 (0x9);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x6a240000),        //copyd $r9 = $r0;;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffda6),        //call 16ef0 <f9>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000280),        //addd $r0 = $r0, 10 (0xa);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x6a280000),        //copyd $r10 = $r0;;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffdbd),        //call 16fb0 <f10>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x610002c0),        //addd $r0 = $r0, 11 (0xb);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x6a2c0000),        //copyd $r11 = $r0;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffdd6),        //call 17078 <f11>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000300),        //addd $r0 = $r0, 12 (0xc);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x2701000c),        //sd 0 (0x0)[$r12] = $r0;;
     _32(0x602c000b),        //make $r11 = 11 (0xb);;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffdf0),        //call 17140 <f12>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000340),        //addd $r0 = $r0, 13 (0xd);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x2701020c),        //sd 8 (0x8)[$r12] = $r0;;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x2601000c),        //sw 0 (0x0)[$r12] = $r0;;
     _32(0x602c000b),        //make $r11 = 11 (0xb);;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe0a),        //call 17208 <f13>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000380),        //addd $r0 = $r0, 14 (0xe);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x6000000d),        //make $r0 = 13 (0xd);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x2601000c),        //sw 0 (0x0)[$r12] = $r0;;
     _32(0x602c000b),        //make $r11 = 11 (0xb);;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe24),        //call 172d0 <f14>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x610003c0),        //addd $r0 = $r0, 15 (0xf);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x6000000e),        //make $r0 = 14 (0xe);;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x6000000d),        //make $r0 = 13 (0xd);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x2601000c),        //sw 0 (0x0)[$r12] = $r0;;
     _32(0x602c000b),        //make $r11 = 11 (0xb);;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe3e),        //call 17398 <f15>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1800000a),        //call 17ad0 <exit>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000105),        //call 17ed0 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x9800085f),        //call 19c40 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000187),        //call 18100 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x0000000080000100e000f600),        //make $r0 = 263128 (0x403d8);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 17b0c <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x9800084d),        //call 19c40 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010111010001100000; //0x17460
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(to_hex, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f0, 0b00010110100001110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f1, 0b00010110100100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f2, 0b00010110100111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f3, 0b00010110101010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f4, 0b00010110101101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f5, 0b00010110101111111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f6, 0b00010110110010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f7, 0b00010110110101110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f8, 0b00010110111000110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f9, 0b00010110111011110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f10, 0b00010110111110110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f11, 0b00010111000001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f12, 0b00010111000101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f13, 0b00010111001000001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f14, 0b00010111001011010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f15, 0b00010111001110011000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010111010001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111101010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit, 0b00010111101011010000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
