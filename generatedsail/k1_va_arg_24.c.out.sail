// executing va_arg_24.c.out.dumped test 
val k1_va_arg_24.c.out.dumped: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_va_arg_24.c.out.dumped() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let verify: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x2705020c),        //sd 8 (0x8)[$r12] = $r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000023),        //goto 168c8 <verify+0xa8>;;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x3004070c),        //lwz $r1 = 28 (0x1c)[$r12];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000600),        //cb.wnez $r0? 168bc <verify+0x9c>;;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x3010070c),        //lwz $r4 = 28 (0x1c)[$r12];;
     _32(0x7a0c0000),        //copyw $r3 = $r0;;
     _32(0x3008070c),        //lwz $r2 = 28 (0x1c)[$r12];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _96(0x0000000080000100e000f000),        //make $r0 = 263104 (0x403c0);;
     _32(0x18000332),        //call 17558 <printf>;;
     _96(0x000000008000010ae000a000),        //make $r0 = 273024 (0x42a80);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x000000008000010ae000a000),        //make $r0 = 273024 (0x42a80);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ff6c0),        //cb.wnez $r0? 16840 <verify+0x20>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let varargs0: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x27051a0c),        //sd 104 (0x68)[$r12] = $r1;;
     _32(0x28091c0c),        //sq 112 (0x70)[$r12] = $r2r3;;
     _32(0x2811200c),        //sq 128 (0x80)[$r12] = $r4r5;;
     _32(0x2819240c),        //sq 144 (0x90)[$r12] = $r6r7;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x61001a0c),        //addd $r0 = $r12, 104 (0x68);;
     _32(0x2701140c),        //sd 80 (0x50)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16964 <varargs0+0x74>;;
     _32(0x3800140c),        //ld $r0 = 80 (0x50)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705140c),        //sd 80 (0x50)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x3400170c),        //lws $r0 = 92 (0x5c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108180c),        //addd $r2 = $r12, 96 (0x60);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 16934 <varargs0+0x44>;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000100e000f800),        //make $r0 = 263136 (0x403e0);;
     _32(0x1fffffa6),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000)        //ret ;;
 |];

let varargs1: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x28091c0c),        //sq 112 (0x70)[$r12] = $r2r3;;
     _32(0x2811200c),        //sq 128 (0x80)[$r12] = $r4r5;;
     _32(0x2819240c),        //sq 144 (0x90)[$r12] = $r6r7;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x61001c0c),        //addd $r0 = $r12, 112 (0x70);;
     _32(0x2701140c),        //sd 80 (0x50)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x2601090c),        //sw 36 (0x24)[$r12] = $r0;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16a1c <varargs1+0x7c>;;
     _32(0x3800140c),        //ld $r0 = 80 (0x50)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705140c),        //sd 80 (0x50)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x3400170c),        //lws $r0 = 92 (0x5c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108180c),        //addd $r2 = $r12, 96 (0x60);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 169ec <varargs1+0x4c>;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000100e000fc00),        //make $r0 = 263152 (0x403f0);;
     _32(0x1fffff78),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000)        //ret ;;
 |];

let varargs2: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x270d1e0c),        //sd 120 (0x78)[$r12] = $r3;;
     _32(0x2811200c),        //sq 128 (0x80)[$r12] = $r4r5;;
     _32(0x2819240c),        //sq 144 (0x90)[$r12] = $r6r7;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x2609020c),        //sw 8 (0x8)[$r12] = $r2;;
     _32(0x61001e0c),        //addd $r0 = $r12, 120 (0x78);;
     _32(0x2701140c),        //sd 80 (0x50)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x2601090c),        //sw 36 (0x24)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x26010a0c),        //sw 40 (0x28)[$r12] = $r0;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16ae0 <varargs2+0x88>;;
     _32(0x3800140c),        //ld $r0 = 80 (0x50)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705140c),        //sd 80 (0x50)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x3400170c),        //lws $r0 = 92 (0x5c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108180c),        //addd $r2 = $r12, 96 (0x60);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 16ab0 <varargs2+0x58>;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000101e0000000),        //make $r0 = 263168 (0x40400);;
     _32(0x1fffff47),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let varargs3: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x2811200c),        //sq 128 (0x80)[$r12] = $r4r5;;
     _32(0x2819240c),        //sq 144 (0x90)[$r12] = $r6r7;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _32(0x26050c0c),        //sw 48 (0x30)[$r12] = $r1;;
     _32(0x26090a0c),        //sw 40 (0x28)[$r12] = $r2;;
     _32(0x260d080c),        //sw 32 (0x20)[$r12] = $r3;;
     _32(0x6100200c),        //addd $r0 = $r12, 128 (0x80);;
     _32(0x27011c0c),        //sd 112 (0x70)[$r12] = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x2601100c),        //sw 64 (0x40)[$r12] = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x2601110c),        //sw 68 (0x44)[$r12] = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x2601120c),        //sw 72 (0x48)[$r12] = $r0;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x2601130c),        //sw 76 (0x4c)[$r12] = $r0;;
     _32(0x60000004),        //make $r0 = 4 (0x4);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16bb0 <varargs3+0x90>;;
     _32(0x38001c0c),        //ld $r0 = 112 (0x70)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051c0c),        //sd 112 (0x70)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108200c),        //addd $r2 = $r12, 128 (0x80);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 16b80 <varargs3+0x60>;;
     _32(0x6100100c),        //addd $r0 = $r12, 64 (0x40);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000101e0000400),        //make $r0 = 263184 (0x40410);;
     _32(0x1fffff13),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let varargs4: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2715220c),        //sd 136 (0x88)[$r12] = $r5;;
     _32(0x2819240c),        //sq 144 (0x90)[$r12] = $r6r7;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _32(0x26050c0c),        //sw 48 (0x30)[$r12] = $r1;;
     _32(0x26090a0c),        //sw 40 (0x28)[$r12] = $r2;;
     _32(0x260d080c),        //sw 32 (0x20)[$r12] = $r3;;
     _32(0x2611060c),        //sw 24 (0x18)[$r12] = $r4;;
     _32(0x6100220c),        //addd $r0 = $r12, 136 (0x88);;
     _32(0x27011c0c),        //sd 112 (0x70)[$r12] = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x2601100c),        //sw 64 (0x40)[$r12] = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x2601110c),        //sw 68 (0x44)[$r12] = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x2601120c),        //sw 72 (0x48)[$r12] = $r0;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x2601130c),        //sw 76 (0x4c)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x60000005),        //make $r0 = 5 (0x5);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16c8c <varargs4+0x9c>;;
     _32(0x38001c0c),        //ld $r0 = 112 (0x70)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051c0c),        //sd 112 (0x70)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108200c),        //addd $r2 = $r12, 128 (0x80);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 16c5c <varargs4+0x6c>;;
     _32(0x6100100c),        //addd $r0 = $r12, 64 (0x40);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000101e0000800),        //make $r0 = 263200 (0x40420);;
     _32(0x1ffffedc),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000)        //ret ;;
 |];

let varargs5: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2819240c),        //sq 144 (0x90)[$r12] = $r6r7;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _32(0x26050c0c),        //sw 48 (0x30)[$r12] = $r1;;
     _32(0x26090a0c),        //sw 40 (0x28)[$r12] = $r2;;
     _32(0x260d080c),        //sw 32 (0x20)[$r12] = $r3;;
     _32(0x2611060c),        //sw 24 (0x18)[$r12] = $r4;;
     _32(0x2615040c),        //sw 16 (0x10)[$r12] = $r5;;
     _32(0x6100240c),        //addd $r0 = $r12, 144 (0x90);;
     _32(0x27011c0c),        //sd 112 (0x70)[$r12] = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x2601100c),        //sw 64 (0x40)[$r12] = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x2601110c),        //sw 68 (0x44)[$r12] = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x2601120c),        //sw 72 (0x48)[$r12] = $r0;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x2601130c),        //sw 76 (0x4c)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x2601150c),        //sw 84 (0x54)[$r12] = $r0;;
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16d6c <varargs5+0xa4>;;
     _32(0x38001c0c),        //ld $r0 = 112 (0x70)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051c0c),        //sd 112 (0x70)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108200c),        //addd $r2 = $r12, 128 (0x80);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 16d3c <varargs5+0x74>;;
     _32(0x6100100c),        //addd $r0 = $r12, 64 (0x40);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000101e0000c00),        //make $r0 = 263216 (0x40430);;
     _32(0x1ffffea4),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000)        //ret ;;
 |];

let varargs6: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x271d260c),        //sd 152 (0x98)[$r12] = $r7;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _32(0x26050c0c),        //sw 48 (0x30)[$r12] = $r1;;
     _32(0x26090a0c),        //sw 40 (0x28)[$r12] = $r2;;
     _32(0x260d080c),        //sw 32 (0x20)[$r12] = $r3;;
     _32(0x2611060c),        //sw 24 (0x18)[$r12] = $r4;;
     _32(0x2615040c),        //sw 16 (0x10)[$r12] = $r5;;
     _32(0x2619020c),        //sw 8 (0x8)[$r12] = $r6;;
     _32(0x6100260c),        //addd $r0 = $r12, 152 (0x98);;
     _32(0x27011c0c),        //sd 112 (0x70)[$r12] = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x2601100c),        //sw 64 (0x40)[$r12] = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x2601110c),        //sw 68 (0x44)[$r12] = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x2601120c),        //sw 72 (0x48)[$r12] = $r0;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x2601130c),        //sw 76 (0x4c)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x2601150c),        //sw 84 (0x54)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x2601160c),        //sw 88 (0x58)[$r12] = $r0;;
     _32(0x60000007),        //make $r0 = 7 (0x7);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16e58 <varargs6+0xb0>;;
     _32(0x38001c0c),        //ld $r0 = 112 (0x70)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27051c0c),        //sd 112 (0x70)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108200c),        //addd $r2 = $r12, 128 (0x80);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 16e28 <varargs6+0x80>;;
     _32(0x6100100c),        //addd $r0 = $r12, 64 (0x40);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000101e0001000),        //make $r0 = 263232 (0x40440);;
     _32(0x1ffffe69),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let varargs7: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x2601160c),        //sw 88 (0x58)[$r12] = $r0;;
     _32(0x2605140c),        //sw 80 (0x50)[$r12] = $r1;;
     _32(0x2609120c),        //sw 72 (0x48)[$r12] = $r2;;
     _32(0x260d100c),        //sw 64 (0x40)[$r12] = $r3;;
     _32(0x26110e0c),        //sw 56 (0x38)[$r12] = $r4;;
     _32(0x26150c0c),        //sw 48 (0x30)[$r12] = $r5;;
     _32(0x26190a0c),        //sw 40 (0x28)[$r12] = $r6;;
     _32(0x261d080c),        //sw 32 (0x20)[$r12] = $r7;;
     _32(0x6100280c),        //addd $r0 = $r12, 160 (0xa0);;
     _32(0x2701240c),        //sd 144 (0x90)[$r12] = $r0;;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x2601180c),        //sw 96 (0x60)[$r12] = $r0;;
     _32(0x3000140c),        //lwz $r0 = 80 (0x50)[$r12];;
     _32(0x2601190c),        //sw 100 (0x64)[$r12] = $r0;;
     _32(0x3000120c),        //lwz $r0 = 72 (0x48)[$r12];;
     _32(0x26011a0c),        //sw 104 (0x68)[$r12] = $r0;;
     _32(0x3000100c),        //lwz $r0 = 64 (0x40)[$r12];;
     _32(0x26011b0c),        //sw 108 (0x6c)[$r12] = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x26011d0c),        //sw 116 (0x74)[$r12] = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x60000008),        //make $r0 = 8 (0x8);;
     _32(0x2601270c),        //sw 156 (0x9c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16f50 <varargs7+0xb8>;;
     _32(0x3800240c),        //ld $r0 = 144 (0x90)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705240c),        //sd 144 (0x90)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x3400270c),        //lws $r0 = 156 (0x9c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108280c),        //addd $r2 = $r12, 160 (0xa0);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x3000270c),        //lwz $r0 = 156 (0x9c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601270c),        //sw 156 (0x9c)[$r12] = $r0;;
     _32(0x3000270c),        //lwz $r0 = 156 (0x9c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 16f20 <varargs7+0x88>;;
     _32(0x6100180c),        //addd $r0 = $r12, 96 (0x60);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000101e0001400),        //make $r0 = 263248 (0x40450);;
     _32(0x1ffffe2b),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let varargs8: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x27252a0c),        //sd 168 (0xa8)[$r12] = $r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x2601160c),        //sw 88 (0x58)[$r12] = $r0;;
     _32(0x2605140c),        //sw 80 (0x50)[$r12] = $r1;;
     _32(0x2609120c),        //sw 72 (0x48)[$r12] = $r2;;
     _32(0x260d100c),        //sw 64 (0x40)[$r12] = $r3;;
     _32(0x26110e0c),        //sw 56 (0x38)[$r12] = $r4;;
     _32(0x26150c0c),        //sw 48 (0x30)[$r12] = $r5;;
     _32(0x26190a0c),        //sw 40 (0x28)[$r12] = $r6;;
     _32(0x261d080c),        //sw 32 (0x20)[$r12] = $r7;;
     _32(0x2621060c),        //sw 24 (0x18)[$r12] = $r8;;
     _32(0x61002a0c),        //addd $r0 = $r12, 168 (0xa8);;
     _32(0x2701240c),        //sd 144 (0x90)[$r12] = $r0;;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x2601180c),        //sw 96 (0x60)[$r12] = $r0;;
     _32(0x3000140c),        //lwz $r0 = 80 (0x50)[$r12];;
     _32(0x2601190c),        //sw 100 (0x64)[$r12] = $r0;;
     _32(0x3000120c),        //lwz $r0 = 72 (0x48)[$r12];;
     _32(0x26011a0c),        //sw 104 (0x68)[$r12] = $r0;;
     _32(0x3000100c),        //lwz $r0 = 64 (0x40)[$r12];;
     _32(0x26011b0c),        //sw 108 (0x6c)[$r12] = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x26011d0c),        //sw 116 (0x74)[$r12] = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2601200c),        //sw 128 (0x80)[$r12] = $r0;;
     _32(0x60000009),        //make $r0 = 9 (0x9);;
     _32(0x2601270c),        //sw 156 (0x9c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 17054 <varargs8+0xc4>;;
     _32(0x3800240c),        //ld $r0 = 144 (0x90)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705240c),        //sd 144 (0x90)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x3400270c),        //lws $r0 = 156 (0x9c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108280c),        //addd $r2 = $r12, 160 (0xa0);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x3000270c),        //lwz $r0 = 156 (0x9c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601270c),        //sw 156 (0x9c)[$r12] = $r0;;
     _32(0x3000270c),        //lwz $r0 = 156 (0x9c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 17024 <varargs8+0x94>;;
     _32(0x6100180c),        //addd $r0 = $r12, 96 (0x60);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000101e0001800),        //make $r0 = 263264 (0x40460);;
     _32(0x1ffffdea),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000)        //ret ;;
 |];

let varargs9: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x2601160c),        //sw 88 (0x58)[$r12] = $r0;;
     _32(0x2605140c),        //sw 80 (0x50)[$r12] = $r1;;
     _32(0x2609120c),        //sw 72 (0x48)[$r12] = $r2;;
     _32(0x260d100c),        //sw 64 (0x40)[$r12] = $r3;;
     _32(0x26110e0c),        //sw 56 (0x38)[$r12] = $r4;;
     _32(0x26150c0c),        //sw 48 (0x30)[$r12] = $r5;;
     _32(0x26190a0c),        //sw 40 (0x28)[$r12] = $r6;;
     _32(0x261d080c),        //sw 32 (0x20)[$r12] = $r7;;
     _32(0x2621060c),        //sw 24 (0x18)[$r12] = $r8;;
     _32(0x2625040c),        //sw 16 (0x10)[$r12] = $r9;;
     _32(0x61002c0c),        //addd $r0 = $r12, 176 (0xb0);;
     _32(0x2701240c),        //sd 144 (0x90)[$r12] = $r0;;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x2601180c),        //sw 96 (0x60)[$r12] = $r0;;
     _32(0x3000140c),        //lwz $r0 = 80 (0x50)[$r12];;
     _32(0x2601190c),        //sw 100 (0x64)[$r12] = $r0;;
     _32(0x3000120c),        //lwz $r0 = 72 (0x48)[$r12];;
     _32(0x26011a0c),        //sw 104 (0x68)[$r12] = $r0;;
     _32(0x3000100c),        //lwz $r0 = 64 (0x40)[$r12];;
     _32(0x26011b0c),        //sw 108 (0x6c)[$r12] = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x26011d0c),        //sw 116 (0x74)[$r12] = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2601200c),        //sw 128 (0x80)[$r12] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x2601210c),        //sw 132 (0x84)[$r12] = $r0;;
     _32(0x6000000a),        //make $r0 = 10 (0xa);;
     _32(0x2601270c),        //sw 156 (0x9c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 1715c <varargs9+0xcc>;;
     _32(0x3800240c),        //ld $r0 = 144 (0x90)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705240c),        //sd 144 (0x90)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x3400270c),        //lws $r0 = 156 (0x9c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108280c),        //addd $r2 = $r12, 160 (0xa0);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x2605f000),        //sw -64 (0xffffffc0)[$r0] = $r1;;
     _32(0x3000270c),        //lwz $r0 = 156 (0x9c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601270c),        //sw 156 (0x9c)[$r12] = $r0;;
     _32(0x3000270c),        //lwz $r0 = 156 (0x9c)[$r12];;
     _64(0x00000000f401b280),        //compw.le $r0 = $r0, 10 (0xa);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 1712c <varargs9+0x9c>;;
     _32(0x6100180c),        //addd $r0 = $r12, 96 (0x60);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000101e0001c00),        //make $r0 = 263280 (0x40470);;
     _32(0x1ffffda8),        //call 16820 <verify>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffdc8),        //call 168f0 <varargs0>;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffde8),        //call 169a0 <varargs1>;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe0a),        //call 16a58 <varargs2>;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe30),        //call 16b20 <varargs3>;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe58),        //call 16bf0 <varargs4>;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe82),        //call 16cc8 <varargs5>;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffeae),        //call 16da8 <varargs6>;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffede),        //call 16e98 <varargs7>;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffff10),        //call 16f90 <varargs8>;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffff44),        //call 17090 <varargs9>;;
     _96(0x000000008000010ae000a000),        //make $r0 = 273024 (0x42a80);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x08800080),        //cb.deqz $r0? 1739c <main+0x204>;;
     _32(0x18000004),        //call 173a8 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1800000a),        //call 173c8 <exit>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x9800012d),        //call 17868 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98002c45),        //call 224d0 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000b6d),        //call 1a190 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x0000000080000101e0002000),        //make $r0 = 263296 (0x40480);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 17404 <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x98002c33),        //call 224d0 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010111000110011000; //0x17198
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(verify, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs0, 0b00010110100011110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs1, 0b00010110100110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs2, 0b00010110101001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs3, 0b00010110101100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs4, 0b00010110101111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs5, 0b00010110110011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs6, 0b00010110110110101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs7, 0b00010110111010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs8, 0b00010110111110010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(varargs9, 0b00010111000010010000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010111000110011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111001110101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit, 0b00010111001111001000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
