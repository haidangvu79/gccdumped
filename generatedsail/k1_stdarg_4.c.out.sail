// executing stdarg_4.c.out.dumped test 
val k1_stdarg_4.: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_stdarg_4.() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let f1: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x44030000),        //floatd.rn $r0 = $r0, 0 (0x0);;
     _32(0x50027001),        //faddd $r0 = $r1, $r0;;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f2: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601000c),        //sw 0 (0x0)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x44030000),        //floatd.rn $r0 = $r0, 0 (0x0);;
     _32(0x50027001),        //faddd $r0 = $r1, $r0;;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x2701020c),        //sd 8 (0x8)[$r12] = $r0;;
     _32(0x3800020c),        //ld $r0 = 8 (0x8)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705020c),        //sd 8 (0x8)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800020c),        //ld $r0 = 8 (0x8)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705020c),        //sd 8 (0x8)[$r12] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800020c),        //ld $r0 = 8 (0x8)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705020c),        //sd 8 (0x8)[$r12] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x44030000),        //floatd.rn $r0 = $r0, 0 (0x0);;
     _32(0x50027001),        //faddd $r0 = $r1, $r0;;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f3h: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _32(0x27050c0c),        //sd 48 (0x30)[$r12] = $r1;;
     _32(0x27090a0c),        //sd 40 (0x28)[$r12] = $r2;;
     _32(0x270d080c),        //sd 32 (0x20)[$r12] = $r3;;
     _32(0x2711060c),        //sd 24 (0x18)[$r12] = $r4;;
     _32(0x34040e0c),        //lws $r1 = 56 (0x38)[$r12];;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x71050001),        //addd $r1 = $r1, $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x71050001),        //addd $r1 = $r1, $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x71050001),        //addd $r1 = $r1, $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f3: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x2705120c),        //sd 72 (0x48)[$r12] = $r1;;
     _32(0x2809140c),        //sq 80 (0x50)[$r12] = $r2r3;;
     _32(0x2811180c),        //sq 96 (0x60)[$r12] = $r4r5;;
     _32(0x28191c0c),        //sq 112 (0x70)[$r12] = $r6r7;;
     _32(0x2821200c),        //sq 128 (0x80)[$r12] = $r8r9;;
     _32(0x2829240c),        //sq 144 (0x90)[$r12] = $r10r11;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x6100120c),        //addd $r0 = $r12, 72 (0x48);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _64(0x00000000f901b100),        //compw.gtu $r0 = $r0, 4 (0x4);;
     _32(0x0c001880),        //cb.wnez $r0? 16c7c <f3+0x1c4>;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _96(0x0000000080000100e100f000),        //addd $r0 = $r0, 263104 (0x403c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x0fd80000),        //igoto $r0;;
     _32(0x60100000),        //make $r4 = 0 (0x0);;
     _32(0x600c0000),        //make $r3 = 0 (0x0);;
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x1fffffd2),        //call 16a70 <f3h>;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x10000054),        //goto 16c80 <f3+0x1c8>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x60100000),        //make $r4 = 0 (0x0);;
     _32(0x600c0000),        //make $r3 = 0 (0x0);;
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x1fffffc5),        //call 16a70 <f3h>;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x10000047),        //goto 16c80 <f3+0x1c8>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x60100000),        //make $r4 = 0 (0x0);;
     _32(0x600c0000),        //make $r3 = 0 (0x0);;
     _32(0x38080a0c),        //ld $r2 = 40 (0x28)[$r12];;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x1fffffb3),        //call 16a70 <f3h>;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x10000035),        //goto 16c80 <f3+0x1c8>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _32(0x60100000),        //make $r4 = 0 (0x0);;
     _32(0x380c080c),        //ld $r3 = 32 (0x20)[$r12];;
     _32(0x38080a0c),        //ld $r2 = 40 (0x28)[$r12];;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x1fffff9c),        //call 16a70 <f3h>;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x1000001e),        //goto 16c80 <f3+0x1c8>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3810060c),        //ld $r4 = 24 (0x18)[$r12];;
     _32(0x380c080c),        //ld $r3 = 32 (0x20)[$r12];;
     _32(0x38080a0c),        //ld $r2 = 40 (0x28)[$r12];;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x1fffff80),        //call 16a70 <f3h>;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x10000002),        //goto 16c80 <f3+0x1c8>;;
     _32(0x180000f7),        //call 17058 <abort>;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f4: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _64(0x00000000f101b100),        //compw.eq $r0 = $r0, 4 (0x4);;
     _32(0x0c000180),        //cb.wnez $r0? 16cec <f4+0x54>;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _64(0x00000000f101b140),        //compw.eq $r0 = $r0, 5 (0x5);;
     _32(0x0c000300),        //cb.wnez $r0? 16d14 <f4+0x7c>;;
     _32(0x10000024),        //goto 16d78 <f4+0xe0>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x1000001b),        //goto 16d7c <f4+0xe4>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x44030000),        //floatd.rn $r0 = $r0, 0 (0x0);;
     _32(0x50027001),        //faddd $r0 = $r1, $r0;;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x10000002),        //goto 16d7c <f4+0xe4>;;
     _32(0x180000b8),        //call 17058 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x44030000),        //floatd.rn $r0 = $r0, 0 (0x0);;
     _32(0x50027001),        //faddd $r0 = $r1, $r0;;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x0202000080000000e00c0000),        //make $r3 = 4629700416936869888 (0x4040000000000000);;
     _32(0x60080080),        //make $r2 = 128 (0x80);;
     _96(0x0201800080000000e0040000),        //make $r1 = 4625196817309499392 (0x4030000000000000);;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffffe71),        //call 16820 <f1>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61012c00),        //compd.eq $r0 = $r0, 176 (0xb0);;
     _32(0x08000080),        //cb.dnez $r0? 16e7c <main+0x4c>;;
     _32(0x18000078),        //call 17058 <abort>;;
     _96(0x0202800080000000e0180000),        //make $r6 = 4634204016564240384 (0x4050000000000000);;
     _32(0x60140011),        //make $r5 = 17 (0x11);;
     _96(0x0201980080000000e0100000),        //make $r4 = 4626041242239631360 (0x4033000000000000);;
     _96(0x0201900080000000e00c0000),        //make $r3 = 4625759767262920704 (0x4032000000000000);;
     _32(0x60080007),        //make $r2 = 7 (0x7);;
     _32(0x60040005),        //make $r1 = 5 (0x5);;
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x1ffffe92),        //call 168f8 <f2>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60011900),        //compd.ne $r0 = $r0, 100 (0x64);;
     _32(0x080001c0),        //cb.dnez $r0? 16ee4 <main+0xb4>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61010780),        //compd.eq $r0 = $r0, 30 (0x1e);;
     _32(0x08000080),        //cb.dnez $r0? 16ee8 <main+0xb8>;;
     _32(0x1800005d),        //call 17058 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffef3),        //call 16ab8 <f3>;;
     _32(0x08800080),        //cb.deqz $r0? 16ef8 <main+0xc8>;;
     _32(0x18000059),        //call 17058 <abort>;;
     _32(0x60040012),        //make $r1 = 18 (0x12);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffeee),        //call 16ab8 <f3>;;
     _32(0x610104c0),        //compd.eq $r0 = $r0, 19 (0x13);;
     _32(0x08000080),        //cb.dnez $r0? 16f10 <main+0xe0>;;
     _32(0x18000053),        //call 17058 <abort>;;
     _32(0x60080064),        //make $r2 = 100 (0x64);;
     _32(0x60040012),        //make $r1 = 18 (0x12);;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffee7),        //call 16ab8 <f3>;;
     _32(0x61011e00),        //compd.eq $r0 = $r0, 120 (0x78);;
     _32(0x08000080),        //cb.dnez $r0? 16f2c <main+0xfc>;;
     _32(0x1800004c),        //call 17058 <abort>;;
     _32(0x600c012c),        //make $r3 = 300 (0x12c);;
     _32(0x60080064),        //make $r2 = 100 (0x64);;
     _32(0x60040012),        //make $r1 = 18 (0x12);;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffffedf),        //call 16ab8 <f3>;;
     _32(0x61016940),        //compd.eq $r0 = $r0, 421 (0x1a5);;
     _32(0x08000080),        //cb.dnez $r0? 16f4c <main+0x11c>;;
     _32(0x18000044),        //call 17058 <abort>;;
     _32(0x60100056),        //make $r4 = 86 (0x56);;
     _32(0x600c0040),        //make $r3 = 64 (0x40);;
     _32(0x60080047),        //make $r2 = 71 (0x47);;
     _32(0x60040012),        //make $r1 = 18 (0x12);;
     _32(0x60000004),        //make $r0 = 4 (0x4);;
     _32(0x1ffffed6),        //call 16ab8 <f3>;;
     _32(0x61013cc0),        //compd.eq $r0 = $r0, 243 (0xf3);;
     _32(0x08000080),        //cb.dnez $r0? 16f70 <main+0x140>;;
     _32(0x1800003b),        //call 17058 <abort>;;
     _96(0x0201900080000000e0100000),        //make $r4 = 4625759767262920704 (0x4032000000000000);;
     _32(0x600c0010),        //make $r3 = 16 (0x10);;
     _96(0x0201100080000000e0080000),        //make $r2 = 4621256167635550208 (0x4022000000000000);;
     _96(0x0200c00080000000e0040000),        //make $r1 = 4618441417868443648 (0x4018000000000000);;
     _32(0x60000004),        //make $r0 = 4 (0x4);;
     _32(0x1fffff3f),        //call 16c98 <f4>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60010ac0),        //compd.ne $r0 = $r0, 43 (0x2b);;
     _32(0x080001c0),        //cb.dnez $r0? 16fd0 <main+0x1a0>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61010180),        //compd.eq $r0 = $r0, 6 (0x6);;
     _32(0x08000080),        //cb.dnez $r0? 16fd4 <main+0x1a4>;;
     _32(0x18000022),        //call 17058 <abort>;;
     _96(0x0202fc0080000000e0140000),        //make $r5 = 4638566878703255552 (0x405f800000000000);;
     _32(0x60100011),        //make $r4 = 17 (0x11);;
     _96(0x01ff800080000000e00c0000),        //make $r3 = 4607182418800017408 (0x3ff0000000000000);;
     _96(0x0201a80080000000e0080000),        //make $r2 = 4626604192193052672 (0x4035000000000000);;
     _96(0x0200e00080000000e0040000),        //make $r1 = 4619567317775286272 (0x401c000000000000);;
     _32(0x60000005),        //make $r0 = 5 (0x5);;
     _32(0x1fffff23),        //call 16c98 <f4>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60012400),        //compd.ne $r0 = $r0, 144 (0x90);;
     _32(0x080001c0),        //cb.dnez $r0? 17040 <main+0x210>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61010700),        //compd.eq $r0 = $r0, 28 (0x1c);;
     _32(0x08000080),        //cb.dnez $r0? 17044 <main+0x214>;;
     _32(0x18000006),        //call 17058 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 17430 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 18f60 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110111000110000; //0x16e30
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f1, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f2, 0b00010110100011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f3h, 0b00010110101001110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f3, 0b00010110101010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f4, 0b00010110110010011000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110111000110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111000001011000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
