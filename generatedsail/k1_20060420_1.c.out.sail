// executing 20060420_1.c.out.dumped test 
val k1_20060420_1.: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_20060420_1.() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let foo: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x2609080c),        //sw 32 (0x20)[$r12] = $r2;;
     _32(0x260d020c),        //sw 8 (0x8)[$r12] = $r3;;
     _32(0x60000004),        //make $r0 = 4 (0x4);;
     _32(0x26010a0c),        //sw 40 (0x28)[$r12] = $r0;;
     _32(0x6000000f),        //make $r0 = 15 (0xf);;
     _32(0x2601090c),        //sw 36 (0x24)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x10000027),        //goto 168e8 <foo+0xc8>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34001e0c),        //lws $r0 = 120 (0x78)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x26011d0c),        //sw 116 (0x74)[$r12] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x10000010),        //goto 168b4 <foo+0x94>;;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34001e0c),        //lws $r0 = 120 (0x78)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x30041d0c),        //lwz $r1 = 116 (0x74)[$r12];;
     _32(0x5c027001),        //faddw $r0 = $r1, $r0;;
     _32(0x26011d0c),        //sw 116 (0x74)[$r12] = $r0;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x30041f0c),        //lwz $r1 = 124 (0x7c)[$r12];;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7ffb80),        //cb.wnez $r0? 16878 <foo+0x58>;;
     _32(0x34001e0c),        //lws $r0 = 120 (0x78)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30041d0c),        //lwz $r1 = 116 (0x74)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x30001e0c),        //lwz $r0 = 120 (0x78)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x30041e0c),        //lwz $r1 = 120 (0x78)[$r12];;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x7301b001),        //compw.ge $r0 = $r1, $r0;;
     _32(0x0c002980),        //cb.wnez $r0? 16b8c <foo+0x36c>;;
     _32(0x34041e0c),        //lws $r1 = 120 (0x78)[$r12];;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x71050001),        //addd $r1 = $r1, $r0;;
     _32(0x3000090c),        //lwz $r0 = 36 (0x24)[$r12];;
     _32(0x78010001),        //andd $r0 = $r1, $r0;;
     _32(0x087ff440),        //cb.dnez $r0? 16850 <foo+0x30>;;
     _32(0x1000009f),        //goto 16b8c <foo+0x36c>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34001e0c),        //lws $r0 = 120 (0x78)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x2801180c),        //sq 96 (0x60)[$r12] = $r0r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34081e0c),        //lws $r2 = 120 (0x78)[$r12];;
     _32(0x34000a0c),        //lws $r0 = 40 (0x28)[$r12];;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x2801140c),        //sq 80 (0x50)[$r12] = $r0r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34081e0c),        //lws $r2 = 120 (0x78)[$r12];;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x2801100c),        //sq 64 (0x40)[$r12] = $r0r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _32(0x340c1e0c),        //lws $r3 = 120 (0x78)[$r12];;
     _32(0x30040a0c),        //lwz $r1 = 40 (0x28)[$r12];;
     _32(0x7a000001),        //copyw $r0 = $r1;;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x71011040),        //addw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x71010003),        //addd $r0 = $r3, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x28010c0c),        //sq 48 (0x30)[$r12] = $r0r1;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x10000042),        //goto 16acc <foo+0x2ac>;;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34001e0c),        //lws $r0 = 120 (0x78)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x3c08180c),        //lq $r2r3 = 96 (0x60)[$r12];;
     _32(0x58077002),        //faddwq $r0r1 = $r2r3, $r0r1;;
     _32(0x2801180c),        //sq 96 (0x60)[$r12] = $r0r1;;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34081e0c),        //lws $r2 = 120 (0x78)[$r12];;
     _32(0x34000a0c),        //lws $r0 = 40 (0x28)[$r12];;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x3c08140c),        //lq $r2r3 = 80 (0x50)[$r12];;
     _32(0x58077002),        //faddwq $r0r1 = $r2r3, $r0r1;;
     _32(0x2801140c),        //sq 80 (0x50)[$r12] = $r0r1;;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34081e0c),        //lws $r2 = 120 (0x78)[$r12];;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x3c08100c),        //lq $r2r3 = 64 (0x40)[$r12];;
     _32(0x58077002),        //faddwq $r0r1 = $r2r3, $r0r1;;
     _32(0x2801100c),        //sq 64 (0x40)[$r12] = $r0r1;;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _32(0x340c1e0c),        //lws $r3 = 120 (0x78)[$r12];;
     _32(0x30040a0c),        //lwz $r1 = 40 (0x28)[$r12];;
     _32(0x7a000001),        //copyw $r0 = $r1;;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x71011040),        //addw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x71010003),        //addd $r0 = $r3, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x3c080c0c),        //lq $r2r3 = 48 (0x30)[$r12];;
     _32(0x58077002),        //faddwq $r0r1 = $r2r3, $r0r1;;
     _32(0x28010c0c),        //sq 48 (0x30)[$r12] = $r0r1;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x30041f0c),        //lwz $r1 = 124 (0x7c)[$r12];;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7fef00),        //cb.wnez $r0? 169c8 <foo+0x1a8>;;
     _32(0x34001e0c),        //lws $r0 = 120 (0x78)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x71090001),        //addd $r2 = $r1, $r0;;
     _32(0x3c00180c),        //lq $r0r1 = 96 (0x60)[$r12];;
     _32(0x28010002),        //sq 0 (0x0)[$r2] = $r0r1;;
     _32(0x34041e0c),        //lws $r1 = 120 (0x78)[$r12];;
     _32(0x34000a0c),        //lws $r0 = 40 (0x28)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x71090001),        //addd $r2 = $r1, $r0;;
     _32(0x3c00140c),        //lq $r0r1 = 80 (0x50)[$r12];;
     _32(0x28010002),        //sq 0 (0x0)[$r2] = $r0r1;;
     _32(0x34041e0c),        //lws $r1 = 120 (0x78)[$r12];;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x71090001),        //addd $r2 = $r1, $r0;;
     _32(0x3c00100c),        //lq $r0r1 = 64 (0x40)[$r12];;
     _32(0x28010002),        //sq 0 (0x0)[$r2] = $r0r1;;
     _32(0x34081e0c),        //lws $r2 = 120 (0x78)[$r12];;
     _32(0x30040a0c),        //lwz $r1 = 40 (0x28)[$r12];;
     _32(0x7a000001),        //copyw $r0 = $r1;;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x71011040),        //addw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x71090001),        //addd $r2 = $r1, $r0;;
     _32(0x3c000c0c),        //lq $r0r1 = 48 (0x30)[$r12];;
     _32(0x28010002),        //sq 0 (0x0)[$r2] = $r0r1;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x30041e0c),        //lwz $r1 = 120 (0x78)[$r12];;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004020c),        //lwz $r1 = 8 (0x8)[$r12];;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x30041e0c),        //lwz $r1 = 120 (0x78)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7fd600),        //cb.wnez $r0? 16914 <foo+0xf4>;;
     _32(0x10000027),        //goto 16c54 <foo+0x434>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34001e0c),        //lws $r0 = 120 (0x78)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x26010b0c),        //sw 44 (0x2c)[$r12] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x10000010),        //goto 16c20 <foo+0x400>;;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x34001e0c),        //lws $r0 = 120 (0x78)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x30040b0c),        //lwz $r1 = 44 (0x2c)[$r12];;
     _32(0x5c027001),        //faddw $r0 = $r1, $r0;;
     _32(0x26010b0c),        //sw 44 (0x2c)[$r12] = $r0;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x30041f0c),        //lwz $r1 = 124 (0x7c)[$r12];;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7ffb80),        //cb.wnez $r0? 16be4 <foo+0x3c4>;;
     _32(0x34001e0c),        //lws $r0 = 120 (0x78)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30040b0c),        //lwz $r1 = 44 (0x2c)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x30001e0c),        //lwz $r0 = 120 (0x78)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x30041e0c),        //lwz $r1 = 120 (0x78)[$r12];;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7ff5c0),        //cb.wnez $r0? 16bbc <foo+0x39c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _96(0x0000000080000117e0002200),        //make $r0 = 285832 (0x45c88);;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _96(0x0000000080000117e0002200),        //make $r0 = 285832 (0x45c88);;
     _32(0x65000000),        //negd $r0 = $r0;;
     _32(0x68000fc0),        //andd $r0 = $r0, 63 (0x3f);;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61001000),        //addd $r0 = $r0, 64 (0x40);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61002000),        //addd $r0 = $r0, 128 (0x80);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26010f0c),        //sw 60 (0x3c)[$r12] = $r0;;
     _32(0x1000001e),        //goto 16d54 <main+0xdc>;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x480b0000),        //floatw.rn $r2 = $r0, 0 (0x0);;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x48030000),        //floatw.rn $r0 = $r0, 0 (0x0);;
     _64(0x00104c00e0040000),        //make $r1 = 1093664768 (0x41300000);;
     _32(0x5e067040),        //fmulw $r1 = $r0, $r1;;
     _32(0x380c040c),        //ld $r3 = 16 (0x10)[$r12];;
     _32(0x34000f0c),        //lws $r0 = 60 (0x3c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010003),        //addd $r0 = $r3, $r0;;
     _32(0x5c067042),        //faddw $r1 = $r2, $r1;;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x480b0000),        //floatw.rn $r2 = $r0, 0 (0x0);;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x48030000),        //floatw.rn $r0 = $r0, 0 (0x0);;
     _64(0x00105000e0040000),        //make $r1 = 1094713344 (0x41400000);;
     _32(0x5e067040),        //fmulw $r1 = $r0, $r1;;
     _32(0x380c060c),        //ld $r3 = 24 (0x18)[$r12];;
     _32(0x34000f0c),        //lws $r0 = 60 (0x3c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010003),        //addd $r0 = $r3, $r0;;
     _32(0x5c067042),        //faddw $r1 = $r2, $r1;;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26010f0c),        //sw 60 (0x3c)[$r12] = $r0;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _64(0x00000000f401b3c0),        //compw.le $r0 = $r0, 15 (0xf);;
     _32(0x0c7ff800),        //cb.wnez $r0? 16ce0 <main+0x68>;;
     _32(0x6100040c),        //addd $r0 = $r12, 16 (0x10);;
     _32(0x600c0010),        //make $r3 = 16 (0x10);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x1ffffeaa),        //call 16820 <foo>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26010f0c),        //sw 60 (0x3c)[$r12] = $r0;;
     _32(0x1000001f),        //goto 16e00 <main+0x188>;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x48070000),        //floatw.rn $r1 = $r0, 0 (0x0);;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x48030000),        //floatw.rn $r0 = $r0, 0 (0x0);;
     _64(0x00104c00e0080000),        //make $r2 = 1093664768 (0x41300000);;
     _32(0x5e027080),        //fmulw $r0 = $r0, $r2;;
     _32(0x5c067001),        //faddw $r1 = $r1, $r0;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x48030000),        //floatw.rn $r0 = $r0, 0 (0x0);;
     _32(0x5c067001),        //faddw $r1 = $r1, $r0;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x48030000),        //floatw.rn $r0 = $r0, 0 (0x0);;
     _64(0x00105000e0080000),        //make $r2 = 1094713344 (0x41400000);;
     _32(0x5e027080),        //fmulw $r0 = $r0, $r2;;
     _32(0x5c027001),        //faddw $r0 = $r1, $r0;;
     _32(0x2601090c),        //sw 36 (0x24)[$r12] = $r0;;
     _32(0x34000f0c),        //lws $r0 = 60 (0x3c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x38040a0c),        //ld $r1 = 40 (0x28)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x3004090c),        //lwz $r1 = 36 (0x24)[$r12];;
     _32(0x72030001),        //fcompw.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16df4 <main+0x17c>;;
     _32(0x1800000e),        //call 16e28 <abort>;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26010f0c),        //sw 60 (0x3c)[$r12] = $r0;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _64(0x00000000f401b3c0),        //compw.le $r0 = $r0, 15 (0xf);;
     _32(0x0c7ff7c0),        //cb.wnez $r0? 16d88 <main+0x110>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 17200 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 18d30 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110110001111000; //0x16c78
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo, 0b00010110100000100000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110110001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110111000101000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
