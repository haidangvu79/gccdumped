// executing pr56866 test 
val k1_pr56866: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pr56866() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let main: list_I = 
 [|
     _64(0x07fffff8e130780c),        //addd $r12 = $r12, -7712 (0xffffffffffffe1e0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _64(0x00000005e100860c),        //addd $r0 = $r12, 5656 (0x1618);;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60000800),        //make $r0 = 2048 (0x800);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6a000003),        //copyd $r0 = $r3;;
     _32(0x18000149),        //call 16d70 <memset>;;
     _64(0x00000002e100860c),        //addd $r0 = $r12, 2584 (0xa18);;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60000400),        //make $r0 = 1024 (0x400);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6a000003),        //copyd $r0 = $r3;;
     _32(0x18000141),        //call 16d70 <memset>;;
     _64(0x00000001e100060c),        //addd $r0 = $r12, 1048 (0x418);;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60000200),        //make $r0 = 512 (0x200);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6a000003),        //copyd $r0 = $r3;;
     _32(0x18000139),        //call 16d70 <memset>;;
     _32(0x6100460c),        //addd $r0 = $r12, 280 (0x118);;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60000100),        //make $r0 = 256 (0x100);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6a000003),        //copyd $r0 = $r3;;
     _32(0x18000132),        //call 16d70 <memset>;;
     _96(0x00091a2b81e26af3e0007bc0),        //make $r0 = 81985529216486895 (0x123456789abcdef);;
     _64(0x18000005a701860c),        //sd 5656 (0x1618)[$r12] = $r0;;
     _64(0x000048d1e00059c0),        //make $r0 = 19088743 (0x1234567);;
     _64(0x18000002a601860c),        //sw 2584 (0xa18)[$r12] = $r0;;
     _32(0x60004567),        //make $r0 = 17767 (0x4567);;
     _64(0x18000001a501060c),        //sh 1048 (0x418)[$r12] = $r0;;
     _32(0x60000073),        //make $r0 = 115 (0x73);;
     _32(0x2401460c),        //sb 280 (0x118)[$r12] = $r0;;
     _64(0x00000005e100860c),        //addd $r0 = $r12, 5656 (0x1618);;
     _64(0x00000002e104860c),        //addd $r1 = $r12, 2584 (0xa18);;
     _64(0x00000001e108060c),        //addd $r2 = $r12, 1048 (0x418);;
     _32(0x610c460c),        //addd $r3 = $r12, 280 (0x118);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000007a601870c),        //sw 7708 (0x1e1c)[$r12] = $r0;;
     _32(0x1000001b),        //goto 16978 <main+0x158>;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _64(0x00000007e104880c),        //addd $r1 = $r12, 7712 (0x1e20);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _64(0x1ffffffdb800fe00),        //ld $r0 = -2056 (0xfffffffffffff7f8)[$r0];;
     _32(0x60040008),        //make $r1 = 8 (0x8);;
     _32(0x75080001),        //negw $r2 = $r1;;
     _32(0x7b066040),        //srld $r1 = $r0, $r1;;
     _32(0x79026080),        //slld $r0 = $r0, $r2;;
     _32(0x7a050001),        //ord $r1 = $r1, $r0;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _64(0x00000007e108880c),        //addd $r2 = $r12, 7712 (0x1e20);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _64(0x1ffffffba705fe00),        //sd -4104 (0xffffffffffffeff8)[$r0] = $r1;;
     _64(0x18000007b000870c),        //lwz $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000007a601870c),        //sw 7708 (0x1e1c)[$r12] = $r0;;
     _64(0x18000007b000870c),        //lwz $r0 = 7708 (0x1e1c)[$r12];;
     _64(0x00000007f401b7c0),        //compw.le $r0 = $r0, 255 (0xff);;
     _32(0x0c7ff880),        //cb.wnez $r0? 16910 <main+0xf0>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000007a601870c),        //sw 7708 (0x1e1c)[$r12] = $r0;;
     _32(0x10000018),        //goto 169f8 <main+0x1d8>;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _64(0x00000007e104880c),        //addd $r1 = $r12, 7712 (0x1e20);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _64(0x1ffffffab000fe00),        //lwz $r0 = -5128 (0xffffffffffffebf8)[$r0];;
     _32(0x7f023200),        //rorw $r0 = $r0, 8 (0x8);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _64(0x00000007e108880c),        //addd $r2 = $r12, 7712 (0x1e20);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _64(0x1ffffff9a605fe00),        //sw -6152 (0xffffffffffffe7f8)[$r0] = $r1;;
     _64(0x18000007b000870c),        //lwz $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000007a601870c),        //sw 7708 (0x1e1c)[$r12] = $r0;;
     _64(0x18000007b000870c),        //lwz $r0 = 7708 (0x1e1c)[$r12];;
     _64(0x00000007f401b7c0),        //compw.le $r0 = $r0, 255 (0xff);;
     _32(0x0c7ff940),        //cb.wnez $r0? 1699c <main+0x17c>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000007a601870c),        //sw 7708 (0x1e1c)[$r12] = $r0;;
     _32(0x10000028),        //goto 16ab8 <main+0x298>;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x79022040),        //slld $r0 = $r0, 1 (0x1);;
     _64(0x00000007e104880c),        //addd $r1 = $r12, 7712 (0x1e20);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _64(0x1ffffff9a8007e00),        //lhz $r0 = -6664 (0xffffffffffffe5f8)[$r0];;
     _32(0x7b023240),        //srlw $r0 = $r0, 9 (0x9);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x79022040),        //slld $r0 = $r0, 1 (0x1);;
     _64(0x00000007e108880c),        //addd $r2 = $r12, 7712 (0x1e20);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _64(0x1ffffff9a8007e00),        //lhz $r0 = -6664 (0xffffffffffffe5f8)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x790231c0),        //sllw $r0 = $r0, 7 (0x7);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x79022040),        //slld $r0 = $r0, 1 (0x1);;
     _64(0x00000007e108880c),        //addd $r2 = $r12, 7712 (0x1e20);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _64(0x1ffffff8a505fe00),        //sh -7176 (0xffffffffffffe3f8)[$r0] = $r1;;
     _64(0x18000007b000870c),        //lwz $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000007a601870c),        //sw 7708 (0x1e1c)[$r12] = $r0;;
     _64(0x18000007b000870c),        //lwz $r0 = 7708 (0x1e1c)[$r12];;
     _64(0x00000007f401b7c0),        //compw.le $r0 = $r0, 255 (0xff);;
     _32(0x0c7ff540),        //cb.wnez $r0? 16a1c <main+0x1fc>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000007a601870c),        //sw 7708 (0x1e1c)[$r12] = $r0;;
     _32(0x10000025),        //goto 16b6c <main+0x34c>;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _64(0x00000007e104880c),        //addd $r1 = $r12, 7712 (0x1e20);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _64(0x1ffffff8a000be00),        //lbz $r0 = -7432 (0xffffffffffffe2f8)[$r0];;
     _32(0x7b023140),        //srlw $r0 = $r0, 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _64(0x00000007e108880c),        //addd $r2 = $r12, 7712 (0x1e20);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _64(0x1ffffff8a000be00),        //lbz $r0 = -7432 (0xffffffffffffe2f8)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _64(0x18000007b400870c),        //lws $r0 = 7708 (0x1e1c)[$r12];;
     _64(0x00000007e108880c),        //addd $r2 = $r12, 7712 (0x1e20);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _64(0x1ffffff8a4057e00),        //sb -7688 (0xffffffffffffe1f8)[$r0] = $r1;;
     _64(0x18000007b000870c),        //lwz $r0 = 7708 (0x1e1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000007a601870c),        //sw 7708 (0x1e1c)[$r12] = $r0;;
     _64(0x18000007b000870c),        //lwz $r0 = 7708 (0x1e1c)[$r12];;
     _64(0x00000007f401b7c0),        //compw.le $r0 = $r0, 255 (0xff);;
     _32(0x0c7ff600),        //cb.wnez $r0? 16adc <main+0x2bc>;;
     _64(0x00000003e100860c),        //addd $r0 = $r12, 3608 (0xe18);;
     _64(0x00000001e104860c),        //addd $r1 = $r12, 1560 (0x618);;
     _64(0x00000000e108860c),        //addd $r2 = $r12, 536 (0x218);;
     _32(0x610c060c),        //addd $r3 = $r12, 24 (0x18);;
     _64(0x18000003b800860c),        //ld $r0 = 3608 (0xe18)[$r12];;
     _96(0x0778091a8159e26ae004f340),        //make $r1 = 17222085231038278605 (0xef0123456789abcd);;
     _32(0x7001a040),        //compd.ne $r0 = $r0, $r1;;
     _32(0x08000100),        //cb.dnez $r0? 16bc4 <main+0x3a4>;;
     _64(0x18000003b800880c),        //ld $r0 = 3616 (0xe20)[$r12];;
     _32(0x08800080),        //cb.deqz $r0? 16bc8 <main+0x3a8>;;
     _32(0x18000021),        //call 16c48 <abort>;;
     _64(0x18000001b000860c),        //lwz $r0 = 1560 (0x618)[$r12];;
     _64(0x0338091af001b140),        //compw.ne $r0 = $r0, 1728127813 (0x67012345);;
     _32(0x0c000100),        //cb.wnez $r0? 16be8 <main+0x3c8>;;
     _64(0x18000001b000870c),        //lwz $r0 = 1564 (0x61c)[$r12];;
     _32(0x08800080),        //cb.deqz $r0? 16bec <main+0x3cc>;;
     _32(0x18000018),        //call 16c48 <abort>;;
     _64(0x18000000a800860c),        //lhz $r0 = 536 (0x218)[$r12];;
     _64(0x0000059df001b080),        //compw.ne $r0 = $r0, 45986 (0xb3a2);;
     _32(0x0c000100),        //cb.wnez $r0? 16c0c <main+0x3ec>;;
     _64(0x18000000a800868c),        //lhz $r0 = 538 (0x21a)[$r12];;
     _32(0x08800080),        //cb.deqz $r0? 16c10 <main+0x3f0>;;
     _32(0x1800000f),        //call 16c48 <abort>;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _64(0x00000004f001b6c0),        //compw.ne $r0 = $r0, 155 (0x9b);;
     _32(0x0c0000c0),        //cb.wnez $r0? 16c28 <main+0x408>;;
     _32(0x2000064c),        //lbz $r0 = 25 (0x19)[$r12];;
     _32(0x08800080),        //cb.deqz $r0? 16c2c <main+0x40c>;;
     _32(0x18000008),        //call 16c48 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _64(0x00000007e130880c),        //addd $r12 = $r12, 7712 (0x1e20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000169),        //call 171f8 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000833),        //call 18d28 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110100000100000; //0x16820
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110110001001000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
