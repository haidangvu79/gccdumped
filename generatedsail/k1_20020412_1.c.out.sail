// executing 20020412_1.c.out.dumped test 
val k1_20020412_1.: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_20020412_1.() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let bar: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71040040),        //addw $r1 = $r0, 1 (0x1);;
     _32(0x7808ffc1),        //zxwd $r2 = $r1;;
     _96(0x00000000800000f8e0040200),        //make $r1 = 253960 (0x3e008);;
     _32(0x26090001),        //sw 0 (0x0)[$r1] = $r2;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 1686c <bar+0x4c>;;
     _32(0x18000104),        //call 16c78 <abort>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000001f401b3c0),        //compw.le $r0 = $r0, 47 (0x2f);;
     _32(0x0c000140),        //cb.wnez $r0? 1688c <bar+0x6c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000001f401b640),        //compw.le $r0 = $r0, 57 (0x39);;
     _32(0x0c000080),        //cb.wnez $r0? 16890 <bar+0x70>;;
     _32(0x180000fb),        //call 16c78 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let foo: list_I = 
 [|
     _32(0x6130b80c),        //addd $r12 = $r12, -288 (0xfffffee0);;
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x2849080c),        //sq 32 (0x20)[$r12] = $r18r19;;
     _32(0x28550c0c),        //so 48 (0x30)[$r12] = $r20r21r22r23;;
     _32(0x2865140c),        //so 80 (0x50)[$r12] = $r24r25r26r27;;
     _32(0x28751c0c),        //so 112 (0x70)[$r12] = $r28r29r30r31;;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x6138040c),        //addd $r14 = $r12, 16 (0x10);;
     _32(0x27052e0e),        //sd 184 (0xb8)[$r14] = $r1;;
     _32(0x2809300e),        //sq 192 (0xc0)[$r14] = $r2r3;;
     _32(0x2811340e),        //sq 208 (0xd0)[$r14] = $r4r5;;
     _32(0x2819380e),        //sq 224 (0xe0)[$r14] = $r6r7;;
     _32(0x28213c0e),        //sq 240 (0xf0)[$r14] = $r8r9;;
     _32(0x2829400e),        //sq 256 (0x100)[$r14] = $r10r11;;
     _32(0x2601220e),        //sw 136 (0x88)[$r14] = $r0;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x2701200e),        //sd 128 (0x80)[$r14] = $r0;;
     _32(0x3000220e),        //lwz $r0 = 136 (0x88)[$r14];;
     _32(0x6907f000),        //sxwd $r1 = $r0;;
     _32(0x6a580001),        //copyd $r22 = $r1;;
     _32(0x605c0000),        //make $r23 = 0 (0x0);;
     _32(0x7b062f56),        //srld $r1 = $r22, 61 (0x3d);;
     _32(0x797e20d7),        //slld $r31 = $r23, 3 (0x3);;
     _32(0x7a7d07c1),        //ord $r31 = $r1, $r31;;
     _32(0x797a20d6),        //slld $r30 = $r22, 3 (0x3);;
     _32(0x6907f000),        //sxwd $r1 = $r0;;
     _32(0x6104ffc1),        //addd $r1 = $r1, -1 (0xffffffff);;
     _32(0x2705280e),        //sd 160 (0xa0)[$r14] = $r1;;
     _32(0x6907f000),        //sxwd $r1 = $r0;;
     _32(0x6a500001),        //copyd $r20 = $r1;;
     _32(0x60540000),        //make $r21 = 0 (0x0);;
     _32(0x7b062f54),        //srld $r1 = $r20, 61 (0x3d);;
     _32(0x797620d5),        //slld $r29 = $r21, 3 (0x3);;
     _32(0x7a750741),        //ord $r29 = $r1, $r29;;
     _32(0x797220d4),        //slld $r28 = $r20, 3 (0x3);;
     _32(0x6907f000),        //sxwd $r1 = $r0;;
     _32(0x6a480001),        //copyd $r18 = $r1;;
     _32(0x604c0000),        //make $r19 = 0 (0x0);;
     _32(0x7b062f52),        //srld $r1 = $r18, 61 (0x3d);;
     _32(0x796e20d3),        //slld $r27 = $r19, 3 (0x3);;
     _32(0x7a6d06c1),        //ord $r27 = $r1, $r27;;
     _32(0x796a20d2),        //slld $r26 = $r18, 3 (0x3);;
     _32(0x694bf000),        //sxwd $r18 = $r0;;
     _32(0x6907f000),        //sxwd $r1 = $r0;;
     _32(0x6a400001),        //copyd $r16 = $r1;;
     _32(0x60440000),        //make $r17 = 0 (0x0);;
     _32(0x7b062f50),        //srld $r1 = $r16, 61 (0x3d);;
     _32(0x796620d1),        //slld $r25 = $r17, 3 (0x3);;
     _32(0x7a650641),        //ord $r25 = $r1, $r25;;
     _32(0x796220d0),        //slld $r24 = $r16, 3 (0x3);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x610007c0),        //addd $r0 = $r0, 31 (0x1f);;
     _32(0x7b022140),        //srld $r0 = $r0, 5 (0x5);;
     _32(0x79022140),        //slld $r0 = $r0, 5 (0x5);;
     _32(0x75310300),        //sbfd $r12 = $r0, $r12;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x61000000),        //addd $r0 = $r0, 0 (0x0);;
     _32(0x2701260e),        //sd 152 (0x98)[$r14] = $r0;;
     _32(0x61002e0e),        //addd $r0 = $r14, 184 (0xb8);;
     _32(0x2701240e),        //sd 144 (0x90)[$r14] = $r0;;
     _32(0x3800240e),        //ld $r0 = 144 (0x90)[$r14];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705240e),        //sd 144 (0x90)[$r14] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x3800260e),        //ld $r0 = 152 (0x98)[$r14];;
     _32(0x6a080012),        //copyd $r2 = $r18;;
     _32(0x1800010b),        //call 16de0 <memcpy>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26012b0e),        //sw 172 (0xac)[$r14] = $r0;;
     _32(0x1000000a),        //goto 169e8 <foo+0x140>;;
     _32(0x3804260e),        //ld $r1 = 152 (0x98)[$r14];;
     _32(0x34002b0e),        //lws $r0 = 172 (0xac)[$r14];;
     _32(0x2002e001),        //lbz $r0 = $r0[$r1];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff92),        //call 16820 <bar>;;
     _32(0x30002b0e),        //lwz $r0 = 172 (0xac)[$r14];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26012b0e),        //sw 172 (0xac)[$r14] = $r0;;
     _32(0x30042b0e),        //lwz $r1 = 172 (0xac)[$r14];;
     _32(0x3000220e),        //lwz $r0 = 136 (0x88)[$r14];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7ffd00),        //cb.wnez $r0? 169c4 <foo+0x11c>;;
     _32(0x3800240e),        //ld $r0 = 144 (0x90)[$r14];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705240e),        //sd 144 (0x90)[$r14] = $r1;;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x3800260e),        //ld $r0 = 152 (0x98)[$r14];;
     _32(0x6a080012),        //copyd $r2 = $r18;;
     _32(0x180000f4),        //call 16de0 <memcpy>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26012b0e),        //sw 172 (0xac)[$r14] = $r0;;
     _32(0x1000000a),        //goto 16a44 <foo+0x19c>;;
     _32(0x3804260e),        //ld $r1 = 152 (0x98)[$r14];;
     _32(0x34002b0e),        //lws $r0 = 172 (0xac)[$r14];;
     _32(0x2002e001),        //lbz $r0 = $r0[$r1];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff7b),        //call 16820 <bar>;;
     _32(0x30002b0e),        //lwz $r0 = 172 (0xac)[$r14];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26012b0e),        //sw 172 (0xac)[$r14] = $r0;;
     _32(0x30042b0e),        //lwz $r1 = 172 (0xac)[$r14];;
     _32(0x3000220e),        //lwz $r0 = 136 (0x88)[$r14];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7ffd00),        //cb.wnez $r0? 16a20 <foo+0x178>;;
     _32(0x3830200e),        //ld $r12 = 128 (0x80)[$r14];;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130fc0e),        //addd $r12 = $r14, -16 (0xfffffff0);;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x3c540c0c),        //lo $r20r21r22r23 = 48 (0x30)[$r12];;
     _32(0x3c64140c),        //lo $r24r25r26r27 = 80 (0x50)[$r12];;
     _32(0x3c741c0c),        //lo $r28r29r30r31 = 112 (0x70)[$r12];;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130480c),        //addd $r12 = $r12, 288 (0x120);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0x28490a0c),        //sq 40 (0x28)[$r12] = $r18r19;;
     _32(0x28550e0c),        //so 56 (0x38)[$r12] = $r20r21r22r23;;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741080c),        //sd 32 (0x20)[$r12] = $r16;;
     _32(0x2761160c),        //sd 88 (0x58)[$r12] = $r24;;
     _32(0x6138060c),        //addd $r14 = $r12, 24 (0x18);;
     _32(0x603c0005),        //make $r15 = 5 (0x5);;
     _32(0x263d170e),        //sw 92 (0x5c)[$r14] = $r15;;
     _32(0x303c170e),        //lwz $r15 = 92 (0x5c)[$r14];;
     _32(0x6963f00f),        //sxwd $r24 = $r15;;
     _32(0x6a200018),        //copyd $r8 = $r24;;
     _32(0x60240000),        //make $r9 = 0 (0x0);;
     _32(0x7b622f48),        //srld $r24 = $r8, 61 (0x3d);;
     _32(0x795e20c9),        //slld $r23 = $r9, 3 (0x3);;
     _32(0x7a5d05d8),        //ord $r23 = $r24, $r23;;
     _32(0x795a20c8),        //slld $r22 = $r8, 3 (0x3);;
     _32(0x6923f00f),        //sxwd $r8 = $r15;;
     _32(0x6120ffc8),        //addd $r8 = $r8, -1 (0xffffffff);;
     _32(0x2721180e),        //sd 96 (0x60)[$r14] = $r8;;
     _32(0x6923f00f),        //sxwd $r8 = $r15;;
     _32(0x6a180008),        //copyd $r6 = $r8;;
     _32(0x601c0000),        //make $r7 = 0 (0x0);;
     _32(0x7b222f46),        //srld $r8 = $r6, 61 (0x3d);;
     _32(0x795620c7),        //slld $r21 = $r7, 3 (0x3);;
     _32(0x7a550548),        //ord $r21 = $r8, $r21;;
     _32(0x795220c6),        //slld $r20 = $r6, 3 (0x3);;
     _32(0x691bf00f),        //sxwd $r6 = $r15;;
     _32(0x6a100006),        //copyd $r4 = $r6;;
     _32(0x60140000),        //make $r5 = 0 (0x0);;
     _32(0x7b1a2f44),        //srld $r6 = $r4, 61 (0x3d);;
     _32(0x794e20c5),        //slld $r19 = $r5, 3 (0x3);;
     _32(0x7a4d04c6),        //ord $r19 = $r6, $r19;;
     _32(0x794a20c4),        //slld $r18 = $r4, 3 (0x3);;
     _32(0x694bf00f),        //sxwd $r18 = $r15;;
     _32(0x6913f00f),        //sxwd $r4 = $r15;;
     _32(0x6a080004),        //copyd $r2 = $r4;;
     _32(0x600c0000),        //make $r3 = 0 (0x0);;
     _32(0x7b122f42),        //srld $r4 = $r2, 61 (0x3d);;
     _32(0x794620c3),        //slld $r17 = $r3, 3 (0x3);;
     _32(0x7a450444),        //ord $r17 = $r4, $r17;;
     _32(0x794220c2),        //slld $r16 = $r2, 3 (0x3);;
     _32(0x690bf00f),        //sxwd $r2 = $r15;;
     _32(0x610807c2),        //addd $r2 = $r2, 31 (0x1f);;
     _32(0x7b0a2142),        //srld $r2 = $r2, 5 (0x5);;
     _32(0x790a2142),        //slld $r2 = $r2, 5 (0x5);;
     _32(0x75310302),        //sbfd $r12 = $r2, $r12;;
     _32(0x6a08000c),        //copyd $r2 = $r12;;
     _32(0x61080002),        //addd $r2 = $r2, 0 (0x0);;
     _32(0x2709140e),        //sd 80 (0x50)[$r14] = $r2;;
     _32(0x690bf00f),        //sxwd $r2 = $r15;;
     _32(0x6a000002),        //copyd $r0 = $r2;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x7b0a2f40),        //srld $r2 = $r0, 61 (0x3d);;
     _32(0x792e20c1),        //slld $r11 = $r1, 3 (0x3);;
     _32(0x7a2d02c2),        //ord $r11 = $r2, $r11;;
     _32(0x792a20c0),        //slld $r10 = $r0, 3 (0x3);;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x610007c0),        //addd $r0 = $r0, 31 (0x1f);;
     _32(0x7b022140),        //srld $r0 = $r0, 5 (0x5);;
     _32(0x79022140),        //slld $r0 = $r0, 5 (0x5);;
     _32(0x75310300),        //sbfd $r12 = $r0, $r12;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x61000000),        //addd $r0 = $r0, 0 (0x0);;
     _32(0x2701120e),        //sd 72 (0x48)[$r14] = $r0;;
     _32(0x3800140e),        //ld $r0 = 80 (0x50)[$r14];;
     _32(0x60040030),        //make $r1 = 48 (0x30);;
     _32(0x24050000),        //sb 0 (0x0)[$r0] = $r1;;
     _32(0x3800140e),        //ld $r0 = 80 (0x50)[$r14];;
     _32(0x60040031),        //make $r1 = 49 (0x31);;
     _32(0x24050040),        //sb 1 (0x1)[$r0] = $r1;;
     _32(0x3800140e),        //ld $r0 = 80 (0x50)[$r14];;
     _32(0x60040032),        //make $r1 = 50 (0x32);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x3800140e),        //ld $r0 = 80 (0x50)[$r14];;
     _32(0x60040033),        //make $r1 = 51 (0x33);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x3800140e),        //ld $r0 = 80 (0x50)[$r14];;
     _32(0x60040034),        //make $r1 = 52 (0x34);;
     _32(0x24050100),        //sb 4 (0x4)[$r0] = $r1;;
     _32(0x3800120e),        //ld $r0 = 72 (0x48)[$r14];;
     _32(0x60040035),        //make $r1 = 53 (0x35);;
     _32(0x24050000),        //sb 0 (0x0)[$r0] = $r1;;
     _32(0x3800120e),        //ld $r0 = 72 (0x48)[$r14];;
     _32(0x60040036),        //make $r1 = 54 (0x36);;
     _32(0x24050040),        //sb 1 (0x1)[$r0] = $r1;;
     _32(0x3800120e),        //ld $r0 = 72 (0x48)[$r14];;
     _32(0x60040037),        //make $r1 = 55 (0x37);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x3800120e),        //ld $r0 = 72 (0x48)[$r14];;
     _32(0x60040038),        //make $r1 = 56 (0x38);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x3800120e),        //ld $r0 = 72 (0x48)[$r14];;
     _32(0x60040039),        //make $r1 = 57 (0x39);;
     _32(0x24050100),        //sb 4 (0x4)[$r0] = $r1;;
     _32(0x6a54000c),        //copyd $r21 = $r12;;
     _32(0x610007d2),        //addd $r0 = $r18, 31 (0x1f);;
     _32(0x7b022140),        //srld $r0 = $r0, 5 (0x5);;
     _32(0x79022140),        //slld $r0 = $r0, 5 (0x5);;
     _32(0x75310300),        //sbfd $r12 = $r0, $r12;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x614c0000),        //addd $r19 = $r0, 0 (0x0);;
     _32(0x3804140e),        //ld $r1 = 80 (0x50)[$r14];;
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x6a080012),        //copyd $r2 = $r18;;
     _32(0x1800006c),        //call 16de0 <memcpy>;;
     _32(0x610007d2),        //addd $r0 = $r18, 31 (0x1f);;
     _32(0x7b022140),        //srld $r0 = $r0, 5 (0x5);;
     _32(0x79022140),        //slld $r0 = $r0, 5 (0x5);;
     _32(0x75310300),        //sbfd $r12 = $r0, $r12;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x61500000),        //addd $r20 = $r0, 0 (0x0);;
     _32(0x3804120e),        //ld $r1 = 72 (0x48)[$r14];;
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0x6a080012),        //copyd $r2 = $r18;;
     _32(0x18000062),        //call 16de0 <memcpy>;;
     _32(0x6a080014),        //copyd $r2 = $r20;;
     _32(0x6a040013),        //copyd $r1 = $r19;;
     _32(0x3000170e),        //lwz $r0 = 92 (0x5c)[$r14];;
     _32(0x1fffff10),        //call 168a8 <foo>;;
     _32(0x6a300015),        //copyd $r12 = $r21;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x18000009)        //call 16c98 <exit>;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000179),        //call 17268 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980008ad),        //call 18f40 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x980001d5),        //call 17400 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x00000000800000fce000f000),        //make $r0 = 259008 (0x3f3c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 16cd4 <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x9800089b),        //call 18f40 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110101010001000; //0x16a88
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(bar, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo, 0b00010110100010101000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110101010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110110001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit, 0b00010110110010011000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
