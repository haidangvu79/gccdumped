// executing vfprintf_chk_1 test 
val k1_vfprintf_chk_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_vfprintf_chk_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let __vfprintf_chk: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x26050c0c),        //sw 48 (0x30)[$r12] = $r1;;
     _32(0x27090a0c),        //sd 40 (0x28)[$r12] = $r2;;
     _32(0x270d080c),        //sd 32 (0x20)[$r12] = $r3;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3808080c),        //ld $r2 = 32 (0x20)[$r12];;
     _32(0x38040a0c),        //ld $r1 = 40 (0x28)[$r12];;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x18000f23),        //call 1a4e8 <vfprintf>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let inner: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _64(0x00000000f901b280),        //compw.gtu $r0 = $r0, 10 (0xa);;
     _32(0x0c008ec0),        //cb.wnez $r0? 171a8 <inner+0x930>;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _96(0x0000000080000101e1000000),        //addd $r0 = $r0, 263168 (0x40400);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x0fd80000),        //igoto $r0;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _96(0x0000000080000100e000f000),        //make $r0 = 263104 (0x403c0);;
     _32(0x18000349),        //call 17640 <fwrite>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 1693c <inner+0xc4>;;
     _32(0x18000268),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f000),        //make $r2 = 263104 (0x403c0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1fffffa9),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b140),        //compw.eq $r0 = $r0, 5 (0x5);;
     _32(0x0c000080),        //cb.wnez $r0? 16994 <inner+0x11c>;;
     _32(0x18000252),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08008040),        //cb.dnez $r0? 171ac <inner+0x934>;;
     _32(0x1800024b),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60080006),        //make $r2 = 6 (0x6);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _96(0x0000000080000100e000f200),        //make $r0 = 263112 (0x403c8);;
     _32(0x18000314),        //call 17640 <fwrite>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16a10 <inner+0x198>;;
     _32(0x18000233),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f200),        //make $r2 = 263112 (0x403c8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1fffff74),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b180),        //compw.eq $r0 = $r0, 6 (0x6);;
     _32(0x0c000080),        //cb.wnez $r0? 16a68 <inner+0x1f0>;;
     _32(0x1800021d),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08007380),        //cb.dnez $r0? 171b4 <inner+0x93c>;;
     _32(0x18000216),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000061),        //make $r0 = 97 (0x61);;
     _32(0x1800025b),        //call 17420 <fputc>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ad4 <inner+0x25c>;;
     _32(0x18000202),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f400),        //make $r2 = 263120 (0x403d0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1fffff43),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16b2c <inner+0x2b4>;;
     _32(0x180001ec),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x080067c0),        //cb.dnez $r0? 171bc <inner+0x944>;;
     _32(0x180001e5),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16b78 <inner+0x300>;;
     _32(0x180001d9),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f600),        //make $r2 = 263128 (0x403d8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1fffff1a),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16bc8 <inner+0x350>;;
     _32(0x180001c5),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08005e80),        //cb.dnez $r0? 171c4 <inner+0x94c>;;
     _32(0x180001be),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffeff),        //call 16820 <__vfprintf_chk>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16c44 <inner+0x3cc>;;
     _32(0x180001a6),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffee7),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b140),        //compw.eq $r0 = $r0, 5 (0x5);;
     _32(0x0c000080),        //cb.wnez $r0? 16c9c <inner+0x424>;;
     _32(0x18000190),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x080051c0),        //cb.dnez $r0? 171cc <inner+0x954>;;
     _32(0x18000189),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffeca),        //call 16820 <__vfprintf_chk>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16d18 <inner+0x4a0>;;
     _32(0x18000171),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffeb2),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b180),        //compw.eq $r0 = $r0, 6 (0x6);;
     _32(0x0c000080),        //cb.wnez $r0? 16d70 <inner+0x4f8>;;
     _32(0x1800015b),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08004500),        //cb.dnez $r0? 171d4 <inner+0x95c>;;
     _32(0x18000154),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe95),        //call 16820 <__vfprintf_chk>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16dec <inner+0x574>;;
     _32(0x1800013c),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe7d),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16e44 <inner+0x5cc>;;
     _32(0x18000126),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08003840),        //cb.dnez $r0? 171dc <inner+0x964>;;
     _32(0x1800011f),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe60),        //call 16820 <__vfprintf_chk>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ec0 <inner+0x648>;;
     _32(0x18000107),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe48),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16f10 <inner+0x698>;;
     _32(0x180000f3),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08002c00),        //cb.dnez $r0? 171e4 <inner+0x96c>;;
     _32(0x180000ec),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008fa00),        //make $r2 = 263144 (0x403e8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe2d),        //call 16820 <__vfprintf_chk>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16f8c <inner+0x714>;;
     _32(0x180000d4),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008fa00),        //make $r2 = 263144 (0x403e8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe15),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16fe4 <inner+0x76c>;;
     _32(0x180000be),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08001f40),        //cb.dnez $r0? 171ec <inner+0x974>;;
     _32(0x180000b7),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008fc00),        //make $r2 = 263152 (0x403f0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffdf8),        //call 16820 <__vfprintf_chk>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 17060 <inner+0x7e8>;;
     _32(0x1800009f),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008fc00),        //make $r2 = 263152 (0x403f0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffde0),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b1c0),        //compw.eq $r0 = $r0, 7 (0x7);;
     _32(0x0c000080),        //cb.wnez $r0? 170b8 <inner+0x840>;;
     _32(0x18000089),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08001280),        //cb.dnez $r0? 171f4 <inner+0x97c>;;
     _32(0x18000082),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008fe00),        //make $r2 = 263160 (0x403f8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffdc3),        //call 16820 <__vfprintf_chk>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 17134 <inner+0x8bc>;;
     _32(0x1800006a),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _96(0x0000000080000100e008fe00),        //make $r2 = 263160 (0x403f8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffdab),        //call 16820 <__vfprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 1718c <inner+0x914>;;
     _32(0x18000054),        //call 172d8 <abort>;;
     _96(0x000000008000011be0005000),        //make $r0 = 290112 (0x46d40);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x080005c0),        //cb.dnez $r0? 171fc <inner+0x984>;;
     _32(0x1800004d),        //call 172d8 <abort>;;
     _32(0x1800004c),        //call 172d8 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000014),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000012),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000010),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x1000000e),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x1000000c),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x1000000a),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000008),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000006),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000004),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000002),        //goto 17200 <inner+0x988>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffd94),        //call 16878 <inner>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffd92),        //call 16878 <inner>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffd90),        //call 16878 <inner>;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffffd8e),        //call 16878 <inner>;;
     _96(0x0000000080000100e004f000),        //make $r1 = 263104 (0x403c0);;
     _32(0x60000004),        //make $r0 = 4 (0x4);;
     _32(0x1ffffd89),        //call 16878 <inner>;;
     _96(0x0000000080000100e004f200),        //make $r1 = 263112 (0x403c8);;
     _32(0x60000005),        //make $r0 = 5 (0x5);;
     _32(0x1ffffd84),        //call 16878 <inner>;;
     _96(0x0000000080000100e004f400),        //make $r1 = 263120 (0x403d0);;
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x1ffffd7f),        //call 16878 <inner>;;
     _96(0x0000000080000100e004f600),        //make $r1 = 263128 (0x403d8);;
     _32(0x60000007),        //make $r0 = 7 (0x7);;
     _32(0x1ffffd7a),        //call 16878 <inner>;;
     _32(0x60040078),        //make $r1 = 120 (0x78);;
     _32(0x60000008),        //make $r0 = 8 (0x8);;
     _32(0x1ffffd77),        //call 16878 <inner>;;
     _96(0x0000000080000100e004f200),        //make $r1 = 263112 (0x403c8);;
     _32(0x60000009),        //make $r0 = 9 (0x9);;
     _32(0x1ffffd72),        //call 16878 <inner>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6000000a),        //make $r0 = 10 (0xa);;
     _32(0x1ffffd6f),        //call 16878 <inner>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980002e7),        //call 17e80 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98002cef),        //call 226a8 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let __libc_fini_array: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _96(0x800000dca749040ce0480000),        //make $r18 = 225280 (0x37000)
     _32(0x00000000),        //sd 16 (0x10)[$r12] = $r18;;
     _96(0x800000dca739020ce5380012),        //sbfd $r14 = $r18, 225280 (0x37000)
     _32(0x00000000),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa3a20ce),        //srad $r14 = $r14, 3 (0x3)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x0880014e),        //cb.deqz $r14? 1733c <__libc_fini_array+0x44>;;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x3802f392),        //ld.xs $r0 = $r14[$r18];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x087fff4e),        //cb.dnez $r14? 1732c <__libc_fini_array+0x34>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let _fputc_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xf84cffc1),        //zxwd $r19 = $r1
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xea380002),        //copyd $r14 = $r2
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x88800100),        //cb.deqz $r0? 17384 <_fputc_r+0x2c>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x30041400),        //lwz $r1 = 80 (0x50)[$r0];;
     _32(0x0c800641),        //cb.weqz $r1? 173e4 <_fputc_r+0x8c>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b000140),        //cb.odd $r0? 1739c <_fputc_r+0x44>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c800780),        //cb.weqz $r0? 17410 <_fputc_r+0xb8>;;
     _32(0x98000183),        //call 179a8 <_putc_r>
     _32(0xfa040013),        //copyw $r1 = $r19
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x6a08000e),        //copyd $r2 = $r14;;
     _32(0xfa480000),        //copyw $r18 = $r0
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x0b000141),        //cb.odd $r1? 173c8 <_fputc_r+0x70>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c800280),        //cb.weqz $r0? 173ec <_fputc_r+0x94>;;
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x180013dd),        //call 1c358 <__sinit>;;
     _32(0x17ffffe7),        //goto 17384 <_fputc_r+0x2c>;;
     _32(0x98000143),        //call 178f8 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x980000f6),        //call 177e8 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffe1),        //goto 1739c <_fputc_r+0x44>;;
     _32(0x7f03f000)        //nop ;;
 |];

let fputc: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x08000000880000fce0081000),        //make $r2 = 258112 (0x3f040);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xf84cffc0),        //zxwd $r19 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x38480002),        //ld $r18 = 0 (0x0)[$r2];;
     _32(0x088000d2),        //cb.deqz $r18? 17458 <fputc+0x38>;;
     _32(0x30001412),        //lwz $r0 = 80 (0x50)[$r18];;
     _32(0x0c800640),        //cb.weqz $r0? 174b8 <fputc+0x98>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b000140),        //cb.odd $r0? 17470 <fputc+0x50>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c8007c0),        //cb.weqz $r0? 174e8 <fputc+0xc8>;;
     _32(0x9800014e),        //call 179a8 <_putc_r>
     _32(0xfa040013),        //copyw $r1 = $r19
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x6a08000e),        //copyd $r2 = $r14;;
     _32(0xfa480000),        //copyw $r18 = $r0
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x0b000141),        //cb.odd $r1? 1749c <fputc+0x7c>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c8002c0),        //cb.weqz $r0? 174c4 <fputc+0xa4>;;
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x980013a8),        //call 1c358 <__sinit>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x17ffffe6),        //goto 17458 <fputc+0x38>;;
     _32(0x9800010d),        //call 178f8 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x980000c0),        //call 177e8 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffe0),        //goto 17470 <fputc+0x50>;;
     _32(0x00000000)        //errop ;;
 |];

let _fwrite_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0xea480003),        //copyd $r18 = $r3
     _32(0xe10c0e0c),        //addd $r3 = $r12, 56 (0x38)
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849040c),        //sq 16 (0x10)[$r12] = $r18r19;;
     _32(0xea500002),        //copyd $r20 = $r2
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _32(0x2851080c),        //sq 32 (0x20)[$r12] = $r20r21;;
     _32(0xea380004),        //copyd $r14 = $r4
     _32(0xd4541512),        //muld $r21 = $r18, $r20
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x27410c0c),        //sd 48 (0x30)[$r12] = $r16;;
     _32(0x27050e0c),        //sd 56 (0x38)[$r12] = $r1;;
     _32(0x270d120c),        //sd 72 (0x48)[$r12] = $r3;;
     _32(0x2609140c),        //sw 80 (0x50)[$r12] = $r2;;
     _32(0x2755100c),        //sd 64 (0x40)[$r12] = $r21;;
     _32(0x88800100),        //cb.deqz $r0? 1754c <_fwrite_r+0x54>
     _32(0x2755160c),        //sd 88 (0x58)[$r12] = $r21;;
     _32(0x30041400),        //lwz $r1 = 80 (0x50)[$r0];;
     _32(0x0c800b41),        //cb.weqz $r1? 175fc <_fwrite_r+0x104>;;
     _32(0x3008420e),        //lwz $r2 = 264 (0x108)[$r14];;
     _32(0x2804040e),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0x8b000142),        //cb.odd $r2? 17568 <_fwrite_r+0x70>
     _32(0x6403f001),        //zxhd $r0 = $r1;;
     _64(0x00000000f8088000),        //andw $r2 = $r0, 512 (0x200);;
     _32(0x0c800c42),        //cb.weqz $r2? 17628 <_fwrite_r+0x130>;;
     _64(0x00000008f8000000),        //andw $r0 = $r0, 8192 (0x2000);;
     _32(0x0c000200),        //cb.wnez $r0? 17590 <_fwrite_r+0x98>;;
     _64(0xb000420efa040001),        //orw $r1 = $r1, 8192 (0x2000)
     _32(0x00000008),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x2505040e),        //sh 16 (0x10)[$r14] = $r1;;
     _64(0x07fffff7f800ffc0),        //andw $r0 = $r0, -8193 (0xffffffffffffdfff);;
     _32(0x2601420e),        //sw 264 (0x108)[$r14] = $r0;;
     _32(0x9800157c),        //call 1cb80 <__sfvwrite_r>
     _32(0xe108120c),        //addd $r2 = $r12, 72 (0x48)
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x0c800640),        //cb.weqz $r0? 17604 <_fwrite_r+0x10c>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b800380),        //cb.even $r0? 175e0 <_fwrite_r+0xe8>;;
     _32(0xea040014),        //copyd $r1 = $r20
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x98003ddd),        //call 26d28 <__udivdi3>
     _32(0x75010540),        //sbfd $r0 = $r0, $r21;;
     _32(0x6a480000),        //copyd $r18 = $r0;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x3c48040c),        //lq $r18r19 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c50080c),        //lq $r20r21 = 32 (0x20)[$r12];;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c7ffc00),        //cb.wnez $r0? 175ac <_fwrite_r+0xb4>;;
     _32(0x980000c2),        //call 178f8 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffed),        //goto 175ac <_fwrite_r+0xb4>;;
     _32(0x18001357),        //call 1c358 <__sinit>;;
     _32(0x17ffffd3),        //goto 1754c <_fwrite_r+0x54>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b7ffb80),        //cb.odd $r0? 175c0 <_fwrite_r+0xc8>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c7ffa80),        //cb.wnez $r0? 175c0 <_fwrite_r+0xc8>;;
     _32(0x980000b7),        //call 178f8 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffe7),        //goto 175c0 <_fwrite_r+0xc8>;;
     _32(0x98000070),        //call 177e8 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x2804040e),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0x97ffffcd),        //goto 17568 <_fwrite_r+0x70>
     _32(0x6403f001),        //zxhd $r0 = $r1;;
     _32(0x7f03f000)        //nop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010111001000011000; //0x17218
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__vfprintf_chk, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(inner, 0b00010110100001111000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010111001000011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111001011011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_fini_array, 0b00010111001011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fputc_r, 0b00010111001101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fputc, 0b00010111010000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fwrite_r, 0b00010111010011111000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
