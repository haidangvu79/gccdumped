// executing 20020508_1 test 
val k1_20020508_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_20020508_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000200),        //sbfw $r0 = $r0, 8 (0x8);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79027002),        //sllw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001af101b0c0),        //compw.eq $r0 = $r0, 835 (0x343);;
     _32(0x0c000080),        //cb.wnez $r0? 168a8 <main+0x88>;;
     _32(0x180001fd),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x7b023100),        //srlw $r0 = $r0, 4 (0x4);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023100),        //sllw $r0 = $r0, 4 (0x4);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001af101b0c0),        //compw.eq $r0 = $r0, 835 (0x343);;
     _32(0x0c000080),        //cb.wnez $r0? 168f8 <main+0xd8>;;
     _32(0x180001e9),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000400),        //sbfw $r0 = $r0, 16 (0x10);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79027002),        //sllw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00791a79f101b0c0),        //compw.eq $r0 = $r0, 253972259 (0xf234f23);;
     _32(0x0c000080),        //cb.wnez $r0? 16974 <main+0x154>;;
     _32(0x180001ca),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7b023100),        //srlw $r0 = $r0, 4 (0x4);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023300),        //sllw $r0 = $r0, 12 (0xc);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00791a79f101b0c0),        //compw.eq $r0 = $r0, 253972259 (0xf234f23);;
     _32(0x0c000080),        //cb.wnez $r0? 169c4 <main+0x1a4>;;
     _32(0x180001b6),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7b027001),        //srlw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x30080000),        //lwz $r2 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000800),        //sbfw $r0 = $r0, 32 (0x20);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79027002),        //sllw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x02000079f101b0c0),        //compw.eq $r0 = $r0, 1073745699 (0x40000f23);;
     _32(0x0c000080),        //cb.wnez $r0? 16a38 <main+0x218>;;
     _32(0x18000199),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7f023100),        //rorw $r0 = $r0, 4 (0x4);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x02000079f101b0c0),        //compw.eq $r0 = $r0, 1073745699 (0x40000f23);;
     _32(0x0c000080),        //cb.wnez $r0? 16a60 <main+0x240>;;
     _32(0x1800018f),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7b066001),        //srld $r1 = $r1, $r0;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75001000),        //sbfw $r0 = $r0, 64 (0x40);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79026002),        //slld $r0 = $r2, $r0;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x040000008003c8d1e00459c0),        //make $r1 = 9223372037108745575 (0x800000000f234567);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16ad0 <main+0x2b0>;;
     _32(0x18000173),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60040004),        //make $r1 = 4 (0x4);;
     _32(0x75080001),        //negw $r2 = $r1;;
     _32(0x7b066040),        //srld $r1 = $r0, $r1;;
     _32(0x79026080),        //slld $r0 = $r0, $r2;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x040000008003c8d1e00459c0),        //make $r1 = 9223372037108745575 (0x800000000f234567);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16b0c <main+0x2ec>;;
     _32(0x18000164),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7b066001),        //srld $r1 = $r1, $r0;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75001000),        //sbfw $r0 = $r0, 64 (0x40);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79026002),        //slld $r0 = $r2, $r0;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x000791a2859e2af3e0047bc0),        //make $r1 = 68174490360335855 (0xf2345678abcdef);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16b7c <main+0x35c>;;
     _32(0x18000148),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60040004),        //make $r1 = 4 (0x4);;
     _32(0x75080001),        //negw $r2 = $r1;;
     _32(0x7b066040),        //srld $r1 = $r0, $r1;;
     _32(0x79026080),        //slld $r0 = $r0, $r2;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x000791a2859e2af3e0047bc0),        //make $r1 = 68174490360335855 (0xf2345678abcdef);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16bb8 <main+0x398>;;
     _32(0x18000139),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000e00),        //make $r0 = 258104 (0x3f038);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7b066001),        //srld $r1 = $r1, $r0;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000e00),        //make $r0 = 258104 (0x3f038);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75001000),        //sbfw $r0 = $r0, 64 (0x40);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79026002),        //slld $r0 = $r2, $r0;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x0791a2b3862af37be004c000),        //make $r1 = 17452669532245978880 (0xf2345678abcdef00);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16c28 <main+0x408>;;
     _32(0x1800011d),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60040004),        //make $r1 = 4 (0x4);;
     _32(0x75080001),        //negw $r2 = $r1;;
     _32(0x79066040),        //slld $r1 = $r0, $r1;;
     _32(0x7b026080),        //srld $r0 = $r0, $r2;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x0791a2b3862af37be004c000),        //make $r1 = 17452669532245978880 (0xf2345678abcdef00);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16c64 <main+0x444>;;
     _32(0x1800010e),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x79027001),        //sllw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000200),        //sbfw $r0 = $r0, 8 (0x8);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027002),        //sraw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001af101b0c0),        //compw.eq $r0 = $r0, 835 (0x343);;
     _32(0x0c000080),        //cb.wnez $r0? 16ce0 <main+0x4c0>;;
     _32(0x180000ef),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023100),        //sllw $r0 = $r0, 4 (0x4);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x7b023100),        //srlw $r0 = $r0, 4 (0x4);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001af101b0c0),        //compw.eq $r0 = $r0, 835 (0x343);;
     _32(0x0c000080),        //cb.wnez $r0? 16d30 <main+0x510>;;
     _32(0x180000db),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x79027001),        //sllw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000400),        //sbfw $r0 = $r0, 16 (0x10);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027002),        //sraw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000791af101b3c0),        //compw.eq $r0 = $r0, 992079 (0xf234f);;
     _32(0x0c000080),        //cb.wnez $r0? 16dac <main+0x58c>;;
     _32(0x180000bc),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023100),        //sllw $r0 = $r0, 4 (0x4);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7b023300),        //srlw $r0 = $r0, 12 (0xc);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000791af101b3c0),        //compw.eq $r0 = $r0, 992079 (0xf234f);;
     _32(0x0c000080),        //cb.wnez $r0? 16dfc <main+0x5dc>;;
     _32(0x180000a8),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x79027001),        //sllw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x30080000),        //lwz $r2 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000800),        //sbfw $r0 = $r0, 32 (0x20);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7b027002),        //srlw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000791af101b000),        //compw.eq $r0 = $r0, 992064 (0xf2340);;
     _32(0x0c000080),        //cb.wnez $r0? 16e70 <main+0x650>;;
     _32(0x1800008b),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7e023100),        //rolw $r0 = $r0, 4 (0x4);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000791af101b000),        //compw.eq $r0 = $r0, 992064 (0xf2340);;
     _32(0x0c000080),        //cb.wnez $r0? 16e98 <main+0x678>;;
     _32(0x18000081),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x79066001),        //slld $r1 = $r1, $r0;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75001000),        //sbfw $r0 = $r0, 64 (0x40);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7b026002),        //srld $r0 = $r2, $r0;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _64(0x03c8d159e101e000),        //compd.eq $r0 = $r0, 65016260480 (0xf23456780);;
     _32(0x08000080),        //cb.dnez $r0? 16f00 <main+0x6e0>;;
     _32(0x18000067),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60040004),        //make $r1 = 4 (0x4);;
     _32(0x75080001),        //negw $r2 = $r1;;
     _32(0x79066040),        //slld $r1 = $r0, $r1;;
     _32(0x7b026080),        //srld $r0 = $r0, $r2;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _64(0x03c8d159e101e000),        //compd.eq $r0 = $r0, 65016260480 (0xf23456780);;
     _32(0x08000080),        //cb.dnez $r0? 16f34 <main+0x714>;;
     _32(0x1800005a),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x79066001),        //slld $r1 = $r1, $r0;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75001000),        //sbfw $r0 = $r0, 64 (0x40);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7b026002),        //srld $r0 = $r2, $r0;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x0791a2b3862af37be004c000),        //make $r1 = 17452669532245978880 (0xf2345678abcdef00);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16fa4 <main+0x784>;;
     _32(0x1800003e),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60040004),        //make $r1 = 4 (0x4);;
     _32(0x75080001),        //negw $r2 = $r1;;
     _32(0x79066040),        //slld $r1 = $r0, $r1;;
     _32(0x7b026080),        //srld $r0 = $r0, $r2;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x0791a2b3862af37be004c000),        //make $r1 = 17452669532245978880 (0xf2345678abcdef00);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16fe0 <main+0x7c0>;;
     _32(0x1800002f),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000e00),        //make $r0 = 258104 (0x3f038);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x79066001),        //slld $r1 = $r1, $r0;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000e00),        //make $r0 = 258104 (0x3f038);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75001000),        //sbfw $r0 = $r0, 64 (0x40);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7b026002),        //srld $r0 = $r2, $r0;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x000791a2859e2af3e0047bc0),        //make $r1 = 68174490360335855 (0xf2345678abcdef);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 17050 <main+0x830>;;
     _32(0x18000013),        //call 17098 <abort>;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60040004),        //make $r1 = 4 (0x4);;
     _32(0x75080001),        //negw $r2 = $r1;;
     _32(0x7b066040),        //srld $r1 = $r0, $r1;;
     _32(0x79026080),        //slld $r0 = $r0, $r2;;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _96(0x000791a2859e2af3e0047bc0),        //make $r1 = 68174490360335855 (0xf2345678abcdef);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 1708c <main+0x86c>;;
     _32(0x18000004),        //call 17098 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1800000a),        //call 170b8 <exit>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000105),        //call 174b8 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000839),        //call 19190 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit_: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000161),        //call 17650 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x0000000080000100e000f000),        //make $r0 = 263104 (0x403c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 170f4 <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x98000827),        //call 19190 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110100000100000; //0x16820
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111000010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit_, 0b00010111000010111000, num_instr, mI);
//print_list_instr(mI);
mD = Execute_Program(adr_start,adr_end_main,num_instr,mI,mD,icount,rcount,wcount);
}
