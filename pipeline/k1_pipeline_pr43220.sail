// executing pipeline pr43220.c.out.dumped test 
val k1_pipeline_pr43220: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_pr43220() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let main: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2849040c),        //sq 16 (0x10)[$r12] = $r18r19;;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2851080c),        //sq 32 (0x20)[$r12] = $r20r21;;
     _32(0x27590c0c),        //sd 48 (0x30)[$r12] = $r22;;
     _32(0x6138000c),        //addd $r14 = $r12, 0 (0x0);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601150e),        //sw 84 (0x54)[$r14] = $r0;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x6a580000),        //copyd $r22 = $r0;;
     _32(0x3004150e),        //lwz $r1 = 84 (0x54)[$r14];;
     _64(0x00041893e00074c0),        //make $r0 = 274877907 (0x10624dd3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a3e3180),        //sraw $r15 = $r0, 6 (0x6);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x753d13c0),        //sbfw $r15 = $r0, $r15;;
     _32(0x7a00000f),        //copyw $r0 = $r15;;
     _32(0x79023140),        //sllw $r0 = $r0, 5 (0x5);;
     _32(0x7501100f),        //sbfw $r0 = $r15, $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x710113c0),        //addw $r0 = $r0, $r15;;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x6903f001),        //sxwd $r0 = $r1;;
     _32(0x6100ffc0),        //addd $r0 = $r0, -1 (0xffffffff);;
     _32(0x2701160e),        //sd 88 (0x58)[$r14] = $r0;;
     _32(0x6903f001),        //sxwd $r0 = $r1;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x600c0000),        //make $r3 = 0 (0x0);;
     _32(0x7b022ec2),        //srld $r0 = $r2, 59 (0x3b);;
     _32(0x792e2143),        //slld $r11 = $r3, 5 (0x5);;
     _32(0x7a2d02c0),        //ord $r11 = $r0, $r11;;
     _32(0x792a2142),        //slld $r10 = $r2, 5 (0x5);;
     _32(0x6903f001),        //sxwd $r0 = $r1;;
     _32(0x6a100000),        //copyd $r4 = $r0;;
     _32(0x60140000),        //make $r5 = 0 (0x0);;
     _32(0x7b022ec4),        //srld $r0 = $r4, 59 (0x3b);;
     _32(0x79462145),        //slld $r17 = $r5, 5 (0x5);;
     _32(0x7a450440),        //ord $r17 = $r0, $r17;;
     _32(0x79422144),        //slld $r16 = $r4, 5 (0x5);;
     _32(0x6903f001),        //sxwd $r0 = $r1;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x610000c0),        //addd $r0 = $r0, 3 (0x3);;
     _32(0x610007c0),        //addd $r0 = $r0, 31 (0x1f);;
     _32(0x7b022140),        //srld $r0 = $r0, 5 (0x5);;
     _32(0x79022140),        //slld $r0 = $r0, 5 (0x5);;
     _32(0x75310300),        //sbfd $r12 = $r0, $r12;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x610000c0),        //addd $r0 = $r0, 3 (0x3);;
     _32(0x7b022080),        //srld $r0 = $r0, 2 (0x2);;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x2701120e),        //sd 72 (0x48)[$r14] = $r0;;
     _32(0x3800120e),        //ld $r0 = 72 (0x48)[$r14];;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3004150e),        //lwz $r1 = 84 (0x54)[$r14];;
     _64(0x00041893e00074c0),        //make $r0 = 274877907 (0x10624dd3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a3e3180),        //sraw $r15 = $r0, 6 (0x6);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x753d13c0),        //sbfw $r15 = $r0, $r15;;
     _32(0x7a00000f),        //copyw $r0 = $r15;;
     _32(0x79023140),        //sllw $r0 = $r0, 5 (0x5);;
     _32(0x7501100f),        //sbfw $r0 = $r15, $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x710113c0),        //addw $r0 = $r0, $r15;;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800120e),        //ld $r0 = 72 (0x48)[$r14];;
     _32(0x6907f001),        //sxwd $r1 = $r1;;
     _32(0x603c0002),        //make $r15 = 2 (0x2);;
     _32(0x263ff040),        //sw.xs $r1[$r0] = $r15;;
     _96(0x0000000080000117e0042600),        //make $r1 = 285848 (0x45c98);;
     _32(0x3800120e),        //ld $r0 = 72 (0x48)[$r14];;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3000150e),        //lwz $r0 = 84 (0x54)[$r14];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601150e),        //sw 84 (0x54)[$r14] = $r0;;
     _32(0x6a300016),        //copyd $r12 = $r22;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x6a580000),        //copyd $r22 = $r0;;
     _32(0x3004150e),        //lwz $r1 = 84 (0x54)[$r14];;
     _64(0x00041893e00074c0),        //make $r0 = 274877907 (0x10624dd3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a3e3180),        //sraw $r15 = $r0, 6 (0x6);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x753d13c0),        //sbfw $r15 = $r0, $r15;;
     _32(0x7a00000f),        //copyw $r0 = $r15;;
     _32(0x79023140),        //sllw $r0 = $r0, 5 (0x5);;
     _32(0x7501100f),        //sbfw $r0 = $r15, $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x710113c0),        //addw $r0 = $r0, $r15;;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x6903f001),        //sxwd $r0 = $r1;;
     _32(0x6100ffc0),        //addd $r0 = $r0, -1 (0xffffffff);;
     _32(0x2701100e),        //sd 64 (0x40)[$r14] = $r0;;
     _32(0x6903f001),        //sxwd $r0 = $r1;;
     _32(0x6a180000),        //copyd $r6 = $r0;;
     _32(0x601c0000),        //make $r7 = 0 (0x0);;
     _32(0x7b022ec6),        //srld $r0 = $r6, 59 (0x3b);;
     _32(0x794e2147),        //slld $r19 = $r7, 5 (0x5);;
     _32(0x7a4d04c0),        //ord $r19 = $r0, $r19;;
     _32(0x794a2146),        //slld $r18 = $r6, 5 (0x5);;
     _32(0x6903f001),        //sxwd $r0 = $r1;;
     _32(0x6a200000),        //copyd $r8 = $r0;;
     _32(0x60240000),        //make $r9 = 0 (0x0);;
     _32(0x7b022ec8),        //srld $r0 = $r8, 59 (0x3b);;
     _32(0x79562149),        //slld $r21 = $r9, 5 (0x5);;
     _32(0x7a550540),        //ord $r21 = $r0, $r21;;
     _32(0x79522148),        //slld $r20 = $r8, 5 (0x5);;
     _32(0x6903f001),        //sxwd $r0 = $r1;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x610000c0),        //addd $r0 = $r0, 3 (0x3);;
     _32(0x610007c0),        //addd $r0 = $r0, 31 (0x1f);;
     _32(0x7b022140),        //srld $r0 = $r0, 5 (0x5);;
     _32(0x79022140),        //slld $r0 = $r0, 5 (0x5);;
     _32(0x75310300),        //sbfd $r12 = $r0, $r12;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x610000c0),        //addd $r0 = $r0, 3 (0x3);;
     _32(0x7b022080),        //srld $r0 = $r0, 2 (0x2);;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x27010e0e),        //sd 56 (0x38)[$r14] = $r0;;
     _32(0x38000e0e),        //ld $r0 = 56 (0x38)[$r14];;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3004150e),        //lwz $r1 = 84 (0x54)[$r14];;
     _64(0x00041893e00074c0),        //make $r0 = 274877907 (0x10624dd3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a3e3180),        //sraw $r15 = $r0, 6 (0x6);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x753d13c0),        //sbfw $r15 = $r0, $r15;;
     _32(0x7a00000f),        //copyw $r0 = $r15;;
     _32(0x79023140),        //sllw $r0 = $r0, 5 (0x5);;
     _32(0x7501100f),        //sbfw $r0 = $r15, $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x710113c0),        //addw $r0 = $r0, $r15;;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x38000e0e),        //ld $r0 = 56 (0x38)[$r14];;
     _32(0x6907f001),        //sxwd $r1 = $r1;;
     _32(0x603c0002),        //make $r15 = 2 (0x2);;
     _32(0x263ff040),        //sw.xs $r1[$r0] = $r15;;
     _96(0x0000000080000117e0042600),        //make $r1 = 285848 (0x45c98);;
     _32(0x38000e0e),        //ld $r0 = 56 (0x38)[$r14];;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3000150e),        //lwz $r0 = 84 (0x54)[$r14];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601150e),        //sw 84 (0x54)[$r14] = $r0;;
     _32(0x6a300016),        //copyd $r12 = $r22;;
     _32(0x3000150e),        //lwz $r0 = 84 (0x54)[$r14];;
     _64(0x00007a11f501b7c0),        //compw.gt $r0 = $r0, 999999 (0xf423f);;
     _32(0x0c000080),        //cb.wnez $r0? 16ae4 <main+0x2c4>;;
     _32(0x17ffff5a),        //goto 16848 <main+0x28>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x6130000e),        //addd $r12 = $r14, 0 (0x0);;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48040c),        //lq $r18r19 = 16 (0x10)[$r12];;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c50080c),        //lq $r20r21 = 32 (0x20)[$r12];;
     _32(0x38580c0c),        //ld $r22 = 48 (0x30)[$r12];;
     _32(0x6130180c),        //addd $r12 = $r12, 96 (0x60);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110100000100000; //0x16820
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110100000100000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016820;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, rcount, wcount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, rcount, wcount, adr_end_main);
print_list_data(mD);
}
