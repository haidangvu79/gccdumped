// executing pipeline 20020413_1.c.out.dumped test 
val k1_pipeline_20020413_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_20020413_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let test: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _96(0x01ff800080000000e0000000),        //make $r0 = 4607182418800017408 (0x3ff0000000000000);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26010d0c),        //sw 52 (0x34)[$r12] = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x7c030040),        //fcompd.olt $r0 = $r0, $r1;;
     _32(0x08800100),        //cb.deqz $r0? 16868 <test+0x48>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x70032000),        //fnegd $r0 = $r0;;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x38040a0c),        //ld $r1 = 40 (0x28)[$r12];;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x7e030001),        //fcompd.oge $r0 = $r1, $r0;;
     _32(0x08800440),        //cb.deqz $r0? 168b8 <test+0x98>;;
     _32(0x1000000b),        //goto 168a4 <test+0x84>;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x50027000),        //faddd $r0 = $r0, $r0;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x30000d0c),        //lwz $r0 = 52 (0x34)[$r12];;
     _32(0x71040040),        //addw $r1 = $r0, 1 (0x1);;
     _32(0x26050d0c),        //sw 52 (0x34)[$r12] = $r1;;
     _64(0x00000000f401b240),        //compw.le $r0 = $r0, 9 (0x9);;
     _32(0x0c000080),        //cb.wnez $r0? 168a4 <test+0x84>;;
     _32(0x180003f6),        //call 17878 <abort>;;
     _32(0x38040e0c),        //ld $r1 = 56 (0x38)[$r12];;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x7c030001),        //fcompd.olt $r0 = $r1, $r0;;
     _32(0x087ffcc0),        //cb.dnez $r0? 1687c <test+0x5c>;;
     _32(0x10000017),        //goto 16910 <test+0xf0>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x080004c0),        //cb.dnez $r0? 16910 <test+0xf0>;;
     _32(0x1000000e),        //goto 16900 <test+0xe0>;;
     _96(0x0200000080000000e0040000),        //make $r1 = 4611686018427387904 (0x4000000000000000);;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x18000033),        //call 169a8 <__divdf3>;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x30000d0c),        //lwz $r0 = 52 (0x34)[$r12];;
     _32(0x71040040),        //addw $r1 = $r0, 1 (0x1);;
     _32(0x26050d0c),        //sw 52 (0x34)[$r12] = $r1;;
     _64(0x00000000f401b240),        //compw.le $r0 = $r0, 9 (0x9);;
     _32(0x0c000080),        //cb.wnez $r0? 16900 <test+0xe0>;;
     _32(0x180003df),        //call 17878 <abort>;;
     _32(0x38040a0c),        //ld $r1 = 40 (0x28)[$r12];;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x7c030001),        //fcompd.olt $r0 = $r1, $r0;;
     _32(0x087ffc00),        //cb.dnez $r0? 168cc <test+0xac>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x30040d0c),        //lwz $r1 = 52 (0x34)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0200400080000000e0000000),        //make $r0 = 4613937818241073152 (0x4008000000000000);;
     _32(0x1fffffb4),        //call 16820 <test>;;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0200600080000000e0000000),        //make $r0 = 4615063718147915776 (0x400c000000000000);;
     _32(0x1fffffae),        //call 16820 <test>;;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0200800080000000e0000000),        //make $r0 = 4616189618054758400 (0x4010000000000000);;
     _32(0x1fffffa8),        //call 16820 <test>;;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0200a00080000000e0000000),        //make $r0 = 4617315517961601024 (0x4014000000000000);;
     _32(0x1fffffa2),        //call 16820 <test>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x180003be),        //call 17898 <exit>;;
     _32(0x00000000)        //errop ;;
 |];

let __divdf3: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0x2849080c),        //sq 32 (0x20)[$r12] = $r18r19;;
     _32(0x28550c0c),        //so 48 (0x30)[$r12] = $r20r21r22r23;;
     _32(0x2865140c),        //so 80 (0x50)[$r12] = $r24r25r26r27;;
     _32(0x28751c0c),        //so 112 (0x70)[$r12] = $r28r29r30r31;;
     _32(0x2741240c),        //sd 144 (0x90)[$r12] = $r16;;
     _32(0x0fc4011a),        //get $r26 = $cs;;
     _32(0xe713ed00),        //extfz $r4 = $r0, 62 (0x3e), 52 (0x34)
     _32(0xe70f3800),        //extfz $r3 = $r0, 51 (0x33), 32 (0x20)
     _32(0x7b2a2fc0),        //srld $r10 = $r0, 63 (0x3f);;
     _32(0xf808ffc0),        //zxwd $r2 = $r0
     _32(0xea00000a),        //copyd $r0 = $r10
     _32(0xea180003),        //copyd $r6 = $r3
     _64(0x1800003ff115b7c4),        //compw.eq $r5 = $r4, 2047 (0x7ff);;
     _32(0x08802684),        //cb.deqz $r4? 16c54 <__divdf3+0x2ac>;;
     _32(0x0c002b05),        //cb.wnez $r5? 16ca0 <__divdf3+0x2f8>;;
     _32(0xfb4a3742),        //srlw $r18 = $r2, 29 (0x1d)
     _32(0xf90e30c3),        //sllw $r3 = $r3, 3 (0x3)
     _32(0xf90a30c2),        //sllw $r2 = $r2, 3 (0x3)
     _64(0x1ffffffff1540044),        //addw $r21 = $r4, -1023 (0xfffffffffffffc01);;
     _32(0xfa0d10d2),        //orw $r3 = $r18, $r3
     _32(0xe01c0000),        //make $r7 = 0 (0x0)
     _32(0xf808ffc2),        //zxwd $r2 = $r2
     _32(0x60200000),        //make $r8 = 0 (0x0);;
     _32(0xe0580000),        //make $r22 = 0 (0x0)
     _64(0x08002000fa480003),        //orw $r18 = $r3, 8388608 (0x800000);;
     _32(0x7848ffd2),        //zxwd $r18 = $r18;;
     _32(0xe713ed01),        //extfz $r4 = $r1, 62 (0x3e), 52 (0x34)
     _32(0x671b3801),        //extfz $r6 = $r1, 51 (0x33), 32 (0x20);;
     _32(0xf814ffc1),        //zxwd $r5 = $r1
     _32(0xfb062fc1),        //srld $r1 = $r1, 63 (0x3f)
     _32(0xea0c0006),        //copyd $r3 = $r6
     _64(0x1800003ff125b7c4),        //compw.eq $r9 = $r4, 2047 (0x7ff);;
     _32(0x08801c84),        //cb.deqz $r4? 16c0c <__divdf3+0x264>;;
     _32(0x0c000ac9),        //cb.wnez $r9? 16af4 <__divdf3+0x14c>;;
     _32(0xfb0e3745),        //srlw $r3 = $r5, 29 (0x1d)
     _32(0xf91a30c6),        //sllw $r6 = $r6, 3 (0x3)
     _32(0xf91630c5),        //sllw $r5 = $r5, 3 (0x3)
     _64(0x1ffffffff1100044),        //addw $r4 = $r4, -1023 (0xfffffffffffffc01);;
     _32(0xfa0d1183),        //orw $r3 = $r3, $r6
     _32(0xe0240000),        //make $r9 = 0 (0x0)
     _32(0xf814ffc5),        //zxwd $r5 = $r5
     _32(0x75551544),        //sbfw $r21 = $r4, $r21;;
     _64(0x00002000fa0c0003),        //orw $r3 = $r3, 8388608 (0x800000);;
     _32(0x780cffc3),        //zxwd $r3 = $r3;;
     _96(0xf911b3c7f051a04af0180e00),        //pcrel $r6 = 56 (0x38)
     _32(0x80000000),        //compd.ne $r20 = $r10, $r1
     _64(0x1000000080000000),        //compw.gtu $r4 = $r7, 15 (0xf);;
     _32(0x6a6c0014),        //copyd $r27 = $r20;;
     _32(0x0c003604),        //cb.wnez $r4? 16df8 <__divdf3+0x450>;;
     _96(0x0000000080000000f0100600),        //pcrel $r4 = 24 (0x18);;
     _32(0x3412f1c4),        //lws.xs $r4 = $r7[$r4];;
     _32(0x71110184),        //addd $r4 = $r4, $r6;;
     _32(0x0fd80004),        //igoto $r4;;
     _32(0x00000344),        //    invalid opcode    
     _32(0x000002cc),        //    invalid opcode    
     _32(0x00000104),        //    invalid opcode    
     _32(0x00000064),        //    invalid opcode    
     _32(0x00000104),        //    invalid opcode    
     _32(0x00000278),        //    invalid opcode    
     _32(0x00000104),        //    invalid opcode    
     _32(0x00000064),        //    invalid opcode    
     _32(0x00000298),        //    invalid opcode    
     _32(0x00000298),        //    invalid opcode    
     _32(0x00000278),        //    invalid opcode    
     _32(0x00000064),        //    invalid opcode    
     _32(0x00000074),        //    invalid opcode    
     _32(0x00000074),        //    invalid opcode    
     _32(0x00000074),        //    invalid opcode    
     _32(0x000002ac),        //    invalid opcode    
     _32(0xfa111146),        //orw $r4 = $r6, $r5
     _64(0x0ffffffef1540055),        //addw $r21 = $r21, -2047 (0xfffffffffffff801);;
     _32(0x08001c04),        //cb.dnez $r4? 16cc0 <__divdf3+0x318>;;
     _32(0x97ffffde),        //goto 16a7c <__divdf3+0xd4>
     _32(0xfa1c0087),        //orw $r7 = $r7, 2 (0x2)
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _32(0xe0140000),        //make $r5 = 0 (0x0)
     _32(0x60240002),        //make $r9 = 2 (0x2);;
     _32(0xf800ffc1),        //zxwd $r0 = $r1
     _32(0xea480003),        //copyd $r18 = $r3
     _32(0xea080005),        //copyd $r2 = $r5
     _32(0x6a200009),        //copyd $r8 = $r9;;
     _64(0x00000000f105b048),        //compw.eq $r1 = $r8, 1 (0x1);;
     _32(0x0c000841),        //cb.wnez $r1? 16bb4 <__divdf3+0x20c>;;
     _32(0x088001c8),        //cb.deqz $r8? 16b50 <__divdf3+0x1a8>;;
     _64(0xf121b0c8f105b088),        //compw.eq $r1 = $r8, 2 (0x2)
     _64(0x0800000080000000),        //compw.eq $r8 = $r8, 3 (0x3);;
     _32(0x0c007f81),        //cb.wnez $r1? 17340 <__divdf3+0x998>;;
     _32(0x0c007d48),        //cb.wnez $r8? 17320 <__divdf3+0x978>;;
     _32(0xea6c0000),        //copyd $r27 = $r0
     _64(0x08000000f138ffd5),        //addw $r14 = $r21, 1023 (0x3ff);;
     _32(0x8e00614e),        //cb.wlez $r14? 17170 <__divdf3+0x7c8>
     _32(0x780001c2),        //andw $r0 = $r2, 7 (0x7);;
     _32(0x0c002380),        //cb.wnez $r0? 16d9c <__divdf3+0x3f4>;;
     _32(0x6850005b),        //andd $r20 = $r27, 1 (0x1);;
     _64(0x00004000f8000012),        //andw $r0 = $r18, 16777216 (0x1000000);;
     _32(0x0c800140),        //cb.weqz $r0? 16b88 <__divdf3+0x1e0>;;
     _64(0xf1380015e848ffd2),        //andd $r18 = $r18, 4278190079 (0xfeffffff)
     _64(0x08000001803fbfff),        //addw $r14 = $r21, 1024 (0x400);;
     _64(0x0000003ff501b78e),        //compw.gt $r0 = $r14, 2046 (0x7fe);;
     _32(0x0c007380),        //cb.wnez $r0? 172c8 <__divdf3+0x920>;;
     _32(0xe54b60d2),        //extfz $r18 = $r18, 22 (0x16), 3 (0x3)
     _32(0xf9023752),        //sllw $r0 = $r18, 29 (0x1d)
     _32(0xfb0a30c2),        //srlw $r2 = $r2, 3 (0x3)
     _64(0x18000001e804ffce),        //andd $r1 = $r14, 2047 (0x7ff);;
     _32(0x90000008),        //goto 16bc8 <__divdf3+0x220>
     _32(0xf95a2816),        //slld $r22 = $r22, 32 (0x20)
     _32(0x7a091080),        //orw $r2 = $r0, $r2;;
     _32(0x6a500000),        //copyd $r20 = $r0;;
     _32(0xf95a2816),        //slld $r22 = $r22, 32 (0x20)
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0xe0480000),        //make $r18 = 0 (0x0)
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0xf9063501),        //sllw $r1 = $r1, 20 (0x14)
     _32(0xf95237d4),        //sllw $r20 = $r20, 31 (0x1f)
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0xe103f002),        //insf $r0 = $r2, 31 (0x1f), 0 (0x0)
     _32(0x7a051481),        //orw $r1 = $r1, $r18;;
     _32(0x7a051501),        //orw $r1 = $r1, $r20;;
     _32(0x6303f801),        //insf $r0 = $r1, 63 (0x3f), 32 (0x20);;
     _32(0x0fb80116),        //wfxl $cs, $r22;;
     _32(0x3840240c),        //ld $r16 = 144 (0x90)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c540c0c),        //lo $r20r21r22r23 = 48 (0x30)[$r12];;
     _32(0x3c64140c),        //lo $r24r25r26r27 = 80 (0x50)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130280c),        //addd $r12 = $r12, 160 (0xa0)
     _32(0x3c741c0c),        //lo $r28r29r30r31 = 112 (0x70)[$r12];;
     _32(0x7a111146),        //orw $r4 = $r6, $r5;;
     _32(0x08801084),        //cb.deqz $r4? 16d18 <__divdf3+0x370>;;
     _32(0x08806806),        //cb.deqz $r6? 17294 <__divdf3+0x8ec>;;
     _32(0x700e3006),        //clzw $r3 = $r6;;
     _32(0xf824ffc3),        //zxwd $r9 = $r3
     _32(0x710cfd43),        //addw $r3 = $r3, -11 (0xfffffff5);;
     _32(0xf12cfe09),        //addw $r11 = $r9, -8 (0xfffffff8)
     _32(0x750c0743),        //sbfw $r3 = $r3, 29 (0x1d);;
     _32(0xfb1270c5),        //srlw $r4 = $r5, $r3
     _32(0xf90e72c6),        //sllw $r3 = $r6, $r11
     _32(0x791672c5),        //sllw $r5 = $r5, $r11;;
     _32(0xfa0d10c4),        //orw $r3 = $r4, $r3
     _32(0x7814ffc5),        //zxwd $r5 = $r5;;
     _32(0xe0240000),        //make $r9 = 0 (0x0)
     _64(0x0ffffffff5100349),        //sbfw $r4 = $r9, -1011 (0xfffffffffffffc0d);;
     _32(0x97ffff8c),        //goto 16a7c <__divdf3+0xd4>
     _32(0x75551544),        //sbfw $r21 = $r4, $r21;;
     _32(0x7a491083),        //orw $r18 = $r3, $r2;;
     _32(0x08800a92),        //cb.deqz $r18? 16d00 <__divdf3+0x358>;;
     _32(0x08806043),        //cb.deqz $r3? 17260 <__divdf3+0x8b8>;;
     _32(0x70163003),        //clzw $r5 = $r3;;
     _32(0xf810ffc5),        //zxwd $r4 = $r5
     _32(0x7114fd45),        //addw $r5 = $r5, -11 (0xfffffff5);;
     _32(0xf118fe04),        //addw $r6 = $r4, -8 (0xfffffff8)
     _32(0x75480745),        //sbfw $r18 = $r5, 29 (0x1d);;
     _32(0xfb4a7482),        //srlw $r18 = $r2, $r18
     _32(0xf90e7183),        //sllw $r3 = $r3, $r6
     _32(0x790a7182),        //sllw $r2 = $r2, $r6;;
     _32(0xfa4910d2),        //orw $r18 = $r18, $r3
     _32(0x7808ffc2),        //zxwd $r2 = $r2;;
     _32(0x97ffff68),        //goto 16a28 <__divdf3+0x80>
     _32(0xe01c0000),        //make $r7 = 0 (0x0)
     _32(0xe0200000),        //make $r8 = 0 (0x0)
     _32(0xe0580000),        //make $r22 = 0 (0x0)
     _64(0x1ffffffff5540344),        //sbfw $r21 = $r4, -1011 (0xfffffffffffffc0d);;
     _32(0x7a491083),        //orw $r18 = $r3, $r2;;
     _32(0x08000392),        //cb.dnez $r18? 16cdc <__divdf3+0x334>;;
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xe01c0008),        //make $r7 = 8 (0x8)
     _32(0xe05407ff),        //make $r21 = 2047 (0x7ff)
     _32(0x60200002),        //make $r8 = 2 (0x2);;
     _32(0x97ffff5c),        //goto 16a28 <__divdf3+0x80>
     _32(0x60580000),        //make $r22 = 0 (0x0);;
     _32(0xe0100202),        //make $r4 = 514 (0x202)
     _32(0xfa1c00c7),        //orw $r7 = $r7, 3 (0x3)
     _32(0xe0240003),        //make $r9 = 3 (0x3)
     _64(0x18000200f8180006),        //andw $r6 = $r6, 524288 (0x80000);;
     _32(0x97ffff6a),        //goto 16a7c <__divdf3+0xd4>
     _32(0x795a0106),        //cmoved.weqz $r6? $r22 = $r4;;
     _32(0xe0580202),        //make $r22 = 514 (0x202)
     _32(0xea480006),        //copyd $r18 = $r6
     _32(0xe01c000c),        //make $r7 = 12 (0xc)
     _64(0x18000200f80c0003),        //andw $r3 = $r3, 524288 (0x80000);;
     _32(0x97ffff4e),        //goto 16a28 <__divdf3+0x80>
     _32(0xe85a0003),        //cmoved.wnez $r3? $r22 = 0 (0x0)
     _32(0xe05407ff),        //make $r21 = 2047 (0x7ff)
     _32(0x60200003),        //make $r8 = 3 (0x3);;
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xe01c0004),        //make $r7 = 4 (0x4)
     _32(0xe0540000),        //make $r21 = 0 (0x0)
     _32(0x60200001),        //make $r8 = 1 (0x1);;
     _32(0x97ffff46),        //goto 16a28 <__divdf3+0x80>
     _32(0x60580000),        //make $r22 = 0 (0x0);;
     _32(0x97ffff59),        //goto 16a7c <__divdf3+0xd4>
     _32(0xfa1c0047),        //orw $r7 = $r7, 1 (0x1)
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _32(0xe0140000),        //make $r5 = 0 (0x0)
     _32(0x60240001),        //make $r9 = 1 (0x1);;
     _32(0xe0500001),        //make $r20 = 1 (0x1)
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _64(0xe0480000e0580010),        //make $r22 = 2207613190144 (0x20200000000)
     _64(0x1800020090800000),        //make $r18 = 524288 (0x80000);;
     _32(0x97ffffa1),        //goto 16bc8 <__divdf3+0x220>
     _32(0x600407ff),        //make $r1 = 2047 (0x7ff);;
     _32(0x97ffff9f),        //goto 16bc8 <__divdf3+0x220>
     _32(0xf95a2816),        //slld $r22 = $r22, 32 (0x20)
     _32(0xe00407ff),        //make $r1 = 2047 (0x7ff)
     _32(0xe0480000),        //make $r18 = 0 (0x0)
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0xf95a2816),        //slld $r22 = $r22, 32 (0x20)
     _32(0xea50000a),        //copyd $r20 = $r10
     _32(0xe00407ff),        //make $r1 = 2047 (0x7ff)
     _64(0x18000200fa480012),        //orw $r18 = $r18, 524288 (0x80000);;
     _32(0x97ffff95),        //goto 16bc8 <__divdf3+0x220>
     _64(0x000003ffe848ffd2),        //andd $r18 = $r18, 1048575 (0xfffff);;
     _32(0xe00407ff),        //make $r1 = 2047 (0x7ff)
     _32(0xe0480000),        //make $r18 = 0 (0x0)
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _64(0x18000001fa580116),        //orw $r22 = $r22, 1028 (0x404);;
     _32(0x97ffff8d),        //goto 16bc8 <__divdf3+0x220>
     _32(0x795a2816),        //slld $r22 = $r22, 32 (0x20);;
     _64(0xfa580816f800001a),        //andw $r0 = $r26, 3342336 (0x330000)
     _64(0x80000cc0e804001a),        //orw $r22 = $r22, 8224 (0x2020)
     _64(0x10000cc088000008),        //andd $r1 = $r26, 3342336 (0x330000);;
     _64(0xf101b000f10db000),        //compw.eq $r3 = $r0, 1114112 (0x110000)
     _64(0x0801100080008800),        //compw.eq $r0 = $r0, 2228224 (0x220000);;
     _32(0x0c007083),        //cb.wnez $r3? 174cc <__divdf3+0xb24>;;
     _32(0x0c006540),        //cb.wnez $r0? 1741c <__divdf3+0xa74>;;
     _32(0x087fd9c1),        //cb.dnez $r1? 16b68 <__divdf3+0x1c0>;;
     _32(0xf80003c2),        //andw $r0 = $r2, 15 (0xf)
     _32(0x6850005b),        //andd $r20 = $r27, 1 (0x1);;
     _64(0x00000000f101b100),        //compw.eq $r0 = $r0, 4 (0x4);;
     _32(0x0c7fd8c0),        //cb.wnez $r0? 16b6c <__divdf3+0x1c4>;;
     _32(0xf1080102),        //addw $r2 = $r2, 4 (0x4)
     _64(0x0ffffffff701b702),        //compw.geu $r0 = $r2, 4294967292 (0xfffffffc);;
     _32(0x97ffff5f),        //goto 16b6c <__divdf3+0x1c4>
     _32(0x71491480),        //addw $r18 = $r0, $r18;;
     _32(0x7601b483),        //compw.ltu $r0 = $r3, $r18;;
     _32(0x0c000140),        //cb.wnez $r0? 16e10 <__divdf3+0x468>;;
     _32(0xf101b483),        //compw.eq $r0 = $r3, $r18
     _32(0x7805b085),        //compw.leu $r1 = $r5, $r2;;
     _32(0x78011040),        //andw $r0 = $r0, $r1;;
     _32(0x0c805900),        //cb.weqz $r0? 1739c <__divdf3+0x9f4>;;
     _32(0xe57bf052),        //extfz $r30 = $r18, 31 (0x1f), 1 (0x1)
     _32(0xf93a37d2),        //sllw $r14 = $r18, 31 (0x1f)
     _32(0xfb023042),        //srlw $r0 = $r2, 1 (0x1)
     _32(0x795e37c2),        //sllw $r23 = $r2, 31 (0x1f);;
     _32(0xfa39100e),        //orw $r14 = $r14, $r0
     _32(0x785cffd7),        //zxwd $r23 = $r23;;
     _32(0xf90e3203),        //sllw $r3 = $r3, 8 (0x8)
     _32(0xfb723605),        //srlw $r28 = $r5, 24 (0x18)
     _32(0xf94e3205),        //sllw $r19 = $r5, 8 (0x8)
     _32(0x6a00001e),        //copyd $r0 = $r30;;
     _32(0xfb763403),        //srlw $r29 = $r3, 16 (0x10)
     _32(0x7a7110dc),        //orw $r28 = $r28, $r3;;
     _32(0xe463f01c),        //zxhd $r24 = $r28
     _32(0x7874ffdd),        //zxwd $r29 = $r29;;
     _32(0x980001e2),        //call 175d0 <__udivdi3>
     _32(0x6a04001d),        //copyd $r1 = $r29;;
     _32(0x98000202),        //call 17658 <__umoddi3>
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0xea04001d),        //copyd $r1 = $r29
     _32(0x6a00001e),        //copyd $r0 = $r30;;
     _32(0xfb16340e),        //srlw $r5 = $r14, 16 (0x10)
     _32(0xf9663400),        //sllw $r25 = $r0, 16 (0x10)
     _32(0xdb783498),        //mulw $r30 = $r24, $r18
     _32(0x7848ffd2),        //zxwd $r18 = $r18;;
     _32(0xfa011645),        //orw $r0 = $r5, $r25
     _32(0x7a151645),        //orw $r5 = $r5, $r25;;
     _32(0x7805b01e),        //compw.leu $r1 = $r30, $r0;;
     _32(0x0c000201),        //cb.wnez $r1? 16e9c <__divdf3+0x4f4>;;
     _32(0xf105101c),        //addw $r1 = $r28, $r0
     _32(0x7115101c),        //addw $r5 = $r28, $r0;;
     _32(0xf809b05c),        //compw.leu $r2 = $r28, $r1
     _32(0x7901b05e),        //compw.gtu $r0 = $r30, $r1;;
     _32(0x78011080),        //andw $r0 = $r0, $r2;;
     _32(0x0c005a80),        //cb.wnez $r0? 1743c <__divdf3+0xa94>;;
     _32(0x7148ffd2),        //addw $r18 = $r18, -1 (0xffffffff);;
     _32(0xf579115e),        //sbfw $r30 = $r30, $r5
     _32(0x6a04001d),        //copyd $r1 = $r29;;
     _32(0x980001cb),        //call 175d0 <__udivdi3>
     _32(0x6a00001e),        //copyd $r0 = $r30;;
     _32(0xea140000),        //copyd $r5 = $r0
     _32(0xea04001d),        //copyd $r1 = $r29
     _32(0x6a00001e),        //copyd $r0 = $r30;;
     _32(0x980001e8),        //call 17658 <__umoddi3>
     _32(0xf864ffc5),        //zxwd $r25 = $r5
     _32(0x5b7c3158),        //mulw $r31 = $r24, $r5;;
     _32(0xe40bf00e),        //zxhd $r2 = $r14
     _32(0x79023400),        //sllw $r0 = $r0, 16 (0x10);;
     _32(0xfa051002),        //orw $r1 = $r2, $r0
     _32(0x7a111002),        //orw $r4 = $r2, $r0;;
     _32(0x7801b05f),        //compw.leu $r0 = $r31, $r1;;
     _32(0x0c000200),        //cb.wnez $r0? 16ef8 <__divdf3+0x550>;;
     _32(0xf109105c),        //addw $r2 = $r28, $r1
     _32(0x7111105c),        //addw $r4 = $r28, $r1;;
     _32(0xf901b09f),        //compw.gtu $r0 = $r31, $r2
     _32(0x7805b09c),        //compw.leu $r1 = $r28, $r2;;
     _32(0x78011040),        //andw $r0 = $r0, $r1;;
     _32(0x0c005580),        //cb.wnez $r0? 17448 <__divdf3+0xaa0>;;
     _32(0x7164ffd9),        //addw $r25 = $r25, -1 (0xffffffff);;
     _32(0xe47bf013),        //zxhd $r30 = $r19
     _32(0xf94a3412),        //sllw $r18 = $r18, 16 (0x10)
     _32(0xfb1e3413),        //srlw $r7 = $r19, 16 (0x10)
     _32(0x7525111f),        //sbfw $r9 = $r31, $r4;;
     _32(0xfa0d1652),        //orw $r3 = $r18, $r25
     _32(0xfa491652),        //orw $r18 = $r18, $r25
     _32(0x7511111f),        //sbfw $r4 = $r31, $r4;;
     _32(0xe403f003),        //zxhd $r0 = $r3
     _32(0x7b1a3403),        //srlw $r6 = $r3, 16 (0x10);;
     _32(0x5b083786),        //mulw $r2 = $r6, $r30;;
     _32(0x5b643780),        //mulw $r25 = $r0, $r30;;
     _32(0xfa040002),        //copyw $r1 = $r2
     _32(0x5b1831c6),        //mulw $r6 = $r6, $r7;;
     _32(0xfb163419),        //srlw $r5 = $r25, 16 (0x10)
     _32(0x53043007),        //maddw $r1 = $r7, $r0;;
     _32(0xf820ffc6),        //zxwd $r8 = $r6
     _64(0x08000040f1180006),        //addw $r6 = $r6, 65536 (0x10000);;
     _32(0xe407f019),        //zxhd $r1 = $r25
     _32(0x7a000001),        //copyw $r0 = $r1;;
     _32(0x71151005),        //addw $r5 = $r5, $r0;;
     _32(0xf809b142),        //compw.leu $r2 = $r2, $r5
     _32(0xfb023405),        //srlw $r0 = $r5, 16 (0x10)
     _32(0x79663405),        //sllw $r25 = $r5, 16 (0x10);;
     _32(0xf81a0202),        //cmoved.wnez $r2? $r6 = $r8
     _32(0x71651059),        //addw $r25 = $r25, $r1;;
     _32(0x71011180),        //addw $r0 = $r0, $r6;;
     _32(0x7605b009),        //compw.ltu $r1 = $r9, $r0;;
     _32(0x0c001c01),        //cb.wnez $r1? 17128 <__divdf3+0x780>;;
     _32(0xf105b009),        //compw.eq $r1 = $r9, $r0
     _32(0x7615b657),        //compw.ltu $r5 = $r23, $r25;;
     _32(0x78051141),        //andw $r1 = $r1, $r5;;
     _32(0x0c001b01),        //cb.wnez $r1? 17128 <__divdf3+0x780>;;
     _32(0xf56515d9),        //sbfw $r25 = $r25, $r23
     _32(0xf5011100),        //sbfw $r0 = $r0, $r4
     _64(0xf110ffd5f138ffd5),        //addw $r14 = $r21, 1023 (0x3ff)
     _64(0x1800000090000000),        //addw $r4 = $r21, 1023 (0x3ff);;
     _32(0x765db657),        //compw.ltu $r23 = $r23, $r25;;
     _32(0xf5051017),        //sbfw $r1 = $r23, $r0
     _32(0x755d1017),        //sbfw $r23 = $r23, $r0;;
     _32(0xf001b05c),        //compw.ne $r0 = $r28, $r1
     _32(0x6a04001d),        //copyd $r1 = $r29;;
     _32(0x0c804ac0),        //cb.weqz $r0? 17454 <__divdf3+0xaac>;;
     _32(0x98000189),        //call 175d0 <__udivdi3>
     _32(0xea000017),        //copyd $r0 = $r23
     _32(0x271d260c),        //sd 152 (0x98)[$r12] = $r7;;
     _32(0xea080000),        //copyd $r2 = $r0
     _32(0xea04001d),        //copyd $r1 = $r29
     _32(0x6a000017),        //copyd $r0 = $r23;;
     _32(0x980001a5),        //call 17658 <__umoddi3>
     _32(0xf85cffc2),        //zxwd $r23 = $r2
     _32(0x5b7c3098),        //mulw $r31 = $r24, $r2;;
     _32(0xfb0a3419),        //srlw $r2 = $r25, 16 (0x10)
     _32(0xf9523400),        //sllw $r20 = $r0, 16 (0x10)
     _32(0x381c260c),        //ld $r7 = 152 (0x98)[$r12];;
     _32(0xfa011502),        //orw $r0 = $r2, $r20
     _32(0x7a091502),        //orw $r2 = $r2, $r20;;
     _32(0x7805b01f),        //compw.leu $r1 = $r31, $r0;;
     _32(0x0c000241),        //cb.wnez $r1? 1700c <__divdf3+0x664>;;
     _32(0xf105101c),        //addw $r1 = $r28, $r0
     _32(0xf109101c),        //addw $r2 = $r28, $r0
     _32(0x7110ffd7),        //addw $r4 = $r23, -1 (0xffffffff);;
     _32(0xf901b05f),        //compw.gtu $r0 = $r31, $r1
     _32(0x780db05c),        //compw.leu $r3 = $r28, $r1;;
     _32(0x780110c0),        //andw $r0 = $r0, $r3;;
     _32(0x0c005200),        //cb.wnez $r0? 17524 <__divdf3+0xb7c>;;
     _32(0x6a5c0004),        //copyd $r23 = $r4;;
     _32(0xe467f019),        //zxhd $r25 = $r25
     _32(0xf57d109f),        //sbfw $r31 = $r31, $r2
     _32(0xea04001d),        //copyd $r1 = $r29
     _32(0x271d260c),        //sd 152 (0x98)[$r12] = $r7;;
     _32(0x9800016d),        //call 175d0 <__udivdi3>
     _32(0x6a00001f),        //copyd $r0 = $r31;;
     _32(0xea080000),        //copyd $r2 = $r0
     _32(0xea04001d),        //copyd $r1 = $r29
     _32(0x6a00001f),        //copyd $r0 = $r31;;
     _32(0x9800018a),        //call 17658 <__umoddi3>
     _32(0xf850ffc2),        //zxwd $r20 = $r2
     _32(0x5b603098),        //mulw $r24 = $r24, $r2;;
     _32(0xf9023400),        //sllw $r0 = $r0, 16 (0x10)
     _32(0x381c260c),        //ld $r7 = 152 (0x98)[$r12];;
     _32(0xfa051019),        //orw $r1 = $r25, $r0
     _32(0x7a651019),        //orw $r25 = $r25, $r0;;
     _32(0x7801b058),        //compw.leu $r0 = $r24, $r1;;
     _32(0x0c000240),        //cb.wnez $r0? 17074 <__divdf3+0x6cc>;;
     _32(0xf109105c),        //addw $r2 = $r28, $r1
     _32(0xf165105c),        //addw $r25 = $r28, $r1
     _32(0x710cffd4),        //addw $r3 = $r20, -1 (0xffffffff);;
     _32(0xf901b098),        //compw.gtu $r0 = $r24, $r2
     _32(0x7805b09c),        //compw.leu $r1 = $r28, $r2;;
     _32(0x78011040),        //andw $r0 = $r0, $r1;;
     _32(0x0c004c40),        //cb.wnez $r0? 17530 <__divdf3+0xb88>;;
     _32(0x6a500003),        //copyd $r20 = $r3;;
     _32(0xf90a3417),        //sllw $r2 = $r23, 16 (0x10)
     _32(0xf5211658),        //sbfw $r8 = $r24, $r25
     _32(0x75651658),        //sbfw $r25 = $r24, $r25;;
     _32(0xfa191502),        //orw $r6 = $r2, $r20
     _32(0x7a091502),        //orw $r2 = $r2, $r20;;
     _32(0xe403f006),        //zxhd $r0 = $r6
     _32(0x7b0e3406),        //srlw $r3 = $r6, 16 (0x10);;
     _32(0x5b103783),        //mulw $r4 = $r3, $r30;;
     _32(0x5b04301e),        //mulw $r1 = $r30, $r0;;
     _32(0xfa140004),        //copyw $r5 = $r4
     _32(0x5b0c30c7),        //mulw $r3 = $r7, $r3;;
     _32(0xe407f001),        //zxhd $r1 = $r1
     _32(0xfb023401),        //srlw $r0 = $r1, 16 (0x10)
     _32(0x53143007),        //maddw $r5 = $r7, $r0;;
     _32(0xfa1c0005),        //copyw $r7 = $r5
     _32(0xf814ffc3),        //zxwd $r5 = $r3
     _64(0x10000040f10c0003),        //addw $r3 = $r3, 65536 (0x10000);;
     _32(0x710111c0),        //addw $r0 = $r0, $r7;;
     _32(0xf811b004),        //compw.leu $r4 = $r4, $r0
     _32(0xfb623400),        //srlw $r24 = $r0, 16 (0x10)
     _32(0x79023400),        //sllw $r0 = $r0, 16 (0x10);;
     _32(0xf80e0144),        //cmoved.wnez $r4? $r3 = $r5
     _32(0x71011040),        //addw $r0 = $r0, $r1;;
     _32(0x716110d8),        //addw $r24 = $r24, $r3;;
     _32(0x7605b608),        //compw.ltu $r1 = $r8, $r24;;
     _32(0x0c802901),        //cb.weqz $r1? 1736c <__divdf3+0x9c4>;;
     _32(0xf105121c),        //addw $r1 = $r28, $r8
     _32(0xf108ffc6),        //addw $r2 = $r6, -1 (0xffffffff)
     _32(0x7165121c),        //addw $r25 = $r28, $r8;;
     _32(0x770db701),        //compw.geu $r3 = $r1, $r28;;
     _32(0x0c8001c3),        //cb.weqz $r3? 1710c <__divdf3+0x764>;;
     _32(0x760db601),        //compw.ltu $r3 = $r1, $r24;;
     _32(0x0c003b43),        //cb.wnez $r3? 174ac <__divdf3+0xb04>;;
     _32(0xf10db601),        //compw.eq $r3 = $r1, $r24
     _32(0x7611b013),        //compw.ltu $r4 = $r19, $r0;;
     _32(0x780d1103),        //andw $r3 = $r3, $r4;;
     _32(0x0c003a43),        //cb.wnez $r3? 174ac <__divdf3+0xb04>;;
     _32(0x7001b013),        //compw.ne $r0 = $r19, $r0;;
     _32(0x68140040),        //andd $r5 = $r0, 1 (0x1);;
     _32(0xf065b619),        //compw.ne $r25 = $r25, $r24
     _32(0x7a000042),        //orw $r0 = $r2, 1 (0x1);;
     _32(0x7a651159),        //orw $r25 = $r25, $r5;;
     _32(0x97fffe8f),        //goto 16b5c <__divdf3+0x1b4>
     _32(0x780a0019),        //cmoved.wnez $r25? $r2 = $r0;;
     _32(0xf10514d7),        //addw $r1 = $r23, $r19
     _32(0x7148ffc3),        //addw $r18 = $r3, -1 (0xffffffff);;
     _32(0xf911b053),        //compw.gtu $r4 = $r19, $r1
     _32(0x785cffc1),        //zxwd $r23 = $r1;;
     _32(0x71111704),        //addw $r4 = $r4, $r28;;
     _32(0xf1091244),        //addw $r2 = $r4, $r9
     _32(0x71111244),        //addw $r4 = $r4, $r9;;
     _32(0x7615b09c),        //compw.ltu $r5 = $r28, $r2;;
     _32(0x0c802105),        //cb.weqz $r5? 17358 <__divdf3+0x9b0>;;
     _32(0x7915b080),        //compw.gtu $r5 = $r0, $r2;;
     _32(0x0c802385),        //cb.weqz $r5? 17388 <__divdf3+0x9e0>;;
     _32(0xf1111053),        //addw $r4 = $r19, $r1
     _32(0xf148ff83),        //addw $r18 = $r3, -2 (0xfffffffe)
     _32(0x715d1053),        //addw $r23 = $r19, $r1;;
     _32(0x7911b113),        //compw.gtu $r4 = $r19, $r4;;
     _32(0x71111704),        //addw $r4 = $r4, $r28;;
     _32(0x97ffff85),        //goto 16f7c <__divdf3+0x5d4>
     _32(0x71111084),        //addw $r4 = $r4, $r2;;
     _32(0xf504004e),        //sbfw $r1 = $r14, 1 (0x1)
     _32(0xf500004e),        //sbfw $r0 = $r14, 1 (0x1)
     _32(0x6850005b),        //andd $r20 = $r27, 1 (0x1);;
     _64(0x00000001f505b601),        //compw.gt $r1 = $r1, 56 (0x38);;
     _32(0x0c800241),        //cb.weqz $r1? 171a8 <__divdf3+0x800>;;
     _32(0x7a091482),        //orw $r2 = $r2, $r18;;
     _32(0x08002e82),        //cb.dnez $r2? 17474 <__divdf3+0xacc>;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0xe0480000),        //make $r18 = 0 (0x0)
     _64(0x10000004fa580416),        //orw $r22 = $r22, 4112 (0x1010);;
     _32(0x97fffe8a),        //goto 16bc8 <__divdf3+0x220>
     _32(0x795a2816),        //slld $r22 = $r22, 32 (0x20);;
     _64(0x00000000f505b7c0),        //compw.gt $r1 = $r0, 31 (0x1f);;
     _32(0x0c802001),        //cb.weqz $r1? 173b0 <__divdf3+0xa08>;;
     _32(0xf504f84e),        //sbfw $r1 = $r14, -31 (0xffffffe1)
     _64(0xf101b000f10c0f95),        //addw $r3 = $r21, 1086 (0x43e)
     _64(0x1000000188000001),        //compw.eq $r0 = $r0, 32 (0x20);;
     _32(0xf90e70d2),        //sllw $r3 = $r18, $r3
     _32(0x7b4a7052),        //srlw $r18 = $r18, $r1;;
     _32(0x7a0d1083),        //orw $r3 = $r3, $r2;;
     _32(0x790a00c0),        //cmoved.weqz $r0? $r2 = $r3;;
     _64(0x00000000f009b002),        //compw.ne $r2 = $r2, 0 (0x0);;
     _32(0xfa0d1482),        //orw $r3 = $r2, $r18
     _32(0x7a011482),        //orw $r0 = $r2, $r18;;
     _32(0x680801c3),        //andd $r2 = $r3, 7 (0x7);;
     _32(0x08803302),        //cb.deqz $r2? 1751c <__divdf3+0xb74>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _64(0xfa580816f808001a),        //andw $r2 = $r26, 3342336 (0x330000)
     _64(0x80000cc0e868001a),        //orw $r22 = $r22, 8224 (0x2020)
     _64(0x10000cc088000008),        //andd $r26 = $r26, 3342336 (0x330000);;
     _64(0xf109b002f10db002),        //compw.eq $r3 = $r2, 1114112 (0x110000)
     _64(0x0801100080008800),        //compw.eq $r2 = $r2, 2228224 (0x220000);;
     _32(0x0c003203),        //cb.wnez $r3? 1753c <__divdf3+0xb94>;;
     _32(0x0c003882),        //cb.wnez $r2? 175a8 <__divdf3+0xc00>;;
     _32(0x0880355a),        //cb.deqz $r26? 17578 <__divdf3+0xbd0>;;
     _32(0xe54b60c1),        //extfz $r18 = $r1, 22 (0x16), 3 (0x3)
     _64(0x08002000f8080001),        //andw $r2 = $r1, 8388608 (0x800000);;
     _32(0x0c003682),        //cb.wnez $r2? 1759c <__divdf3+0xbf4>;;
     _32(0x790a3741),        //sllw $r2 = $r1, 29 (0x1d);;
     _32(0x7808ffc2),        //zxwd $r2 = $r2;;
     _32(0xfb0230c0),        //srlw $r0 = $r0, 3 (0x3)
     _64(0x08000008f8040816),        //andw $r1 = $r22, 8224 (0x2020);;
     _32(0x7a091080),        //orw $r2 = $r0, $r2;;
     _32(0x0c003601),        //cb.wnez $r1? 175b0 <__divdf3+0xc08>;;
     _32(0x97fffe5d),        //goto 16bc8 <__divdf3+0x220>
     _32(0xf95a2816),        //slld $r22 = $r22, 32 (0x20)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x704a3002),        //clzw $r18 = $r2;;
     _32(0xf1140552),        //addw $r5 = $r18, 21 (0x15)
     _32(0xf1100812),        //addw $r4 = $r18, 32 (0x20)
     _32(0x7148fe12),        //addw $r18 = $r18, -8 (0xfffffff8);;
     _32(0xf810ffc4),        //zxwd $r4 = $r4
     _32(0xf814ffc5),        //zxwd $r5 = $r5
     _32(0xf94a7482),        //sllw $r18 = $r2, $r18
     _64(0x18000000f519b705),        //compw.gt $r6 = $r5, 28 (0x1c);;
     _32(0x7848ffd2),        //zxwd $r18 = $r18;;
     _32(0x0cff9e46),        //cb.weqz $r6? 16c6c <__divdf3+0x2c4>;;
     _32(0x97fffe7f),        //goto 16c88 <__divdf3+0x2e0>
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0x70123005),        //clzw $r4 = $r5;;
     _32(0xf10c0544),        //addw $r3 = $r4, 21 (0x15)
     _32(0x71240804),        //addw $r9 = $r4, 32 (0x20);;
     _32(0xf824ffc9),        //zxwd $r9 = $r9
     _32(0xf80cffc3),        //zxwd $r3 = $r3
     _64(0x10000000f52db703),        //compw.gt $r11 = $r3, 28 (0x1c);;
     _32(0x0cff974b),        //cb.weqz $r11? 16c24 <__divdf3+0x27c>;;
     _32(0x710cfe04),        //addw $r3 = $r4, -8 (0xfffffff8);;
     _32(0xf90e70c5),        //sllw $r3 = $r5, $r3
     _32(0x60140000),        //make $r5 = 0 (0x0);;
     _32(0x97fffe60),        //goto 16c40 <__divdf3+0x298>
     _32(0x780cffc3),        //zxwd $r3 = $r3;;
     _32(0xe0480000),        //make $r18 = 0 (0x0)
     _64(0xe808001af800001a),        //andw $r0 = $r26, 3342336 (0x330000)
     _64(0x10000cc088000cc0),        //andd $r2 = $r26, 3342336 (0x330000);;
     _64(0xf101b000f105b000),        //compw.eq $r1 = $r0, 1114112 (0x110000)
     _64(0x0801100080008800),        //compw.eq $r0 = $r0, 2228224 (0x220000);;
     _32(0x0c002001),        //cb.wnez $r1? 174ec <__divdf3+0xb44>;;
     _32(0x0c000fc0),        //cb.wnez $r0? 173ec <__divdf3+0xa44>;;
     _32(0x888001c2),        //cb.deqz $r2? 17310 <__divdf3+0x968>
     _32(0x600407ff),        //make $r1 = 2047 (0x7ff);;
     _32(0xe00407fe),        //make $r1 = 2046 (0x7fe)
     _64(0xe008ffc0e048ffc0),        //make $r18 = 1048575 (0xfffff)
     _64(0x103fffff880003ff),        //make $r2 = 4294967295 (0xffffffff);;
     _64(0x0000000afa580a16),        //orw $r22 = $r22, 10280 (0x2828);;
     _32(0x97fffe2c),        //goto 16bc8 <__divdf3+0x220>
     _32(0x795a2816),        //slld $r22 = $r22, 32 (0x20);;
     _32(0xea500000),        //copyd $r20 = $r0
     _32(0xf95a2816),        //slld $r22 = $r22, 32 (0x20)
     _32(0xe00407ff),        //make $r1 = 2047 (0x7ff)
     _64(0x18000200fa480012),        //orw $r18 = $r18, 524288 (0x80000);;
     _32(0x97fffe25),        //goto 16bc8 <__divdf3+0x220>
     _64(0x000003ffe848ffd2),        //andd $r18 = $r18, 1048575 (0xfffff);;
     _32(0xea500000),        //copyd $r20 = $r0
     _32(0xf95a2816),        //slld $r22 = $r22, 32 (0x20)
     _32(0xe00407ff),        //make $r1 = 2047 (0x7ff)
     _32(0x60480000),        //make $r18 = 0 (0x0);;
     _32(0x97fffe1e),        //goto 16bc8 <__divdf3+0x220>
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0xf115b09c),        //compw.eq $r5 = $r28, $r2
     _32(0x7819b053),        //compw.leu $r6 = $r19, $r1;;
     _32(0x78151185),        //andw $r5 = $r5, $r6;;
     _32(0x0cffc185),        //cb.weqz $r5? 16f7c <__divdf3+0x5d4>;;
     _32(0x17ffff79),        //goto 1714c <__divdf3+0x7a4>;;
     _32(0xf105b608),        //compw.eq $r1 = $r8, $r24
     _64(0x08000000f015b000),        //compw.ne $r5 = $r0, 0 (0x0);;
     _32(0x68140045),        //andd $r5 = $r5, 1 (0x1);;
     _32(0x78051141),        //andw $r1 = $r1, $r5;;
     _32(0x0cffd941),        //cb.weqz $r1? 17114 <__divdf3+0x76c>;;
     _32(0x17ffff57),        //goto 170e0 <__divdf3+0x738>;;
     _32(0xf115b080),        //compw.eq $r5 = $r0, $r2
     _32(0x7919b059),        //compw.gtu $r6 = $r25, $r1;;
     _32(0x78151185),        //andw $r5 = $r5, $r6;;
     _32(0x0cffbe85),        //cb.weqz $r5? 16f7c <__divdf3+0x5d4>;;
     _32(0x17ffff6f),        //goto 17154 <__divdf3+0x7ac>;;
     _32(0x97fffea3),        //goto 16e28 <__divdf3+0x480>
     _32(0xf154ffd5),        //addw $r21 = $r21, -1 (0xffffffff)
     _32(0xea380002),        //copyd $r14 = $r2
     _32(0xea780012),        //copyd $r30 = $r18
     _32(0x605c0000),        //make $r23 = 0 (0x0);;
     _32(0xfb0e7002),        //srlw $r3 = $r2, $r0
     _32(0xfb027012),        //srlw $r0 = $r18, $r0
     _64(0x10000001f1100795),        //addw $r4 = $r21, 1054 (0x41e);;
     _32(0xf90a7102),        //sllw $r2 = $r2, $r4
     _32(0xf94a7112),        //sllw $r18 = $r18, $r4
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0xfa0110d2),        //orw $r0 = $r18, $r3
     _64(0x08000000f009b002),        //compw.ne $r2 = $r2, 0 (0x0);;
     _32(0xfa0d1080),        //orw $r3 = $r0, $r2
     _32(0x7a011080),        //orw $r0 = $r0, $r2;;
     _32(0x780801c3),        //andw $r2 = $r3, 7 (0x7);;
     _32(0x0cffe442),        //cb.weqz $r2? 17228 <__divdf3+0x880>;;
     _32(0x17ffff83),        //goto 171f4 <__divdf3+0x84c>;;
     _32(0xe01007fe),        //make $r4 = 2046 (0x7fe)
     _32(0xe00407ff),        //make $r1 = 2047 (0x7ff)
     _64(0xe000ffc0e00cffc0),        //make $r3 = 1048575 (0xfffff)
     _64(0x183fffff900003ff),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0xf106011b),        //cmoved.deqz $r27? $r1 = $r4
     _32(0xe0480000),        //make $r18 = 0 (0x0)
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0x97ffffc0),        //goto 17310 <__divdf3+0x968>
     _32(0xf14a00db),        //cmoved.deqz $r27? $r18 = $r3
     _32(0x710a001b),        //cmoved.deqz $r27? $r2 = $r0;;
     _32(0x88ff751b),        //cb.deqz $r27? 16b6c <__divdf3+0x1c4>
     _32(0x60500000),        //make $r20 = 0 (0x0);;
     _32(0xe0500001),        //make $r20 = 1 (0x1)
     _32(0xf1080202),        //addw $r2 = $r2, 8 (0x8)
     _64(0x17fffffff701b602),        //compw.geu $r0 = $r2, 4294967288 (0xfffffff8);;
     _32(0x97fffdce),        //goto 16b6c <__divdf3+0x1c4>
     _32(0x71491480),        //addw $r18 = $r0, $r18;;
     _32(0x97fffe98),        //goto 16e9c <__divdf3+0x4f4>
     _32(0xf148ff92),        //addw $r18 = $r18, -2 (0xfffffffe)
     _32(0x7115105c),        //addw $r5 = $r28, $r1;;
     _32(0x97fffeac),        //goto 16ef8 <__divdf3+0x550>
     _32(0xf164ff99),        //addw $r25 = $r25, -2 (0xfffffffe)
     _32(0x7111109c),        //addw $r4 = $r28, $r2;;
     _32(0x8eff9484),        //cb.wgtz $r4? 16d9c <__divdf3+0x3f4>
     _64(0x003fffffe008ffc0),        //make $r2 = 4294967295 (0xffffffff);;
     _32(0xf5040044),        //sbfw $r1 = $r4, 1 (0x1)
     _32(0x75000044),        //sbfw $r0 = $r4, 1 (0x1);;
     _64(0x00000001f405b601),        //compw.le $r1 = $r1, 56 (0x38);;
     _32(0x0c7fd381),        //cb.wnez $r1? 171a8 <__divdf3+0x800>;;
     _32(0xf508005b),        //sbfw $r2 = $r27, 1 (0x1)
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0xf86cffdb),        //zxwd $r27 = $r27
     _64(0x18000cc0f868001a),        //andw $r26 = $r26, 3342336 (0x330000);;
     _64(0xf169b01af105b01a),        //compw.eq $r1 = $r26, 2228224 (0x220000)
     _64(0x80011000fa580816),        //compw.eq $r26 = $r26, 1114112 (0x110000)
     _64(0x1000000888008800),        //orw $r22 = $r22, 8224 (0x2020);;
     _32(0x780206c1),        //cmoved.wnez $r1? $r0 = $r27;;
     _32(0x97ffff3b),        //goto 17190 <__divdf3+0x7e8>
     _32(0x790a001a),        //cmoved.weqz $r26? $r2 = $r0;;
     _32(0xf9663053),        //sllw $r25 = $r19, 1 (0x1)
     _32(0x7108ff86),        //addw $r2 = $r6, -2 (0xfffffffe);;
     _32(0xf915b653),        //compw.gtu $r5 = $r19, $r25
     _32(0x7001b640),        //compw.ne $r0 = $r0, $r25;;
     _32(0xf10d1705),        //addw $r3 = $r5, $r28
     _32(0x68140040),        //andd $r5 = $r0, 1 (0x1);;
     _32(0x97ffff14),        //goto 17114 <__divdf3+0x76c>
     _32(0x71651043),        //addw $r25 = $r3, $r1;;
     _32(0x887f6a1b),        //cb.dnez $r27? 16b6c <__divdf3+0x1c4>
     _32(0x60500001),        //make $r20 = 1 (0x1);;
     _32(0xe0500000),        //make $r20 = 0 (0x0)
     _32(0xf1080202),        //addw $r2 = $r2, 8 (0x8)
     _64(0x17fffffff701b602),        //compw.geu $r0 = $r2, 4294967288 (0xfffffff8);;
     _32(0x97fffda2),        //goto 16b6c <__divdf3+0x1c4>
     _32(0x71491480),        //addw $r18 = $r0, $r18;;
     _32(0xe01007fe),        //make $r4 = 2046 (0x7fe)
     _32(0xe00407ff),        //make $r1 = 2047 (0x7ff)
     _64(0xe000ffc0e00cffc0),        //make $r3 = 1048575 (0xfffff)
     _64(0x183fffff900003ff),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0xf006011b),        //cmoved.dnez $r27? $r1 = $r4
     _32(0xe0480000),        //make $r18 = 0 (0x0)
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0x97ffff80),        //goto 17310 <__divdf3+0x968>
     _32(0xf04a00db),        //cmoved.dnez $r27? $r18 = $r3
     _32(0x700a001b),        //cmoved.dnez $r27? $r2 = $r0;;
     _32(0x97ffff49),        //goto 17240 <__divdf3+0x898>
     _32(0x60480000),        //make $r18 = 0 (0x0);;
     _32(0x97fffeba),        //goto 1700c <__divdf3+0x664>
     _32(0xf15cff97),        //addw $r23 = $r23, -2 (0xfffffffe)
     _32(0x7109105c),        //addw $r2 = $r28, $r1;;
     _32(0x97fffed1),        //goto 17074 <__divdf3+0x6cc>
     _32(0xf150ff94),        //addw $r20 = $r20, -2 (0xfffffffe)
     _32(0x7165109c),        //addw $r25 = $r28, $r2;;
     _32(0x0800015b),        //cb.dnez $r27? 17550 <__divdf3+0xba8>;;
     _32(0xf1000200),        //addw $r0 = $r0, 8 (0x8)
     _64(0x0ffffffff709b600),        //compw.geu $r2 = $r0, 4294967288 (0xfffffff8);;
     _32(0x71051042),        //addw $r1 = $r2, $r1;;
     _64(0x00002000f8080001),        //andw $r2 = $r1, 8388608 (0x800000);;
     _32(0x0c800602),        //cb.weqz $r2? 175b8 <__divdf3+0xc10>;;
     _32(0xe0040001),        //make $r1 = 1 (0x1)
     _32(0xe0480000),        //make $r18 = 0 (0x0)
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _64(0x00000004fa580416),        //orw $r22 = $r22, 4112 (0x1010);;
     _32(0x97fffd96),        //goto 16bc8 <__divdf3+0x220>
     _32(0x795a2816),        //slld $r22 = $r22, 32 (0x20);;
     _32(0x780803c0),        //andw $r2 = $r0, 15 (0xf);;
     _64(0x00000000f109b102),        //compw.eq $r2 = $r2, 4 (0x4);;
     _32(0x0c7ffcc2),        //cb.wnez $r2? 17550 <__divdf3+0xba8>;;
     _32(0xf1000100),        //addw $r0 = $r0, 4 (0x4)
     _64(0x0ffffffff709b700),        //compw.geu $r2 = $r0, 4294967292 (0xfffffffc);;
     _32(0x97ffffef),        //goto 17550 <__divdf3+0xba8>
     _32(0x71051042),        //addw $r1 = $r2, $r1;;
     _32(0x97fffff0),        //goto 1755c <__divdf3+0xbb4>
     _64(0x00000008fa580816),        //orw $r22 = $r22, 8224 (0x2020);;
     _32(0x08fffa9b),        //cb.deqz $r27? 17550 <__divdf3+0xba8>;;
     _32(0x17ffffe5),        //goto 17540 <__divdf3+0xb98>;;
     _32(0x97ffffee),        //goto 17568 <__divdf3+0xbc0>
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xe54b60c1),        //extfz $r18 = $r1, 22 (0x16), 3 (0x3)
     _32(0xfb0230c0),        //srlw $r0 = $r0, 3 (0x3)
     _32(0xf90a3741),        //sllw $r2 = $r1, 29 (0x1d)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x97ffffe8),        //goto 17568 <__divdf3+0xbc0>
     _32(0x7a091002)        //orw $r2 = $r2, $r0;;
 |];

let __udivdi3: list_I = 
 [|
     _32(0x88800641),        //cb.deqz $r1? 17634 <__udivdi3+0x64>
     _32(0x760da040),        //compd.ltu $r3 = $r0, $r1;;
     _32(0xea080000),        //copyd $r2 = $r0
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x08000503),        //cb.dnez $r3? 17630 <__udivdi3+0x60>;;
     _32(0xf00e2001),        //clzd $r3 = $r1
     _32(0x70122002),        //clzd $r4 = $r2;;
     _32(0x751110c4),        //sbfw $r4 = $r4, $r3;;
     _32(0x79066101),        //slld $r1 = $r1, $r4;;
     _32(0x760da042),        //compd.ltu $r3 = $r2, $r1;;
     _32(0x08000103),        //cb.dnez $r3? 17608 <__udivdi3+0x38>;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x75090081),        //sbfd $r2 = $r1, $r2;;
     _32(0x79026100),        //slld $r0 = $r0, $r4;;
     _32(0x0e000284),        //cb.wlez $r4? 17630 <__udivdi3+0x60>;;
     _32(0xe0140001),        //make $r5 = 1 (0x1)
     _32(0xfa0c0004),        //copyw $r3 = $r4
     _32(0x7b062041),        //srld $r1 = $r1, 1 (0x1);;
     _32(0x79126105),        //slld $r4 = $r5, $r4;;
     _32(0x6110ffc4),        //addd $r4 = $r4, -1 (0xffffffff);;
     _32(0x0f000083),        //loopdo $r3, 17628 <__udivdi3+0x58>;;
     _32(0x70090081),        //stsud $r2 = $r1, $r2;;
     _32(0x78090084),        //andd $r2 = $r4, $r2;;
     _32(0x71010080),        //addd $r0 = $r0, $r2;;
     _32(0x0fd00000),        //ret ;;
     _96(0x8000009fe0000000f0045700),        //pcrel $r1 = 163164 (0x27d5c)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b8040201),        //ld $r1 = 8 (0x8)[$r1];;
     _32(0x087ffe41),        //cb.dnez $r1? 17630 <__udivdi3+0x60>;;
     _32(0x00000000),        //errop ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __umoddi3: list_I = 
 [|
     _32(0x888004c1),        //cb.deqz $r1? 176a4 <__umoddi3+0x4c>
     _32(0x760da040),        //compd.ltu $r3 = $r0, $r1;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x080003c3),        //cb.dnez $r3? 176a0 <__umoddi3+0x48>;;
     _32(0xf0022000),        //clzd $r0 = $r0
     _32(0x700e2001),        //clzd $r3 = $r1;;
     _32(0x750d10c0),        //sbfw $r3 = $r0, $r3;;
     _32(0x790660c1),        //slld $r1 = $r1, $r3;;
     _32(0xf611a042),        //compd.ltu $r4 = $r2, $r1
     _32(0xf5010081),        //sbfd $r0 = $r1, $r2
     _32(0x7b062041),        //srld $r1 = $r1, 1 (0x1);;
     _32(0x710a0004),        //cmoved.deqz $r4? $r2 = $r0;;
     _32(0x8e000183),        //cb.wlez $r3? 176a0 <__umoddi3+0x48>
     _32(0x6a000002),        //copyd $r0 = $r2;;
     _32(0x7a000003),        //copyw $r0 = $r3;;
     _32(0x0f000080),        //loopdo $r0, 1769c <__umoddi3+0x44>;;
     _32(0x70090081),        //stsud $r2 = $r1, $r2;;
     _32(0x7b0260c2),        //srld $r0 = $r2, $r3;;
     _32(0x0fd00000),        //ret ;;
     _96(0x8000009fe0000000f0043b00),        //pcrel $r1 = 163052 (0x27cec)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b8040201),        //ld $r1 = 8 (0x8)[$r1];;
     _32(0x087ffe41),        //cb.dnez $r1? 176a0 <__umoddi3+0x48>;;
     _32(0x00000000),        //errop ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __udivmoddi4: list_I = 
 [|
     _32(0x88800801),        //cb.deqz $r1? 17748 <__udivmoddi4+0x80>
     _32(0xf0162001),        //clzd $r5 = $r1
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0xf0122003),        //clzd $r4 = $r3
     _32(0x7601a040),        //compd.ltu $r0 = $r0, $r1;;
     _32(0x75111144),        //sbfw $r4 = $r4, $r5;;
     _32(0x88000580),        //cb.dnez $r0? 17738 <__udivmoddi4+0x70>
     _32(0x79166101),        //slld $r5 = $r1, $r4;;
     _32(0xf605a143),        //compd.ltu $r1 = $r3, $r5
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x08000101),        //cb.dnez $r1? 17700 <__udivmoddi4+0x38>;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x750d00c5),        //sbfd $r3 = $r5, $r3;;
     _32(0x79026100),        //slld $r0 = $r0, $r4;;
     _32(0x8e000304),        //cb.wlez $r4? 17730 <__udivmoddi4+0x68>
     _32(0xe0180001),        //make $r6 = 1 (0x1)
     _32(0x6a040003),        //copyd $r1 = $r3;;
     _32(0xf91a6106),        //slld $r6 = $r6, $r4
     _32(0xfb162045),        //srld $r5 = $r5, 1 (0x1)
     _32(0x7a040004),        //copyw $r1 = $r4;;
     _32(0x6118ffc6),        //addd $r6 = $r6, -1 (0xffffffff);;
     _32(0x0f000081),        //loopdo $r1, 17724 <__udivmoddi4+0x5c>;;
     _32(0x700d00c5),        //stsud $r3 = $r5, $r3;;
     _32(0xf81500c6),        //andd $r5 = $r6, $r3
     _32(0x7b066103),        //srld $r1 = $r3, $r4;;
     _32(0x71010140),        //addd $r0 = $r0, $r5;;
     _32(0x8fd00000),        //ret 
     _32(0x27050002),        //sd 0 (0x0)[$r2] = $r1;;
     _32(0xea040003),        //copyd $r1 = $r3
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x8fd00000),        //ret 
     _32(0x27050002),        //sd 0 (0x0)[$r2] = $r1;;
     _96(0x8000009fe0000000f00c1200),        //pcrel $r3 = 162888 (0x27c48)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b80c0203),        //ld $r3 = 8 (0x8)[$r3];;
     _32(0x087ffd03),        //cb.dnez $r3? 17730 <__udivmoddi4+0x68>;;
     _32(0x00000000)        //errop ;;
 |];

let __divdi3: list_I = 
 [|
     _32(0x88800781),        //cb.deqz $r1? 177e0 <__divdi3+0x78>
     _32(0xe40c0000),        //absd $r3 = $r0
     _32(0xe4100001),        //absd $r4 = $r1
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0xf01a2003),        //clzd $r6 = $r3
     _32(0xf615a103),        //compd.ltu $r5 = $r3, $r4
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x080004c5),        //cb.dnez $r5? 177d0 <__divdi3+0x68>;;
     _32(0x70162004),        //clzd $r5 = $r4;;
     _32(0x75191146),        //sbfw $r6 = $r6, $r5;;
     _32(0x79126184),        //slld $r4 = $r4, $r6;;
     _32(0x7615a103),        //compd.ltu $r5 = $r3, $r4;;
     _32(0x08000105),        //cb.dnez $r5? 177a8 <__divdi3+0x40>;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x750d00c4),        //sbfd $r3 = $r4, $r3;;
     _32(0x79026180),        //slld $r0 = $r0, $r6;;
     _32(0x0e000286),        //cb.wlez $r6? 177d0 <__divdi3+0x68>;;
     _32(0xe01c0001),        //make $r7 = 1 (0x1)
     _32(0xfa140006),        //copyw $r5 = $r6
     _32(0x7b122044),        //srld $r4 = $r4, 1 (0x1);;
     _32(0x791a6187),        //slld $r6 = $r7, $r6;;
     _32(0x6118ffc6),        //addd $r6 = $r6, -1 (0xffffffff);;
     _32(0x0f000085),        //loopdo $r5, 177c8 <__divdi3+0x60>;;
     _32(0x700d00c4),        //stsud $r3 = $r4, $r3;;
     _32(0x780d00c6),        //andd $r3 = $r6, $r3;;
     _32(0x710100c0),        //addd $r0 = $r0, $r3;;
     _32(0xfc090042),        //xord $r2 = $r2, $r1
     _32(0x65040000),        //negd $r1 = $r0;;
     _32(0x8fd00000),        //ret 
     _32(0x72020042),        //cmoved.dltz $r2? $r0 = $r1;;
     _96(0x8000009ee0000000f00cec00),        //pcrel $r3 = 162736 (0x27bb0)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b80c0203),        //ld $r3 = 8 (0x8)[$r3];;
     _32(0x087ffd83),        //cb.dnez $r3? 177d0 <__divdi3+0x68>;;
     _32(0x00000000)        //errop ;;
 |];

let __moddi3: list_I = 
 [|
     _32(0x88800581),        //cb.deqz $r1? 17858 <__moddi3+0x58>
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0xe4000000),        //absd $r0 = $r0
     _32(0x64040001),        //absd $r1 = $r1;;
     _32(0xf0122001),        //clzd $r4 = $r1
     _32(0x760da040),        //compd.ltu $r3 = $r0, $r1;;
     _32(0x08000343),        //cb.dnez $r3? 1784c <__moddi3+0x4c>;;
     _32(0x700e2000),        //clzd $r3 = $r0;;
     _32(0x75111103),        //sbfw $r4 = $r3, $r4;;
     _32(0x79066101),        //slld $r1 = $r1, $r4;;
     _32(0xf615a040),        //compd.ltu $r5 = $r0, $r1
     _32(0xf50d0001),        //sbfd $r3 = $r1, $r0
     _32(0x7b062041),        //srld $r1 = $r1, 1 (0x1);;
     _32(0x8e000184),        //cb.wlez $r4? 1784c <__moddi3+0x4c>
     _32(0x710200c5),        //cmoved.deqz $r5? $r0 = $r3;;
     _32(0x7a0c0004),        //copyw $r3 = $r4;;
     _32(0x0f000083),        //loopdo $r3, 17848 <__moddi3+0x48>;;
     _32(0x70010001),        //stsud $r0 = $r1, $r0;;
     _32(0x7b026100),        //srld $r0 = $r0, $r4;;
     _32(0x65040000),        //negd $r1 = $r0;;
     _32(0x8fd00000),        //ret 
     _32(0x72020042),        //cmoved.dltz $r2? $r0 = $r1;;
     _96(0x8000009ee0000000f004ce00),        //pcrel $r1 = 162616 (0x27b38)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b8040201),        //ld $r1 = 8 (0x8)[$r1];;
     _32(0x087ffdc1),        //cb.dnez $r1? 1784c <__moddi3+0x4c>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000105),        //call 17c98 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000839),        //call 19970 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000161),        //call 17e30 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x00000000800000fce000f000),        //make $r0 = 259008 (0x3f3c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 178d4 <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x98000827),        //call 19970 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let __libc_fini_array: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _96(0x800000d8a749040ce0480000),        //make $r18 = 221184 (0x36000)
     _32(0x00000000),        //sd 16 (0x10)[$r12] = $r18;;
     _96(0x800000d8a739020ce5380012),        //sbfd $r14 = $r18, 221184 (0x36000)
     _32(0x00000000),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa3a20ce),        //srad $r14 = $r14, 3 (0x3)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x0880014e),        //cb.deqz $r14? 17924 <__libc_fini_array+0x44>;;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x3802f392),        //ld.xs $r0 = $r14[$r18];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x087fff4e),        //cb.dnez $r14? 17914 <__libc_fini_array+0x34>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let __libc_init_array: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _96(0x800000d8a849020ce04c0000),        //make $r19 = 221184 (0x36000)
     _32(0x00000000),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xe0380000),        //make $r14 = 0 (0x0)
     _96(0x880000d8a739000ce5480013),        //sbfd $r18 = $r19, 221184 (0x36000)
     _32(0x08000000),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xfa4a20d2),        //srad $r18 = $r18, 3 (0x3)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x08800192),        //cb.deqz $r18? 1798c <__libc_init_array+0x4c>;;
     _32(0xe138004e),        //addd $r14 = $r14, 1 (0x1)
     _32(0x3802f393),        //ld.xs $r0 = $r14[$r19];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x7001a392),        //compd.ne $r0 = $r18, $r14;;
     _32(0x087fff00),        //cb.dnez $r0? 17978 <__libc_init_array+0x38>;;
     _32(0xe0380000),        //make $r14 = 0 (0x0)
     _96(0x08000000880000d8e04c0000),        //make $r19 = 221184 (0x36000);;
     _96(0x00000000800000d8e5480013),        //sbfd $r18 = $r19, 221184 (0x36000);;
     _32(0x7a4a20d2),        //srad $r18 = $r18, 3 (0x3);;
     _32(0x08800192),        //cb.deqz $r18? 179c4 <__libc_init_array+0x84>;;
     _32(0xe138004e),        //addd $r14 = $r14, 1 (0x1)
     _32(0x3802f393),        //ld.xs $r0 = $r14[$r19];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x7001a392),        //compd.ne $r0 = $r18, $r14;;
     _32(0x087fff00),        //cb.dnez $r0? 179b0 <__libc_init_array+0x70>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let _init_signal_r_part_0: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040100),        //make $r1 = 256 (0x100);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000221),        //call 18278 <_malloc_r>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x888003c0),        //cb.deqz $r0? 17a38 <_init_signal_r.part.0+0x58>
     _64(0x18000001a701460e),        //sd 1304 (0x518)[$r14] = $r0;;
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _32(0x60040020),        //make $r1 = 32 (0x20);;
     _32(0x0f0000c1),        //loopdo $r1, 17a20 <_init_signal_r.part.0+0x40>;;
     _32(0xe1080042),        //addd $r2 = $r2, 1 (0x1)
     _32(0x270ff080),        //sd.xs $r2[$r0] = $r3;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x97fffffb),        //goto 17a24 <_init_signal_r.part.0+0x44>
     _64(0x003fffffe000ffc0),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0x7f03f000)        //nop ;;
 |];

let _init_signal_r: list_I = 
 [|
     _64(0x18000001b8044600),        //ld $r1 = 1304 (0x518)[$r0];;
     _32(0x088000c1),        //cb.deqz $r1? 17a5c <_init_signal_r+0x14>;;
     _32(0x8fd00000),        //ret 
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x17ffffe1)        //goto 179e0 <_init_signal_r.part.0>;;
 |];

let _signal_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _64(0x08000000f80db7c1),        //compw.leu $r3 = $r1, 31 (0x1f);;
     _32(0xea480002),        //copyd $r18 = $r2
     _32(0xf84cffc1),        //zxwd $r19 = $r1
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x8c800383),        //cb.weqz $r3? 17abc <_signal_r+0x5c>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _64(0x18000001b8084600),        //ld $r2 = 1304 (0x518)[$r0];;
     _32(0x088004c2),        //cb.deqz $r2? 17ae0 <_signal_r+0x80>;;
     _32(0x6907f013),        //sxwd $r1 = $r19;;
     _32(0x3802f042),        //ld.xs $r0 = $r1[$r2];;
     _32(0x274bf042),        //sd.xs $r1[$r2] = $r18;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0xe0040016),        //make $r1 = 22 (0x16)
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x1fffffc0),        //call 179e0 <_init_signal_r.part.0>;;
     _32(0xfa040000),        //copyw $r1 = $r0
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x0c7ffb81),        //cb.wnez $r1? 17aa4 <_signal_r+0x44>;;
     _32(0x97ffffea),        //goto 17a98 <_signal_r+0x38>
     _64(0x18000001b808460e),        //ld $r2 = 1304 (0x518)[$r14];;
     _32(0x7f03f000)        //nop ;;
 |];

let _raise_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _64(0x08000000f809b7c1),        //compw.leu $r2 = $r1, 31 (0x1f);;
     _32(0xf848ffc1),        //zxwd $r18 = $r1
     _32(0xe04c0000),        //make $r19 = 0 (0x0)
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xe907f012),        //sxwd $r1 = $r18
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x8c800a82),        //cb.weqz $r2? 17bd0 <_raise_r+0xd0>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _64(0x18000001b8004600),        //ld $r0 = 1304 (0x518)[$r0];;
     _32(0x08800440),        //cb.deqz $r0? 17b7c <_raise_r+0x7c>;;
     _32(0x380ef040),        //ld.xs $r3 = $r1[$r0];;
     _32(0xe1110043),        //compd.eq $r4 = $r3, 1 (0x1)
     _32(0x6009ffc3),        //compd.ne $r2 = $r3, -1 (0xffffffff);;
     _32(0x08800343),        //cb.deqz $r3? 17b7c <_raise_r+0x7c>;;
     _32(0x08000144),        //cb.dnez $r4? 17b60 <_raise_r+0x60>;;
     _32(0x08800582),        //cb.deqz $r2? 17ba8 <_raise_r+0xa8>;;
     _32(0x8fdc0003),        //icall $r3
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x274ff040),        //sd.xs $r1[$r0] = $r19;;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x980000ab),        //call 17e28 <_getpid_r>
     _32(0x6a00000e),        //copyd $r0 = $r14;;
     _32(0xfa080012),        //copyw $r2 = $r18
     _32(0xfa040000),        //copyw $r1 = $r0
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x1000007f),        //goto 17da0 <_kill_r>;;
     _32(0xe0000016),        //make $r0 = 22 (0x16)
     _32(0x604c0001),        //make $r19 = 1 (0x1);;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x2601000e),        //sw 0 (0x0)[$r14] = $r0;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0xe0000016),        //make $r0 = 22 (0x16)
     _64(0x083fffffe04cffc0),        //make $r19 = 4294967295 (0xffffffff);;
     _32(0x97ffffe1),        //goto 17b60 <_raise_r+0x60>
     _32(0x2601000e),        //sw 0 (0x0)[$r14] = $r0;;
     _32(0x7f03f000)        //nop ;;
 |];

let __sigtramp_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _64(0x08000000f809b7c1),        //compw.leu $r2 = $r1, 31 (0x1f);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xf848ffc1),        //zxwd $r18 = $r1
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x8c800802),        //cb.weqz $r2? 17c88 <__sigtramp_r+0xa0>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _64(0x18000001b8084600),        //ld $r2 = 1304 (0x518)[$r0];;
     _32(0x088005c2),        //cb.deqz $r2? 17c74 <__sigtramp_r+0x8c>;;
     _32(0xe90ff012),        //sxwd $r3 = $r18
     _32(0xf4118092),        //addx8wd $r4 = $r18, $r2
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x380af0c2),        //ld.xs $r2 = $r3[$r2];;
     _32(0x6105ffc2),        //compd.eq $r1 = $r2, -1 (0xffffffff);;
     _32(0x088002c2),        //cb.deqz $r2? 17c5c <__sigtramp_r+0x74>;;
     _32(0x88000281),        //cb.dnez $r1? 17c5c <__sigtramp_r+0x74>
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0xe1050042),        //compd.eq $r1 = $r2, 1 (0x1)
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x08000181),        //cb.dnez $r1? 17c5c <__sigtramp_r+0x74>;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x7a000012),        //copyw $r0 = $r18;;
     _32(0x8fdc0002),        //icall $r2
     _32(0x27050004),        //sd 0 (0x0)[$r4] = $r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x1fffff5b),        //call 179e0 <_init_signal_r.part.0>;;
     _32(0x0c000100),        //cb.wnez $r0? 17c88 <__sigtramp_r+0xa0>;;
     _32(0x97ffffe8),        //goto 17c1c <__sigtramp_r+0x34>
     _64(0x18000001b808460e),        //ld $r2 = 1304 (0x518)[$r14];;
     _32(0x97fffff5),        //goto 17c5c <__sigtramp_r+0x74>
     _64(0x003fffffe000ffc0),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0x7f03f000)        //nop ;;
 |];

let raise: list_I = 
 [|
     _32(0xfa040000),        //copyw $r1 = $r0
     _96(0x08000000880000f8e0081000),        //make $r2 = 254016 (0x3e040);;
     _32(0x97ffff96),        //goto 17b00 <_raise_r>
     _32(0x38000002)        //ld $r0 = 0 (0x0)[$r2];;
 |];

let signal: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x08000000880000f8e00c1000),        //make $r3 = 254016 (0x3e040);;
     _32(0xea380001),        //copyd $r14 = $r1
     _64(0xa739000cf809b7c0),        //compw.leu $r2 = $r0, 31 (0x1f)
     _32(0x08000000),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xf848ffc0),        //zxwd $r18 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x8c800382),        //cb.weqz $r2? 17d18 <signal+0x68>
     _32(0x384c0003),        //ld $r19 = 0 (0x0)[$r3];;
     _64(0x18000001b8084613),        //ld $r2 = 1304 (0x518)[$r19];;
     _32(0x088004c2),        //cb.deqz $r2? 17d3c <signal+0x8c>;;
     _32(0x6907f012),        //sxwd $r1 = $r18;;
     _32(0x3802f042),        //ld.xs $r0 = $r1[$r2];;
     _32(0x273bf042),        //sd.xs $r1[$r2] = $r14;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0xe0040016),        //make $r1 = 22 (0x16)
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x26050013),        //sw 0 (0x0)[$r19] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x9fffff29),        //call 179e0 <_init_signal_r.part.0>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xfa040000),        //copyw $r1 = $r0
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x0c7ffb41),        //cb.wnez $r1? 17d00 <signal+0x50>;;
     _32(0x97ffffe9),        //goto 17cf4 <signal+0x44>
     _64(0x18000001b8084613),        //ld $r2 = 1304 (0x518)[$r19];;
     _32(0x7f03f000)        //nop ;;
 |];

let _init_signal: list_I = 
 [|
     _96(0x00000000800000f8e0001000),        //make $r0 = 254016 (0x3e040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _64(0x18000001b8044600),        //ld $r1 = 1304 (0x518)[$r0];;
     _32(0x088000c1),        //cb.deqz $r1? 17d84 <_init_signal+0x24>;;
     _32(0x8fd00000),        //ret 
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x17ffff17)        //goto 179e0 <_init_signal_r.part.0>;;
 |];

let __sigtramp: list_I = 
 [|
     _32(0xfa040000),        //copyw $r1 = $r0
     _96(0x08000000880000f8e0081000),        //make $r2 = 254016 (0x3e040);;
     _32(0x97ffff94),        //goto 17be8 <__sigtramp_r>
     _32(0x38000002)        //ld $r0 = 0 (0x0)[$r2];;
 |];

let _kill_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x780cffc1),        //zxwd $r3 = $r1;;
     _32(0xe0100000),        //make $r4 = 0 (0x0)
     _32(0xfa040002),        //copyw $r1 = $r2
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa000003),        //copyw $r0 = $r3
     _96(0x88000117a749040ce0482200),        //make $r18 = 285832 (0x45c88)
     _32(0x08000000),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x9800075f),        //call 19b50 <_kill>
     _32(0x26110012),        //sw 0 (0x0)[$r18] = $r4;;
     _64(0x07fffffff005b7c0),        //compw.ne $r1 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c8001c1),        //cb.weqz $r1? 17e00 <_kill_r+0x60>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x30040012),        //lwz $r1 = 0 (0x0)[$r18];;
     _32(0x08fffe41),        //cb.deqz $r1? 17de8 <_kill_r+0x48>;;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let _getpid_r: list_I = 
 [|
     _32(0x10000756),        //goto 19b80 <_getpid>;;
     _32(0x00000000)        //errop ;;
 |];

let __call_exitprocs: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0xf858ffc0),        //zxwd $r22 = $r0
     _32(0xe0500000),        //make $r20 = 0 (0x0)
     _96(0x90000106a855080ce0007000),        //make $r0 = 268736 (0x419c0)
     _32(0x10000000),        //so 32 (0x20)[$r12] = $r20r21r22r23;;
     _32(0xea680001),        //copyd $r26 = $r1
     _96(0x8800006aa865100ce05c6800),        //make $r23 = 108960 (0x1a9a0)
     _32(0x08000000),        //so 64 (0x40)[$r12] = $r24r25r26r27;;
     _32(0xe04c0001),        //make $r19 = 1 (0x1)
     _32(0x2849040c),        //sq 16 (0x10)[$r12] = $r18r19;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x27411e0c),        //sd 120 (0x78)[$r12] = $r16;;
     _32(0x2871180c),        //sq 96 (0x60)[$r12] = $r28r29;;
     _32(0x98000090),        //call 180b8 <__libc_lock_acquire>
     _32(0x27791c0c),        //sd 112 (0x70)[$r12] = $r30;;
     _96(0x00000000800000fce000f000),        //make $r0 = 259008 (0x3f3c0);;
     _32(0x38600000),        //ld $r24 = 0 (0x0)[$r0];;
     _32(0x61647e18),        //addd $r25 = $r24, 504 (0x1f8);;
     _32(0xea780019),        //copyd $r30 = $r25
     _32(0x38487e18),        //ld $r18 = 504 (0x1f8)[$r24];;
     _32(0x08800c52),        //cb.deqz $r18? 17f60 <__call_exitprocs+0x130>;;
     _32(0xe16c0412),        //addd $r27 = $r18, 16 (0x10)
     _32(0xe1544412),        //addd $r21 = $r18, 272 (0x110)
     _64(0xb0000212e1748412),        //addd $r29 = $r18, 528 (0x210)
     _32(0x10000000),        //lwz $r0 = 8 (0x8)[$r18];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x693bf000),        //sxwd $r14 = $r0;;
     _32(0x0d800100),        //cb.wgez $r0? 17ecc <__call_exitprocs+0x9c>;;
     _32(0x1000001e),        //goto 17f38 <__call_exitprocs+0x108>;;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x0d00070e),        //cb.wltz $r14? 17f38 <__call_exitprocs+0x108>;;
     _32(0x8880015a),        //cb.deqz $r26? 17ee0 <__call_exitprocs+0xb0>
     _32(0x7808ffce),        //zxwd $r2 = $r14;;
     _32(0x3802f39d),        //ld.xs $r0 = $r14[$r29];;
     _32(0x7101a680),        //compd.eq $r0 = $r0, $r26;;
     _32(0x08fffe80),        //cb.deqz $r0? 17ec4 <__call_exitprocs+0x94>;;
     _32(0x30000212),        //lwz $r0 = 8 (0x8)[$r18];;
     _32(0x380ef39b),        //ld.xs $r3 = $r14[$r27];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7001b380),        //compw.ne $r0 = $r0, $r14;;
     _32(0x0c800c80),        //cb.weqz $r0? 17fb8 <__call_exitprocs+0x188>;;
     _32(0x2753f39b),        //sd.xs $r14[$r27] = $r20;;
     _32(0x08fffcc3),        //cb.deqz $r3? 17ec4 <__call_exitprocs+0x94>;;
     _32(0xf90a7093),        //sllw $r2 = $r19, $r2
     _64(0x18000000b000c412),        //lwz $r0 = 784 (0x310)[$r18];;
     _32(0x30700212),        //lwz $r28 = 8 (0x8)[$r18];;
     _32(0x78011080),        //andw $r0 = $r0, $r2;;
     _32(0x0c000840),        //cb.wnez $r0? 17f94 <__call_exitprocs+0x164>;;
     _32(0x0fdc0003),        //icall $r3;;
     _32(0xe138ffce),        //addd $r14 = $r14, -1 (0xffffffff)
     _32(0x30000212),        //lwz $r0 = 8 (0x8)[$r18];;
     _32(0x7001b700),        //compw.ne $r0 = $r0, $r28;;
     _32(0x0c7ff700),        //cb.wnez $r0? 17e94 <__call_exitprocs+0x64>;;
     _32(0x3800001e),        //ld $r0 = 0 (0x0)[$r30];;
     _32(0x7001a480),        //compd.ne $r0 = $r0, $r18;;
     _32(0x087ff640),        //cb.dnez $r0? 17e94 <__call_exitprocs+0x64>;;
     _32(0x0dfff98e),        //cb.wgez $r14? 17ecc <__call_exitprocs+0x9c>;;
     _32(0x08800297),        //cb.deqz $r23? 17f60 <__call_exitprocs+0x130>;;
     _32(0x30000212),        //lwz $r0 = 8 (0x8)[$r18];;
     _32(0x38040012),        //ld $r1 = 0 (0x0)[$r18];;
     _32(0x0c000840),        //cb.wnez $r0? 17fc8 <__call_exitprocs+0x198>;;
     _32(0x08800801),        //cb.deqz $r1? 17fc8 <__call_exitprocs+0x198>;;
     _32(0x8fdc0017),        //icall $r23
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x2705001e),        //sd 0 (0x0)[$r30] = $r1;;
     _32(0x3848001e),        //ld $r18 = 0 (0x0)[$r30];;
     _32(0x087ff452),        //cb.dnez $r18? 17ea0 <__call_exitprocs+0x70>;;
     _96(0x80000106b8401e0ce0007000),        //make $r0 = 268736 (0x419c0)
     _32(0x00000000),        //ld $r16 = 120 (0x78)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x3c48040c),        //lq $r18r19 = 16 (0x10)[$r12];;
     _32(0x3c54080c),        //lo $r20r21r22r23 = 32 (0x20)[$r12];;
     _32(0x3c64100c),        //lo $r24r25r26r27 = 64 (0x40)[$r12];;
     _32(0x3c70180c),        //lq $r28r29 = 96 (0x60)[$r12];;
     _32(0xe130200c),        //addd $r12 = $r12, 128 (0x80)
     _32(0x38781c0c),        //ld $r30 = 112 (0x70)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x1000008e),        //goto 181c8 <__libc_lock_release>;;
     _64(0x18000000b010c512),        //lwz $r4 = 788 (0x314)[$r18];;
     _32(0x3802f395),        //ld.xs $r0 = $r14[$r21];;
     _32(0x78091084),        //andw $r2 = $r4, $r2;;
     _32(0x0c0001c2),        //cb.wnez $r2? 17fc0 <__call_exitprocs+0x190>;;
     _32(0x8fdc0003),        //icall $r3
     _32(0xea040000),        //copyd $r1 = $r0
     _32(0x7a000016),        //copyw $r0 = $r22;;
     _32(0x17ffffd9),        //goto 17f18 <__call_exitprocs+0xe8>;;
     _32(0x97ffffd0),        //goto 17ef8 <__call_exitprocs+0xc8>
     _32(0x26090212),        //sw 8 (0x8)[$r18] = $r2;;
     _32(0x0fdc0003),        //icall $r3;;
     _32(0x17ffffd5),        //goto 17f18 <__call_exitprocs+0xe8>;;
     _32(0xea780012),        //copyd $r30 = $r18
     _32(0x6a480001),        //copyd $r18 = $r1;;
     _32(0x087fed12),        //cb.dnez $r18? 17ea0 <__call_exitprocs+0x70>;;
     _32(0x17ffffe3)        //goto 17f60 <__call_exitprocs+0x130>;;
 |];

let __libc_lock_init: list_I = 
 [|
     _32(0x08800080),        //cb.deqz $r0? 17fe0 <__libc_lock_init+0x8>;;
     _32(0x10003f09),        //goto 27c00 <__cos_recursive_initlock_base>;;
     _32(0x00000000),        //errop ;;
     _32(0x10003f07)        //goto 27c00 <__cos_recursive_initlock_base>;;
 |];

let __libc_lock_close: list_I = 
 [|
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __libc_lock_try_acquire: list_I = 
 [|
     _32(0x8fc40081),        //get $r1 = $pcr
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x8fc40082),        //get $r2 = $pcr
     _32(0x6407f201),        //extfz $r1 = $r1, 15 (0xf), 8 (0x8);;
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xf4055041),        //addx8w $r1 = $r1, $r1
     _32(0x78083fc2),        //zxbd $r2 = $r2;;
     _32(0xf0055081),        //addx2w $r1 = $r1, $r2
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x98003eff),        //call 27c10 <__cos_recursive_trylock_base>
     _32(0x71040041),        //addw $r1 = $r1, 1 (0x1);;
     _64(0x00000000f005b040),        //compw.ne $r1 = $r0, 1 (0x1);;
     _32(0x0c8001c1),        //cb.weqz $r1? 18040 <__libc_lock_try_acquire+0x50>;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _64(0xb840040cf101b000),        //compw.eq $r0 = $r0, 0 (0x0)
     _32(0x08000000),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _96(0x0000000080000000e0040000),        //make $r1 = 0 (0x0);;
     _32(0x08000201),        //cb.dnez $r1? 1806c <__libc_lock_try_acquire+0x7c>;;
     _32(0x3fcd0000),        //fence ;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _64(0xb840040cf101b000),        //compw.eq $r0 = $r0, 0 (0x0)
     _32(0x08000000),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _96(0x80000000e0080000e0040040),        //make $r1 = 1 (0x1)
     _96(0x080000008800000080000000),        //make $r2 = 0 (0x0);;
     _32(0xe0090002),        //compd.ne $r2 = $r2, 0 (0x0)
     _64(0x08000000f505b041),        //compw.gt $r1 = $r1, 1 (0x1);;
     _32(0x78051081),        //andw $r1 = $r1, $r2;;
     _32(0x0c000101),        //cb.wnez $r1? 180a4 <__libc_lock_try_acquire+0xb4>;;
     _32(0x3f8d0000),        //dinval ;;
     _32(0x97ffffee),        //goto 18054 <__libc_lock_try_acquire+0x64>
     _32(0x3fcd0000),        //fence ;;
     _32(0x98003d07),        //call 274c0 <mppa_cos_l2_wb_inval>
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x97fffffb),        //goto 1809c <__libc_lock_try_acquire+0xac>
     _32(0x3f8d0000)        //dinval ;;
 |];

let __libc_lock_acquire: list_I = 
 [|
     _32(0x8fc40081),        //get $r1 = $pcr
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x8fc40082),        //get $r2 = $pcr
     _32(0xe407f201),        //extfz $r1 = $r1, 15 (0xf), 8 (0x8)
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xf4055041),        //addx8w $r1 = $r1, $r1
     _32(0x78383fc2),        //zxbd $r14 = $r2;;
     _32(0xf0395381),        //addx2w $r14 = $r1, $r14
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2849060c),        //sq 24 (0x18)[$r12] = $r18r19;;
     _32(0xf14c004e),        //addw $r19 = $r14, 1 (0x1)
     _32(0xe0500000),        //make $r20 = 0 (0x0)
     _32(0xf138004e),        //addw $r14 = $r14, 1 (0x1)
     _32(0x27510a0c),        //sd 40 (0x28)[$r12] = $r20;;
     _32(0x27410c0c),        //sd 48 (0x30)[$r12] = $r16;;
     _32(0x9fffffbe),        //call 17ff0 <__libc_lock_try_acquire>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x0c800380),        //cb.weqz $r0? 18138 <__libc_lock_acquire+0x80>;;
     _32(0x26510e0c),        //sw 56 (0x38)[$r12] = $r20;;
     _32(0x30040e0c),        //lwz $r1 = 56 (0x38)[$r12];;
     _32(0x7705b4c1),        //compw.geu $r1 = $r1, $r19;;
     _32(0x0c7ffe81),        //cb.wnez $r1? 180f8 <__libc_lock_acquire+0x40>;;
     _32(0x30040e0c),        //lwz $r1 = 56 (0x38)[$r12];;
     _32(0x71040041),        //addw $r1 = $r1, 1 (0x1);;
     _32(0x26050e0c),        //sw 56 (0x38)[$r12] = $r1;;
     _32(0x30040e0c),        //lwz $r1 = 56 (0x38)[$r12];;
     _32(0x7605b381),        //compw.ltu $r1 = $r1, $r14;;
     _32(0x0c7ffec1),        //cb.wnez $r1? 18114 <__libc_lock_acquire+0x5c>;;
     _32(0x9fffffb1),        //call 17ff0 <__libc_lock_try_acquire>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x0c7ffd00),        //cb.wnez $r0? 18104 <__libc_lock_acquire+0x4c>;;
     _96(0x0000000080000000e0000000),        //make $r0 = 0 (0x0);;
     _32(0x08000240),        //cb.dnez $r0? 18168 <__libc_lock_acquire+0xb0>;;
     _32(0x3fcd0000),        //fence ;;
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500a0c),        //ld $r20 = 40 (0x28)[$r12];;
     _96(0x80000000e0040000e0000040),        //make $r0 = 1 (0x1)
     _96(0x080000008800000080000000),        //make $r1 = 0 (0x0);;
     _32(0xe0050001),        //compd.ne $r1 = $r1, 0 (0x0)
     _64(0x08000000f501b040),        //compw.gt $r0 = $r0, 1 (0x1);;
     _32(0x78011040),        //andw $r0 = $r0, $r1;;
     _32(0x0c000280),        //cb.wnez $r0? 181b8 <__libc_lock_acquire+0x100>;;
     _32(0x3f8d0000),        //dinval ;;
     _32(0x3fcd0000),        //fence ;;
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500a0c),        //ld $r20 = 40 (0x28)[$r12];;
     _32(0x18003cc2),        //call 274c0 <mppa_cos_l2_wb_inval>;;
     _32(0x97fffff7),        //goto 18198 <__libc_lock_acquire+0xe0>
     _32(0x3f8d0000),        //dinval ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __libc_lock_release: list_I = 
 [|
     _32(0x8fc40081),        //get $r1 = $pcr
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x8fc40082),        //get $r2 = $pcr
     _32(0x6407f201),        //extfz $r1 = $r1, 15 (0xf), 8 (0x8);;
     _32(0xf4055041),        //addx8w $r1 = $r1, $r1
     _32(0xf80c3fc2),        //zxbd $r3 = $r2
     _96(0x1000000090000000e0080000),        //make $r2 = 0 (0x0);;
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x700550c1),        //addx2w $r1 = $r1, $r3;;
     _32(0xf1040041),        //addw $r1 = $r1, 1 (0x1)
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x880001c2),        //cb.dnez $r2? 18218 <__libc_lock_release+0x50>
     _32(0x6907f001),        //sxwd $r1 = $r1;;
     _32(0x3fcd0000),        //fence ;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x10003ed1),        //goto 27d58 <__cos_recursive_unlock_base>;;
     _96(0x80000000e00c0000e0080040),        //make $r2 = 1 (0x1)
     _96(0x080000008800000080000000),        //make $r3 = 0 (0x0);;
     _32(0xe00d0003),        //compd.ne $r3 = $r3, 0 (0x0)
     _64(0x08000000f509b042),        //compw.gt $r2 = $r2, 1 (0x1);;
     _32(0x780910c2),        //andw $r2 = $r2, $r3;;
     _32(0x0c0001c2),        //cb.wnez $r2? 1825c <__libc_lock_release+0x94>;;
     _32(0x3f8d0000),        //dinval ;;
     _32(0x3fcd0000),        //fence ;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x10003ec0),        //goto 27d58 <__cos_recursive_unlock_base>;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x98003c98),        //call 274c0 <mppa_cos_l2_wb_inval>
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x97fffff6),        //goto 18248 <__libc_lock_release+0x80>
     _32(0x3f8d0000)        //dinval ;;
 |];

let _malloc_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0xe14805c1),        //addd $r18 = $r1, 23 (0x17)
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xe9090b92),        //compd.gtu $r2 = $r18, 46 (0x2e)
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2855060c),        //so 24 (0x18)[$r12] = $r20r21r22r23;;
     _32(0x28650e0c),        //so 56 (0x38)[$r12] = $r24r25r26r27;;
     _32(0x88000982),        //cb.dnez $r2? 18334 <_malloc_r+0xbc>
     _32(0x2741160c),        //sd 88 (0x58)[$r12] = $r16;;
     _32(0xe9050801),        //compd.gtu $r1 = $r1, 32 (0x20)
     _32(0x60480020),        //make $r18 = 32 (0x20);;
     _32(0x08002ac1),        //cb.dnez $r1? 18558 <_malloc_r+0x2e0>;;
     _32(0x18000258),        //call 18c10 <__malloc_lock>;;
     _32(0xe0000050),        //make $r0 = 80 (0x50)
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _96(0x800000fab8386600e1086400),        //addd $r2 = $r0, 256400 (0x3e990)
     _96(0x18000000980000fa80000000),        //ld $r14 = 256408 (0x3e998)[$r0];;
     _32(0x6104fc02),        //addd $r1 = $r2, -16 (0xfffffff0);;
     _32(0x7005a04e),        //compd.ne $r1 = $r14, $r1;;
     _32(0x08802a81),        //cb.deqz $r1? 18584 <_malloc_r+0x30c>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x3804020e),        //ld $r1 = 8 (0x8)[$r14];;
     _32(0x3808060e),        //ld $r2 = 24 (0x18)[$r14];;
     _32(0x380c040e),        //ld $r3 = 16 (0x10)[$r14];;
     _32(0x6804ff01),        //andd $r1 = $r1, -4 (0xfffffffc);;
     _32(0xf105004e),        //addd $r1 = $r14, $r1
     _32(0x27090603),        //sd 24 (0x18)[$r3] = $r2;;
     _32(0x270d0402),        //sd 16 (0x10)[$r2] = $r3;;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x6a080042),        //ord $r2 = $r2, 1 (0x1);;
     _32(0x98000246),        //call 18c20 <__malloc_unlock>
     _32(0x27090201),        //sd 8 (0x8)[$r1] = $r2;;
     _32(0xe100040e),        //addd $r0 = $r14, 16 (0x10)
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0x6848fc12),        //andd $r18 = $r18, -16 (0xfffffff0);;
     _32(0xf905a481),        //compd.gtu $r1 = $r1, $r18
     _64(0x081fffffe909ffd2),        //compd.gtu $r2 = $r18, 2147483647 (0x7fffffff);;
     _32(0x7a051042),        //orw $r1 = $r2, $r1;;
     _32(0x0c002101),        //cb.wnez $r1? 18558 <_malloc_r+0x2e0>;;
     _32(0x18000231),        //call 18c10 <__malloc_lock>;;
     _32(0xe9017dd2),        //compd.gtu $r0 = $r18, 503 (0x1f7)
     _32(0xe0100400),        //make $r4 = 1024 (0x400)
     _32(0xe0140040),        //make $r5 = 64 (0x40)
     _32(0x6018003f),        //make $r6 = 63 (0x3f);;
     _32(0x088065c0),        //cb.deqz $r0? 189bc <_malloc_r+0x744>;;
     _32(0x7b022252),        //srld $r0 = $r18, 9 (0x9);;
     _32(0x08004700),        //cb.dnez $r0? 187d8 <_malloc_r+0x560>;;
     _96(0x800000fab8386604e1106004),        //addd $r4 = $r4, 256384 (0x3e980)
     _96(0x18000000980000fa80000000),        //ld $r14 = 256408 (0x3e998)[$r4];;
     _32(0x7101a384),        //compd.eq $r0 = $r4, $r14;;
     _32(0x08800180),        //cb.deqz $r0? 183a0 <_malloc_r+0x128>;;
     _32(0x1000000b),        //goto 183b8 <_malloc_r+0x140>;;
     _32(0x09804e02),        //cb.dgez $r2? 18870 <_malloc_r+0x5f8>;;
     _32(0x3838060e),        //ld $r14 = 24 (0x18)[$r14];;
     _32(0x7005a384),        //compd.ne $r1 = $r4, $r14;;
     _32(0x088001c1),        //cb.deqz $r1? 183b8 <_malloc_r+0x140>;;
     _32(0x3804020e),        //ld $r1 = 8 (0x8)[$r14];;
     _32(0x6804ff01),        //andd $r1 = $r1, -4 (0xfffffffc);;
     _32(0x75090052),        //sbfd $r2 = $r18, $r1;;
     _32(0x650d07c2),        //compd.gt $r3 = $r2, 31 (0x1f);;
     _32(0x08fffe03),        //cb.deqz $r3? 18390 <_malloc_r+0x118>;;
     _32(0x6a140006),        //copyd $r5 = $r6;;
     _96(0x00000000800000fae0506400),        //make $r20 = 256400 (0x3e990);;
     _32(0xe1040414),        //addd $r1 = $r20, 16 (0x10)
     _32(0x38380814),        //ld $r14 = 32 (0x20)[$r20];;
     _32(0x7001a04e),        //compd.ne $r0 = $r14, $r1;;
     _32(0x08801e80),        //cb.deqz $r0? 185b8 <_malloc_r+0x340>;;
     _32(0x3808020e),        //ld $r2 = 8 (0x8)[$r14];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x750d0092),        //sbfd $r3 = $r18, $r2;;
     _32(0x640107c3),        //compd.le $r0 = $r3, 31 (0x1f);;
     _32(0x08805f40),        //cb.deqz $r0? 189d8 <_malloc_r+0x760>;;
     _32(0xe9017fc2),        //compd.gtu $r0 = $r2, 511 (0x1ff)
     _32(0x27050a14),        //sd 40 (0x28)[$r20] = $r1;;
     _32(0x89804103),        //cb.dgez $r3? 18800 <_malloc_r+0x588>
     _32(0x27050814),        //sd 32 (0x20)[$r20] = $r1;;
     _32(0x08004c40),        //cb.dnez $r0? 188bc <_malloc_r+0x644>;;
     _32(0xe60b20c2),        //extfz $r2 = $r2, 34 (0x22), 3 (0x3)
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x380c0214),        //ld $r3 = 8 (0x8)[$r20];;
     _32(0xf1040042),        //addw $r1 = $r2, 1 (0x1)
     _32(0x7a0a3082),        //sraw $r2 = $r2, 2 (0x2);;
     _32(0xf9063041),        //sllw $r1 = $r1, 1 (0x1)
     _32(0x790a6080),        //slld $r2 = $r0, $r2;;
     _32(0xe903f001),        //sxwd $r0 = $r1
     _32(0x7a0900c2),        //ord $r2 = $r2, $r3;;
     _32(0xf90220c0),        //slld $r0 = $r0, 3 (0x3)
     _32(0x27090214),        //sd 8 (0x8)[$r20] = $r2;;
     _96(0x800000fab8046400e10c6000),        //addd $r3 = $r0, 256384 (0x3e980)
     _96(0x18000000980000fa80000000),        //ld $r1 = 256400 (0x3e990)[$r0];;
     _32(0x270d060e),        //sd 24 (0x18)[$r14] = $r3;;
     _32(0x2705040e),        //sd 16 (0x10)[$r14] = $r1;;
     _96(0x18000000980000faa7396400),        //sd 256400 (0x3e990)[$r0] = $r14;;
     _32(0x27390601),        //sd 24 (0x18)[$r1] = $r14;;
     _32(0xfa023085),        //sraw $r0 = $r5, 2 (0x2)
     _32(0x601c0001),        //make $r7 = 1 (0x1);;
     _32(0x791e6007),        //slld $r7 = $r7, $r0;;
     _32(0x7901a087),        //compd.gtu $r0 = $r7, $r2;;
     _32(0x08001680),        //cb.dnez $r0? 185d0 <_malloc_r+0x358>;;
     _32(0x78010087),        //andd $r0 = $r7, $r2;;
     _32(0x080002c0),        //cb.dnez $r0? 1849c <_malloc_r+0x224>;;
     _32(0xf91e2047),        //slld $r7 = $r7, 1 (0x1)
     _32(0x7814ff05),        //andw $r5 = $r5, -4 (0xfffffffc);;
     _32(0xf8010087),        //andd $r0 = $r7, $r2
     _32(0x71140105),        //addw $r5 = $r5, 4 (0x4);;
     _32(0x7814ffc5),        //zxwd $r5 = $r5;;
     _32(0x08000140),        //cb.dnez $r0? 1849c <_malloc_r+0x224>;;
     _32(0xf91e2047),        //slld $r7 = $r7, 1 (0x1)
     _32(0x71140105),        //addw $r5 = $r5, 4 (0x4);;
     _32(0x78010087),        //andd $r0 = $r7, $r2;;
     _32(0x08ffff40),        //cb.deqz $r0? 1848c <_malloc_r+0x214>;;
     _96(0x00000000800000fae0286400),        //make $r10 = 256400 (0x3e990);;
     _32(0xf1000045),        //addw $r0 = $r5, 1 (0x1)
     _32(0x6a240005),        //copyd $r9 = $r5;;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _64(0x07fffffff4018400),        //addx8wd $r0 = $r0, 4294967280 (0xfffffff0);;
     _96(0x00000000800000fae1006400),        //addd $r0 = $r0, 256400 (0x3e990);;
     _32(0x6a200000),        //copyd $r8 = $r0;;
     _32(0x38040608),        //ld $r1 = 24 (0x18)[$r8];;
     _32(0x7109a048),        //compd.eq $r2 = $r8, $r1;;
     _32(0x08800102),        //cb.deqz $r2? 184e4 <_malloc_r+0x26c>;;
     _32(0x10000128),        //goto 18978 <_malloc_r+0x700>;;
     _32(0x09804b43),        //cb.dgez $r3? 18990 <_malloc_r+0x718>;;
     _32(0x08804986),        //cb.deqz $r6? 18978 <_malloc_r+0x700>;;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x38040601),        //ld $r1 = 24 (0x18)[$r1];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0xf50d0092),        //sbfd $r3 = $r18, $r2
     _32(0x7019a048),        //compd.ne $r6 = $r8, $r1;;
     _32(0x641107c3),        //compd.le $r4 = $r3, 31 (0x1f);;
     _32(0x087ffdc4),        //cb.dnez $r4? 184dc <_malloc_r+0x264>;;
     _32(0xea000052),        //ord $r0 = $r18, 1 (0x1)
     _32(0xf149048e),        //addd $r18 = $r14, $r18
     _96(0x900000fab818040ee0106400),        //make $r4 = 256400 (0x3e990)
     _32(0x10000000),        //ld $r6 = 16 (0x10)[$r14];;
     _32(0xe1140404),        //addd $r5 = $r4, 16 (0x10)
     _32(0xea1c0043),        //ord $r7 = $r3, 1 (0x1)
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x2701020e),        //sd 8 (0x8)[$r14] = $r0;;
     _32(0x27050606),        //sd 24 (0x18)[$r6] = $r1;;
     _32(0x27190401),        //sd 16 (0x10)[$r1] = $r6;;
     _32(0x27490a04),        //sd 40 (0x28)[$r4] = $r18;;
     _32(0x27490804),        //sd 32 (0x20)[$r4] = $r18;;
     _32(0x27150612),        //sd 24 (0x18)[$r18] = $r5;;
     _32(0x27150412),        //sd 16 (0x10)[$r18] = $r5;;
     _32(0x271d0212),        //sd 8 (0x8)[$r18] = $r7;;
     _32(0x980001b6),        //call 18c20 <__malloc_unlock>
     _32(0x270fe08e),        //sd $r2[$r14] = $r3;;
     _32(0x90000005),        //goto 18564 <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0xe004000c),        //make $r1 = 12 (0xc)
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26050013),        //sw 0 (0x0)[$r19] = $r1;;
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0xf1140085),        //addw $r5 = $r5, 2 (0x2)
     _96(0x880000fab8386a00e0506400),        //make $r20 = 256400 (0x3e990)
     _96(0x18000000980000fa88000000),        //ld $r14 = 256424 (0x3e9a8)[$r0];;
     _32(0x61040414),        //addd $r1 = $r20, 16 (0x10);;
     _32(0x7109a382),        //compd.eq $r2 = $r2, $r14;;
     _32(0x08ffd382),        //cb.deqz $r2? 182e0 <_malloc_r+0x68>;;
     _32(0x38380814),        //ld $r14 = 32 (0x20)[$r20];;
     _32(0x7001a04e),        //compd.ne $r0 = $r14, $r1;;
     _32(0x087fe200),        //cb.dnez $r0? 183d4 <_malloc_r+0x15c>;;
     _32(0xfa023085),        //sraw $r0 = $r5, 2 (0x2)
     _32(0xe01c0001),        //make $r7 = 1 (0x1)
     _32(0x38080214),        //ld $r2 = 8 (0x8)[$r20];;
     _32(0x791e6007),        //slld $r7 = $r7, $r0;;
     _32(0x7901a087),        //compd.gtu $r0 = $r7, $r2;;
     _32(0x08ffea00),        //cb.deqz $r0? 1846c <_malloc_r+0x1f4>;;
     _96(0x800000fae06c6000e0646400),        //make $r25 = 256400 (0x3e990)
     _96(0x08000000880000fa80000000),        //make $r27 = 256384 (0x3e980);;
     _96(0x80000106b8380419e0688000),        //make $r26 = 268800 (0x41a00)
     _32(0x00000000),        //ld $r14 = 16 (0x10)[$r25];;
     _32(0x3858020e),        //ld $r22 = 8 (0x8)[$r14];;
     _32(0x6858ff16),        //andd $r22 = $r22, -4 (0xfffffffc);;
     _32(0xf5010592),        //sbfd $r0 = $r18, $r22
     _32(0xf909a592),        //compd.gtu $r2 = $r18, $r22
     _32(0x7161058e),        //addd $r24 = $r14, $r22;;
     _32(0x640507c0),        //compd.le $r1 = $r0, 31 (0x1f);;
     _32(0x7a051081),        //orw $r1 = $r1, $r2;;
     _32(0x0c8020c1),        //cb.weqz $r1? 18820 <_malloc_r+0x5a8>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _96(0x88000106b808001be0048e00),        //make $r1 = 268856 (0x41a38)
     _32(0x08000000),        //ld $r2 = 0 (0x0)[$r27];;
     _32(0x38540001),        //ld $r21 = 0 (0x0)[$r1];;
     _32(0x6009ffc2),        //compd.ne $r2 = $r2, -1 (0xffffffff);;
     _32(0x71550552),        //addd $r21 = $r18, $r21;;
     _32(0xe1540815),        //addd $r21 = $r21, 32 (0x20)
     _64(0x08000004e10407d5),        //addd $r1 = $r21, 4127 (0x101f);;
     _64(0x07fffffce8040001),        //andd $r1 = $r1, -4096 (0xfffffffffffff000);;
     _32(0x70560042),        //cmoved.dnez $r2? $r21 = $r1;;
     _32(0x980001d0),        //call 18d90 <_sbrk_r>
     _32(0x6a040015),        //copyd $r1 = $r21;;
     _32(0xea5c0000),        //copyd $r23 = $r0
     _32(0x6001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff);;
     _32(0x7905a5d8),        //compd.gtu $r1 = $r24, $r23;;
     _32(0x08804640),        //cb.deqz $r0? 18ac8 <_malloc_r+0x850>;;
     _96(0x00000000800000fae0006400),        //make $r0 = 256400 (0x3e990);;
     _32(0x7001a00e),        //compd.ne $r0 = $r14, $r0;;
     _32(0xf8011040),        //andw $r0 = $r0, $r1
     _32(0x7005a5d8),        //compd.ne $r1 = $r24, $r23;;
     _32(0x0c004480),        //cb.wnez $r0? 18ac8 <_malloc_r+0x850>;;
     _32(0x3000001a),        //lwz $r0 = 0 (0x0)[$r26];;
     _32(0xf1091540),        //addw $r2 = $r0, $r21
     _32(0x71011540),        //addw $r0 = $r0, $r21;;
     _32(0x88804101),        //cb.deqz $r1? 18aa0 <_malloc_r+0x828>
     _32(0x2609001a),        //sw 0 (0x0)[$r26] = $r2;;
     _32(0x3800001b),        //ld $r0 = 0 (0x0)[$r27];;
     _32(0x6001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff);;
     _32(0x08804200),        //cb.deqz $r0? 18ac0 <_malloc_r+0x848>;;
     _32(0x750105d8),        //sbfd $r0 = $r24, $r23;;
     _32(0x71011080),        //addw $r0 = $r0, $r2;;
     _32(0x2601001a),        //sw 0 (0x0)[$r26] = $r0;;
     _32(0xe80003d7),        //andd $r0 = $r23, 15 (0xf)
     _32(0x60601000),        //make $r24 = 4096 (0x1000);;
     _32(0x08800140),        //cb.deqz $r0? 186cc <_malloc_r+0x454>;;
     _32(0xe5040400),        //sbfd $r1 = $r0, 16 (0x10)
     _64(0x08000004e5600400),        //sbfd $r24 = $r0, 4112 (0x1010);;
     _32(0x715d0057),        //addd $r23 = $r23, $r1;;
     _32(0xf1050557),        //addd $r1 = $r23, $r21
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x60540001),        //make $r21 = 1 (0x1);;
     _64(0x00000003e804ffc1),        //andd $r1 = $r1, 4095 (0xfff);;
     _32(0x75610601),        //sbfd $r24 = $r1, $r24;;
     _32(0x980001ab),        //call 18d90 <_sbrk_r>
     _32(0x6a040018),        //copyd $r1 = $r24;;
     _32(0xe109ffc0),        //compd.eq $r2 = $r0, -1 (0xffffffff)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x08000142),        //cb.dnez $r2? 18708 <_malloc_r+0x490>;;
     _32(0xf5090017),        //sbfd $r2 = $r23, $r0
     _32(0x7804ffd8),        //zxwd $r1 = $r24;;
     _32(0x71550602),        //addd $r21 = $r2, $r24;;
     _32(0x6a540055),        //ord $r21 = $r21, 1 (0x1);;
     _32(0xf151a50e),        //compd.eq $r20 = $r14, $r20
     _32(0xe0100009),        //make $r4 = 9 (0x9)
     _96(0x900000fab000001ae0606400),        //make $r24 = 256400 (0x3e990)
     _32(0x10000000),        //lwz $r0 = 0 (0x0)[$r26];;
     _32(0x275d0418),        //sd 16 (0x10)[$r24] = $r23;;
     _32(0x27550217),        //sd 8 (0x8)[$r23] = $r21;;
     _32(0xf1091040),        //addw $r2 = $r0, $r1
     _32(0xf1011040),        //addw $r0 = $r0, $r1
     _32(0x690507d6),        //compd.gtu $r1 = $r22, 31 (0x1f);;
     _32(0x88004154),        //cb.dnez $r20? 18b48 <_malloc_r+0x8d0>
     _32(0x2609001a),        //sw 0 (0x0)[$r26] = $r2;;
     _32(0x08804141),        //cb.deqz $r1? 18b50 <_malloc_r+0x8d8>;;
     _32(0xe104fa16),        //addd $r1 = $r22, -24 (0xffffffe8)
     _32(0x3808020e),        //ld $r2 = 8 (0x8)[$r14];;
     _32(0x6804fc01),        //andd $r1 = $r1, -16 (0xfffffff0);;
     _32(0xf10d004e),        //addd $r3 = $r14, $r1
     _32(0x691507c1),        //compd.gtu $r5 = $r1, 31 (0x1f);;
     _32(0x68080042),        //andd $r2 = $r2, 1 (0x1);;
     _32(0x7a050042),        //ord $r1 = $r2, $r1;;
     _32(0x2705020e),        //sd 8 (0x8)[$r14] = $r1;;
     _32(0x27110203),        //sd 8 (0x8)[$r3] = $r4;;
     _32(0x88004545),        //cb.dnez $r5? 18bb8 <_malloc_r+0x940>
     _32(0x27110403),        //sd 16 (0x10)[$r3] = $r4;;
     _32(0xea380017),        //copyd $r14 = $r23
     _32(0x38540217),        //ld $r21 = 8 (0x8)[$r23];;
     _32(0xe903f000),        //sxwd $r0 = $r0
     _96(0x0800000088000106e0088c00),        //make $r2 = 268848 (0x41a30);;
     _32(0x38040002),        //ld $r1 = 0 (0x0)[$r2];;
     _32(0x7805a040),        //compd.leu $r1 = $r0, $r1;;
     _32(0x08000081),        //cb.dnez $r1? 18794 <_malloc_r+0x51c>;;
     _32(0x27010002),        //sd 0 (0x0)[$r2] = $r0;;
     _96(0x0000000080000106e0088a00),        //make $r2 = 268840 (0x41a28);;
     _32(0x38040002),        //ld $r1 = 0 (0x0)[$r2];;
     _32(0x7805a040),        //compd.leu $r1 = $r0, $r1;;
     _32(0x08000081),        //cb.dnez $r1? 187b0 <_malloc_r+0x538>;;
     _32(0x27010002),        //sd 0 (0x0)[$r2] = $r0;;
     _32(0x6854ff15),        //andd $r21 = $r21, -4 (0xfffffffc);;
     _32(0xf5010552),        //sbfd $r0 = $r18, $r21
     _32(0x7955a552),        //compd.gtu $r21 = $r18, $r21;;
     _32(0x640507c0),        //compd.le $r1 = $r0, 31 (0x1f);;
     _32(0x7a551055),        //orw $r21 = $r21, $r1;;
     _32(0x0c8005d5),        //cb.weqz $r21? 18820 <_malloc_r+0x5a8>;;
     _32(0x98000116),        //call 18c20 <__malloc_unlock>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x97ffff65),        //goto 18564 <_malloc_r+0x2ec>
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x69050100),        //compd.gtu $r1 = $r0, 4 (0x4);;
     _32(0x080016c1),        //cb.dnez $r1? 18948 <_malloc_r+0x6d0>;;
     _32(0x66175192),        //extfz $r5 = $r18, 37 (0x25), 6 (0x6);;
     _32(0xf1100e45),        //addw $r4 = $r5, 57 (0x39)
     _32(0xf1180e05),        //addw $r6 = $r5, 56 (0x38)
     _32(0x71140e45),        //addw $r5 = $r5, 57 (0x39);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffedd),        //goto 1836c <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xf109008e),        //addd $r2 = $r14, $r2
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38040202),        //ld $r1 = 8 (0x8)[$r2];;
     _32(0x6a040041),        //ord $r1 = $r1, 1 (0x1);;
     _32(0x98000104),        //call 18c20 <__malloc_unlock>
     _32(0x27050202),        //sd 8 (0x8)[$r2] = $r1;;
     _32(0x97ffff53),        //goto 18564 <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0xea0c0052),        //ord $r3 = $r18, 1 (0x1)
     _32(0xf149048e),        //addd $r18 = $r14, $r18
     _32(0xea040040),        //ord $r1 = $r0, 1 (0x1)
     _96(0x18000000980000fae0086400),        //make $r2 = 256400 (0x3e990);;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x270d020e),        //sd 8 (0x8)[$r14] = $r3;;
     _32(0x27490402),        //sd 16 (0x10)[$r2] = $r18;;
     _32(0x980000f7),        //call 18c20 <__malloc_unlock>
     _32(0x27050212),        //sd 8 (0x8)[$r18] = $r1;;
     _32(0xe100040e),        //addd $r0 = $r14, 16 (0x10)
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0xf105004e),        //addd $r1 = $r14, $r1
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x380c060e),        //ld $r3 = 24 (0x18)[$r14];;
     _32(0x3810040e),        //ld $r4 = 16 (0x10)[$r14];;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x270d0604),        //sd 24 (0x18)[$r4] = $r3;;
     _32(0x27110403),        //sd 16 (0x10)[$r3] = $r4;;
     _32(0x6a080042),        //ord $r2 = $r2, 1 (0x1);;
     _32(0x980000e4),        //call 18c20 <__malloc_unlock>
     _32(0x27090201),        //sd 8 (0x8)[$r1] = $r2;;
     _32(0xe100040e),        //addd $r0 = $r14, 16 (0x10)
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0x7b062242),        //srld $r1 = $r2, 9 (0x9);;
     _32(0x69010101),        //compd.gtu $r0 = $r1, 4 (0x4);;
     _32(0x088014c0),        //cb.deqz $r0? 18a10 <_malloc_r+0x798>;;
     _32(0x69010501),        //compd.gtu $r0 = $r1, 20 (0x14);;
     _32(0x08002300),        //cb.dnez $r0? 18afc <_malloc_r+0x884>;;
     _32(0xf1001701),        //addw $r0 = $r1, 92 (0x5c)
     _32(0x710416c1),        //addw $r1 = $r1, 91 (0x5b);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _96(0x800000fab80c6400e1006000),        //addd $r0 = $r0, 256384 (0x3e980)
     _96(0x18000000980000fa80000000),        //ld $r3 = 256400 (0x3e990)[$r0];;
     _32(0x7011a0c0),        //compd.ne $r4 = $r0, $r3;;
     _32(0x08801d44),        //cb.deqz $r4? 18ad4 <_malloc_r+0x85c>;;
     _32(0x38040203),        //ld $r1 = 8 (0x8)[$r3];;
     _32(0x6804ff01),        //andd $r1 = $r1, -4 (0xfffffffc);;
     _32(0x7905a081),        //compd.gtu $r1 = $r1, $r2;;
     _32(0x08800101),        //cb.deqz $r1? 18920 <_malloc_r+0x6a8>;;
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x7105a0c0),        //compd.eq $r1 = $r0, $r3;;
     _32(0x08fffe81),        //cb.deqz $r1? 18904 <_malloc_r+0x68c>;;
     _96(0x800000fab8000603e0046400),        //make $r1 = 256400 (0x3e990)
     _32(0x00000000),        //ld $r0 = 24 (0x18)[$r3];;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x2701060e),        //sd 24 (0x18)[$r14] = $r0;;
     _32(0x270d040e),        //sd 16 (0x10)[$r14] = $r3;;
     _32(0x27390400),        //sd 16 (0x10)[$r0] = $r14;;
     _32(0x97fffec6),        //goto 18458 <_malloc_r+0x1e0>
     _32(0x27390603),        //sd 24 (0x18)[$r3] = $r14;;
     _32(0x69050500),        //compd.gtu $r1 = $r0, 20 (0x14);;
     _32(0x08800e01),        //cb.deqz $r1? 18a2c <_malloc_r+0x7b4>;;
     _32(0x69051500),        //compd.gtu $r1 = $r0, 84 (0x54);;
     _32(0x08001cc1),        //cb.dnez $r1? 18b20 <_malloc_r+0x8a8>;;
     _32(0x6617b312),        //extfz $r5 = $r18, 43 (0x2b), 12 (0xc);;
     _32(0xf1101bc5),        //addw $r4 = $r5, 111 (0x6f)
     _32(0xf1181b85),        //addw $r6 = $r5, 110 (0x6e)
     _32(0x71141bc5),        //addw $r5 = $r5, 111 (0x6f);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffe7f),        //goto 1836c <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xf1240049),        //addw $r9 = $r9, 1 (0x1)
     _32(0x61200408),        //addd $r8 = $r8, 16 (0x10);;
     _32(0xf80400c9),        //andw $r1 = $r9, 3 (0x3)
     _32(0x7824ffc9),        //zxwd $r9 = $r9;;
     _32(0x0c7fb441),        //cb.wnez $r1? 184cc <_malloc_r+0x254>;;
     _32(0x10000032),        //goto 18a54 <_malloc_r+0x7dc>;;
     _32(0xf109008e),        //addd $r2 = $r14, $r2
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x3810040e),        //ld $r4 = 16 (0x10)[$r14];;
     _32(0x380c0202),        //ld $r3 = 8 (0x8)[$r2];;
     _32(0x6a0c0043),        //ord $r3 = $r3, 1 (0x1);;
     _32(0x270d0202),        //sd 8 (0x8)[$r2] = $r3;;
     _32(0x27050604),        //sd 24 (0x18)[$r4] = $r1;;
     _32(0x9800009d),        //call 18c20 <__malloc_unlock>
     _32(0x27110401),        //sd 16 (0x10)[$r1] = $r4;;
     _32(0x97fffeec),        //goto 18564 <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0x7b1620d2),        //srld $r5 = $r18, 3 (0x3);;
     _32(0xf1000045),        //addw $r0 = $r5, 1 (0x1)
     _32(0x7814ffc5),        //zxwd $r5 = $r5;;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97fffe3b),        //goto 182bc <_malloc_r+0x44>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0xea140052),        //ord $r5 = $r18, 1 (0x1)
     _32(0xf149048e),        //addd $r18 = $r14, $r18
     _32(0xea100043),        //ord $r4 = $r3, 1 (0x1)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x2715020e),        //sd 8 (0x8)[$r14] = $r5;;
     _32(0x27490a14),        //sd 40 (0x28)[$r20] = $r18;;
     _32(0x27490814),        //sd 32 (0x20)[$r20] = $r18;;
     _32(0x27050612),        //sd 24 (0x18)[$r18] = $r1;;
     _32(0x27050412),        //sd 16 (0x10)[$r18] = $r1;;
     _32(0x27110212),        //sd 8 (0x8)[$r18] = $r4;;
     _32(0x98000088),        //call 18c20 <__malloc_unlock>
     _32(0x270fe08e),        //sd $r2[$r14] = $r3;;
     _32(0x97fffed7),        //goto 18564 <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0x66075182),        //extfz $r1 = $r2, 37 (0x25), 6 (0x6);;
     _32(0xf1000e41),        //addw $r0 = $r1, 57 (0x39)
     _32(0x71040e01),        //addw $r1 = $r1, 56 (0x38);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffffb0),        //goto 188e4 <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0xf1101700),        //addw $r4 = $r0, 92 (0x5c)
     _32(0xf11816c0),        //addw $r6 = $r0, 91 (0x5b)
     _32(0x71141700),        //addw $r5 = $r0, 92 (0x5c);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffe4b),        //goto 1836c <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x38040400),        //ld $r1 = 16 (0x10)[$r0];;
     _32(0x7105a001),        //compd.eq $r1 = $r1, $r0;;
     _32(0x08801b41),        //cb.deqz $r1? 18c04 <_malloc_r+0x98c>;;
     _32(0xf80400c5),        //andw $r1 = $r5, 3 (0x3)
     _32(0xe100fc00),        //addd $r0 = $r0, -16 (0xfffffff0)
     _32(0x7114ffc5),        //addw $r5 = $r5, -1 (0xffffffff);;
     _32(0x0c7ffe81),        //cb.wnez $r1? 18a48 <_malloc_r+0x7d0>;;
     _32(0x3800020a),        //ld $r0 = 8 (0x8)[$r10];;
     _32(0x7e010007),        //andnd $r0 = $r7, $r0;;
     _32(0x2701020a),        //sd 8 (0x8)[$r10] = $r0;;
     _32(0x791e2047),        //slld $r7 = $r7, 1 (0x1);;
     _32(0xe0050007),        //compd.ne $r1 = $r7, 0 (0x0)
     _32(0x7809a007),        //compd.leu $r2 = $r7, $r0;;
     _32(0x78051081),        //andw $r1 = $r1, $r2;;
     _32(0x0c000101),        //cb.wnez $r1? 18a90 <_malloc_r+0x818>;;
     _32(0x17fffed3),        //goto 185d0 <_malloc_r+0x358>;;
     _32(0xf91e2047),        //slld $r7 = $r7, 1 (0x1)
     _32(0x71240109),        //addw $r9 = $r9, 4 (0x4);;
     _32(0x78050007),        //andd $r1 = $r7, $r0;;
     _32(0x08ffff41),        //cb.deqz $r1? 18a88 <_malloc_r+0x810>;;
     _32(0x97fffe84),        //goto 184a8 <_malloc_r+0x230>
     _32(0x6a140009),        //copyd $r5 = $r9;;
     _64(0x00000003e804ffd8),        //andd $r1 = $r24, 4095 (0xfff);;
     _32(0x087fbf01),        //cb.dnez $r1? 18698 <_malloc_r+0x420>;;
     _32(0xf1550556),        //addd $r21 = $r22, $r21
     _32(0x38380419),        //ld $r14 = 16 (0x10)[$r25];;
     _32(0x6a540055),        //ord $r21 = $r21, 1 (0x1);;
     _32(0x97ffff2f),        //goto 18774 <_malloc_r+0x4fc>
     _32(0x2755020e),        //sd 8 (0x8)[$r14] = $r21;;
     _32(0x97fffefc),        //goto 186b0 <_malloc_r+0x438>
     _32(0x275d001b),        //sd 0 (0x0)[$r27] = $r23;;
     _32(0x38380419),        //ld $r14 = 16 (0x10)[$r25];;
     _32(0x97ffff39),        //goto 187b0 <_malloc_r+0x538>
     _32(0x3854020e),        //ld $r21 = 8 (0x8)[$r14];;
     _32(0xfa063081),        //sraw $r1 = $r1, 2 (0x2)
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _96(0x10000000900000fae0106400),        //make $r4 = 256400 (0x3e990);;
     _32(0xf90a6042),        //slld $r2 = $r2, $r1
     _32(0x38180204),        //ld $r6 = 8 (0x8)[$r4];;
     _32(0x7a090182),        //ord $r2 = $r2, $r6;;
     _32(0x97ffff90),        //goto 18934 <_malloc_r+0x6bc>
     _32(0x27090204),        //sd 8 (0x8)[$r4] = $r2;;
     _32(0x69011501),        //compd.gtu $r0 = $r1, 84 (0x54);;
     _32(0x080005c0),        //cb.dnez $r0? 18b5c <_malloc_r+0x8e4>;;
     _32(0x6607b302),        //extfz $r1 = $r2, 43 (0x2b), 12 (0xc);;
     _32(0xf1001bc1),        //addw $r0 = $r1, 111 (0x6f)
     _32(0x71041b81),        //addw $r1 = $r1, 110 (0x6e);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffff73),        //goto 188e4 <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x69055500),        //compd.gtu $r1 = $r0, 340 (0x154);;
     _32(0x080005c1),        //cb.dnez $r1? 18b80 <_malloc_r+0x908>;;
     _32(0x6617e3d2),        //extfz $r5 = $r18, 46 (0x2e), 15 (0xf);;
     _32(0xf1101e05),        //addw $r4 = $r5, 120 (0x78)
     _32(0xf1181dc5),        //addw $r6 = $r5, 119 (0x77)
     _32(0x71141e05),        //addw $r5 = $r5, 120 (0x78);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffe0b),        //goto 1836c <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x97ffff0b),        //goto 18774 <_malloc_r+0x4fc>
     _32(0x6a380017),        //copyd $r14 = $r23;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x97ffff1d),        //goto 187c8 <_malloc_r+0x550>
     _32(0x27010217),        //sd 8 (0x8)[$r23] = $r0;;
     _32(0x69015501),        //compd.gtu $r0 = $r1, 340 (0x154);;
     _32(0x08000740),        //cb.dnez $r0? 18bd4 <_malloc_r+0x95c>;;
     _32(0x6607e3c2),        //extfz $r1 = $r2, 46 (0x2e), 15 (0xf);;
     _32(0xf1001e01),        //addw $r0 = $r1, 120 (0x78)
     _32(0x71041dc1),        //addw $r1 = $r1, 119 (0x77);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffff5b),        //goto 188e4 <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0xe01007f0),        //make $r4 = 2032 (0x7f0)
     _32(0xe014007f),        //make $r5 = 127 (0x7f)
     _32(0xe018007e),        //make $r6 = 126 (0x7e)
     _64(0x18000001e9015500),        //compd.gtu $r0 = $r0, 1364 (0x554);;
     _32(0x087f7d80),        //cb.dnez $r0? 1836c <_malloc_r+0xf4>;;
     _32(0x67171492),        //extfz $r5 = $r18, 49 (0x31), 18 (0x12);;
     _32(0xf1101f45),        //addw $r4 = $r5, 125 (0x7d)
     _32(0xf1181f05),        //addw $r6 = $r5, 124 (0x7c)
     _32(0x71141f45),        //addw $r5 = $r5, 125 (0x7d);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffdef),        //goto 1836c <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x980000ea),        //call 18f60 <_free_r>
     _32(0xe104040e),        //addd $r1 = $r14, 16 (0x10)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38380418),        //ld $r14 = 16 (0x10)[$r24];;
     _32(0x3000001a),        //lwz $r0 = 0 (0x0)[$r26];;
     _32(0x97fffeea),        //goto 18774 <_malloc_r+0x4fc>
     _32(0x3854020e),        //ld $r21 = 8 (0x8)[$r14];;
     _32(0xe00007f0),        //make $r0 = 2032 (0x7f0)
     _32(0xe004007e),        //make $r1 = 126 (0x7e)
     _64(0x10000001e90d5501),        //compd.gtu $r3 = $r1, 1364 (0x554);;
     _32(0x087fd003),        //cb.dnez $r3? 188e4 <_malloc_r+0x66c>;;
     _32(0x67071482),        //extfz $r1 = $r2, 49 (0x31), 18 (0x12);;
     _32(0xf1001f41),        //addw $r0 = $r1, 125 (0x7d)
     _32(0x71041f01),        //addw $r1 = $r1, 124 (0x7c);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffff3a),        //goto 188e4 <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x97ffff9b),        //goto 18a70 <_malloc_r+0x7f8>
     _32(0x3800020a),        //ld $r0 = 8 (0x8)[$r10];;
     _32(0x00000000)        //errop ;;
 |];

let __malloc_lock: list_I = 
 [|
     _32(0x97fffd2a),        //goto 180b8 <__libc_lock_acquire>
     _96(0x0000000080000106e0009000)        //make $r0 = 268864 (0x41a40);;
 |];

let __malloc_unlock: list_I = 
 [|
     _32(0x97fffd6a),        //goto 181c8 <__libc_lock_release>
     _96(0x0000000080000106e0009000)        //make $r0 = 268864 (0x41a40);;
 |];

let cleanup_glue: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x08800081),        //cb.deqz $r1? 18c58 <cleanup_glue+0x28>;;
     _32(0x1ffffff7),        //call 18c30 <cleanup_glue>;;
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x100000bb)        //goto 18f60 <_free_r>;;
 |];

let _reclaim_reent: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x08000000880000f8e0041000),        //make $r1 = 254016 (0x3e040);;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0xe04c0000),        //make $r19 = 0 (0x0)
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x7005a001),        //compd.ne $r1 = $r1, $r0;;
     _32(0x08800d01),        //cb.deqz $r1? 18d78 <_reclaim_reent+0x100>;;
     _32(0x38041e00),        //ld $r1 = 120 (0x78)[$r0];;
     _32(0x088003c1),        //cb.deqz $r1? 18cec <_reclaim_reent+0x74>;;
     _32(0x383ae4c1),        //ld $r14 = $r19[$r1];;
     _32(0x088001ce),        //cb.deqz $r14? 18cd4 <_reclaim_reent+0x5c>;;
     _32(0x980000a9),        //call 18f60 <_free_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3838000e),        //ld $r14 = 0 (0x0)[$r14];;
     _32(0x087fff0e),        //cb.dnez $r14? 18cbc <_reclaim_reent+0x44>;;
     _32(0x38041e12),        //ld $r1 = 120 (0x78)[$r18];;
     _32(0x614c0213),        //addd $r19 = $r19, 8 (0x8);;
     _64(0x00000000e0018013),        //compd.ne $r0 = $r19, 512 (0x200);;
     _32(0x087ffd40),        //cb.dnez $r0? 18cb4 <_reclaim_reent+0x3c>;;
     _32(0x9800009f),        //call 18f60 <_free_r>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38041812),        //ld $r1 = 96 (0x60)[$r18];;
     _32(0x08800081),        //cb.deqz $r1? 18cfc <_reclaim_reent+0x84>;;
     _32(0x1800009a),        //call 18f60 <_free_r>;;
     _64(0xb8387e12e14c8012),        //addd $r19 = $r18, 512 (0x200)
     _32(0x00000000),        //ld $r14 = 504 (0x1f8)[$r18];;
     _32(0x7101a4ce),        //compd.eq $r0 = $r14, $r19;;
     _32(0x0880020e),        //cb.deqz $r14? 18d2c <_reclaim_reent+0xb4>;;
     _32(0x080001c0),        //cb.dnez $r0? 18d2c <_reclaim_reent+0xb4>;;
     _32(0x98000093),        //call 18f60 <_free_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3838000e),        //ld $r14 = 0 (0x0)[$r14];;
     _32(0x7001a393),        //compd.ne $r0 = $r19, $r14;;
     _32(0x087ffec0),        //cb.dnez $r0? 18d14 <_reclaim_reent+0x9c>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38042212),        //ld $r1 = 136 (0x88)[$r18];;
     _32(0x08800081),        //cb.deqz $r1? 18d3c <_reclaim_reent+0xc4>;;
     _32(0x1800008a),        //call 18f60 <_free_r>;;
     _32(0x30001412),        //lwz $r0 = 80 (0x50)[$r18];;
     _32(0x0c800380),        //cb.weqz $r0? 18d78 <_reclaim_reent+0x100>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38041612),        //ld $r1 = 88 (0x58)[$r18];;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0xea000012),        //copyd $r0 = $r18
     _64(0x18000001b8044812),        //ld $r1 = 1312 (0x520)[$r18];;
     _32(0x088001c1),        //cb.deqz $r1? 18d78 <_reclaim_reent+0x100>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17ffffaf),        //goto 18c30 <cleanup_glue>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000)        //ret ;;
 |];

let _sbrk_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0xea000001),        //copyd $r0 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _96(0x80000117a749040ce0482200),        //make $r18 = 285832 (0x45c88)
     _32(0x00000000),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980002f1),        //call 19980 <_sbrk>
     _32(0x26090012),        //sw 0 (0x0)[$r18] = $r2;;
     _32(0x6005ffc0),        //compd.ne $r1 = $r0, -1 (0xffffffff);;
     _32(0x088001c1),        //cb.deqz $r1? 18de4 <_sbrk_r+0x54>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x30040012),        //lwz $r1 = 0 (0x0)[$r18];;
     _32(0x08fffe41),        //cb.deqz $r1? 18dcc <_sbrk_r+0x3c>;;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000)        //ret ;;
 |];

let _malloc_trim_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849080c),        //sq 32 (0x20)[$r12] = $r18r19;;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _64(0xa7410e0ce538f7ce),        //sbfd $r14 = $r14, 4063 (0xfdf)
     _32(0x00000003),        //sd 56 (0x38)[$r12] = $r16;;
     _32(0x9fffff79),        //call 18c10 <__malloc_lock>
     _96(0x800000faa7510c0ce0506400),        //make $r20 = 256400 (0x3e990)
     _32(0x00000000),        //sd 48 (0x30)[$r12] = $r20;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x38000414),        //ld $r0 = 16 (0x10)[$r20];;
     _32(0x38480200),        //ld $r18 = 8 (0x8)[$r0];;
     _32(0x6848ff12),        //andd $r18 = $r18, -4 (0xfffffffc);;
     _32(0x7139048e),        //addd $r14 = $r14, $r18;;
     _32(0x7b3a230e),        //srld $r14 = $r14, 12 (0xc);;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x793a230e),        //slld $r14 = $r14, 12 (0xc);;
     _64(0x00000003e501ffce),        //compd.gt $r0 = $r14, 4095 (0xfff);;
     _32(0x088001c0),        //cb.deqz $r0? 18e84 <_malloc_trim_r+0x7c>;;
     _32(0x9fffffc9),        //call 18d90 <_sbrk_r>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38040414),        //ld $r1 = 16 (0x10)[$r20];;
     _32(0x71050481),        //addd $r1 = $r1, $r18;;
     _32(0x7001a040),        //compd.ne $r0 = $r0, $r1;;
     _32(0x088002c0),        //cb.deqz $r0? 18eac <_malloc_trim_r+0xa4>;;
     _32(0x9fffff67),        //call 18c20 <__malloc_unlock>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x9fffffb9),        //call 18d90 <_sbrk_r>
     _32(0xe504000e),        //negd $r1 = $r14
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xe001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff)
     _32(0xf549048e),        //sbfd $r18 = $r14, $r18
     _96(0x1000000090000106e0088000),        //make $r2 = 268800 (0x41a00);;
     _32(0x6a480052),        //ord $r18 = $r18, 1 (0x1);;
     _32(0x08800400),        //cb.deqz $r0? 18f10 <_malloc_trim_r+0x108>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x30040002),        //lwz $r1 = 0 (0x0)[$r2];;
     _32(0x380c0414),        //ld $r3 = 16 (0x10)[$r20];;
     _32(0xf539104e),        //sbfw $r14 = $r14, $r1
     _32(0x27490203),        //sd 8 (0x8)[$r3] = $r18;;
     _32(0x9fffff4e),        //call 18c20 <__malloc_unlock>
     _32(0x26390002),        //sw 0 (0x0)[$r2] = $r14;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x9fffffa0),        //call 18d90 <_sbrk_r>
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38080414),        //ld $r2 = 16 (0x10)[$r20];;
     _32(0x75050002),        //sbfd $r1 = $r2, $r0;;
     _32(0x640d07c1),        //compd.le $r3 = $r1, 31 (0x1f);;
     _32(0x087ff5c3),        //cb.dnez $r3? 18e84 <_malloc_trim_r+0x7c>;;
     _32(0xea040041),        //ord $r1 = $r1, 1 (0x1)
     _96(0x880000fae00c8000e0106000),        //make $r4 = 256384 (0x3e980)
     _96(0x100000009000010688000000),        //make $r3 = 268800 (0x41a00);;
     _32(0x38100004),        //ld $r4 = 0 (0x0)[$r4];;
     _32(0x27050202),        //sd 8 (0x8)[$r2] = $r1;;
     _32(0x75010004),        //sbfd $r0 = $r4, $r0;;
     _32(0x97ffffcc),        //goto 18e84 <_malloc_trim_r+0x7c>
     _32(0x26010003),        //sw 0 (0x0)[$r3] = $r0;;
     _32(0x7f03f000)        //nop ;;
 |];

let _free_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x888014c1),        //cb.deqz $r1? 190c4 <_free_r+0x164>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x1fffff24),        //call 18c10 <__malloc_lock>;;
     _32(0xe11cfc0e),        //addd $r7 = $r14, -16 (0xfffffff0)
     _96(0x880000fab818fe0ee0146400),        //make $r5 = 256400 (0x3e990)
     _32(0x08000000),        //ld $r6 = -8 (0xfffffff8)[$r14];;
     _32(0x38100405),        //ld $r4 = 16 (0x10)[$r5];;
     _32(0x6804ff86),        //andd $r1 = $r6, -2 (0xfffffffe);;
     _32(0x710d0047),        //addd $r3 = $r7, $r1;;
     _32(0xf011a0c4),        //compd.ne $r4 = $r4, $r3
     _32(0x38080203),        //ld $r2 = 8 (0x8)[$r3];;
     _32(0x88802144),        //cb.deqz $r4? 191c0 <_free_r+0x260>
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x8b000d86),        //cb.odd $r6? 1908c <_free_r+0x12c>
     _32(0xf1010083),        //addd $r0 = $r3, $r2
     _32(0x27090203),        //sd 8 (0x8)[$r3] = $r2;;
     _32(0xe1140405),        //addd $r5 = $r5, 16 (0x10)
     _32(0x3810fc0e),        //ld $r4 = -16 (0xfffffff0)[$r14];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0xf51d01c4),        //sbfd $r7 = $r4, $r7
     _32(0x71050101),        //addd $r1 = $r1, $r4;;
     _32(0xe8000040),        //andd $r0 = $r0, 1 (0x1)
     _32(0x38100407),        //ld $r4 = 16 (0x10)[$r7];;
     _32(0x7119a144),        //compd.eq $r6 = $r4, $r5;;
     _32(0x08001a06),        //cb.dnez $r6? 19180 <_free_r+0x220>;;
     _32(0x38180607),        //ld $r6 = 24 (0x18)[$r7];;
     _32(0x27190604),        //sd 24 (0x18)[$r4] = $r6;;
     _32(0x88802700),        //cb.deqz $r0? 1925c <_free_r+0x2fc>
     _32(0x27110406),        //sd 16 (0x10)[$r6] = $r4;;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0x27010207),        //sd 8 (0x8)[$r7] = $r0;;
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x69017fc1),        //compd.gtu $r0 = $r1, 511 (0x1ff);;
     _32(0x08000ec0),        //cb.dnez $r0? 190f0 <_free_r+0x190>;;
     _32(0xe60720c1),        //extfz $r1 = $r1, 34 (0x22), 3 (0x3)
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _96(0x10000000900000fae00c6400),        //make $r3 = 256400 (0x3e990);;
     _32(0xf1000041),        //addw $r0 = $r1, 1 (0x1)
     _32(0xfa063081),        //sraw $r1 = $r1, 2 (0x2)
     _32(0x38100203),        //ld $r4 = 8 (0x8)[$r3];;
     _32(0xf9023040),        //sllw $r0 = $r0, 1 (0x1)
     _32(0x79066042),        //slld $r1 = $r2, $r1;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0xf90220c0),        //slld $r0 = $r0, 3 (0x3)
     _32(0x7a050101),        //ord $r1 = $r1, $r4;;
     _96(0x800000fab8086400e1106000),        //addd $r4 = $r0, 256384 (0x3e980)
     _96(0x18000000980000fa80000000),        //ld $r2 = 256400 (0x3e990)[$r0];;
     _32(0x27110607),        //sd 24 (0x18)[$r7] = $r4;;
     _32(0x27050203),        //sd 8 (0x8)[$r3] = $r1;;
     _32(0x27090407),        //sd 16 (0x10)[$r7] = $r2;;
     _96(0x18000000980000faa71d6400),        //sd 256400 (0x3e990)[$r0] = $r7;;
     _32(0x271d0602),        //sd 24 (0x18)[$r2] = $r7;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17fffee6),        //goto 18c20 <__malloc_unlock>;;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x0b0004c0),        //cb.odd $r0? 190dc <_free_r+0x17c>;;
     _32(0xf1050081),        //addd $r1 = $r1, $r2
     _32(0x61140405),        //addd $r5 = $r5, 16 (0x10);;
     _32(0xea100041),        //ord $r4 = $r1, 1 (0x1)
     _32(0x38000403),        //ld $r0 = 16 (0x10)[$r3];;
     _32(0x7009a140),        //compd.ne $r2 = $r0, $r5;;
     _32(0x08801d42),        //cb.deqz $r2? 1927c <_free_r+0x31c>;;
     _32(0x38080603),        //ld $r2 = 24 (0x18)[$r3];;
     _32(0x27090600),        //sd 24 (0x18)[$r0] = $r2;;
     _32(0x27010402),        //sd 16 (0x10)[$r2] = $r0;;
     _32(0x27110207),        //sd 8 (0x8)[$r7] = $r4;;
     _32(0x97ffffd1),        //goto 19000 <_free_r+0xa0>
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0xe9017fc1),        //compd.gtu $r0 = $r1, 511 (0x1ff)
     _32(0x2701fe0e),        //sd -8 (0xfffffff8)[$r14] = $r0;;
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x08fff1c0),        //cb.deqz $r0? 19008 <_free_r+0xa8>;;
     _32(0x7b022241),        //srld $r0 = $r1, 9 (0x9);;
     _32(0x69090100),        //compd.gtu $r2 = $r0, 4 (0x4);;
     _32(0x08001382),        //cb.dnez $r2? 19230 <_free_r+0x2d0>;;
     _32(0x66035181),        //extfz $r0 = $r1, 37 (0x25), 6 (0x6);;
     _32(0xf1100e40),        //addw $r4 = $r0, 57 (0x39)
     _32(0x71000e00),        //addw $r0 = $r0, 56 (0x38);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _96(0x800000fab80c6404e1106004),        //addd $r4 = $r4, 256384 (0x3e980)
     _96(0x18000000980000fa80000000),        //ld $r3 = 256400 (0x3e990)[$r4];;
     _32(0x7009a0c4),        //compd.ne $r2 = $r4, $r3;;
     _32(0x08801702),        //cb.deqz $r2? 192a0 <_free_r+0x340>;;
     _32(0x38080203),        //ld $r2 = 8 (0x8)[$r3];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x7909a042),        //compd.gtu $r2 = $r2, $r1;;
     _32(0x08800102),        //cb.deqz $r2? 19150 <_free_r+0x1f0>;;
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x7101a0c4),        //compd.eq $r0 = $r4, $r3;;
     _32(0x08fffe80),        //cb.deqz $r0? 19134 <_free_r+0x1d4>;;
     _32(0x38100603),        //ld $r4 = 24 (0x18)[$r3];;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x27110607),        //sd 24 (0x18)[$r7] = $r4;;
     _32(0x270d0407),        //sd 16 (0x10)[$r7] = $r3;;
     _32(0x271d0404),        //sd 16 (0x10)[$r4] = $r7;;
     _32(0x271d0603),        //sd 24 (0x18)[$r3] = $r7;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17fffea9),        //goto 18c20 <__malloc_unlock>;;
     _32(0x080019c0),        //cb.dnez $r0? 1931c <_free_r+0x3bc>;;
     _32(0xf1050042),        //addd $r1 = $r2, $r1
     _32(0x38000603),        //ld $r0 = 24 (0x18)[$r3];;
     _32(0xea080041),        //ord $r2 = $r1, 1 (0x1)
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x27010603),        //sd 24 (0x18)[$r3] = $r0;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x270d0400),        //sd 16 (0x10)[$r0] = $r3;;
     _32(0x27090207),        //sd 8 (0x8)[$r7] = $r2;;
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17fffe99),        //goto 18c20 <__malloc_unlock>;;
     _32(0x8b000246),        //cb.odd $r6? 191e4 <_free_r+0x284>
     _32(0x71050081),        //addd $r1 = $r1, $r2;;
     _32(0x3800fc0e),        //ld $r0 = -16 (0xfffffff0)[$r14];;
     _32(0xf51d01c0),        //sbfd $r7 = $r0, $r7
     _32(0x71050001),        //addd $r1 = $r1, $r0;;
     _32(0x38080407),        //ld $r2 = 16 (0x10)[$r7];;
     _32(0x38000607),        //ld $r0 = 24 (0x18)[$r7];;
     _32(0x27010602),        //sd 24 (0x18)[$r2] = $r0;;
     _32(0x27090400),        //sd 16 (0x10)[$r0] = $r2;;
     _32(0xea0c0041),        //ord $r3 = $r1, 1 (0x1)
     _96(0x880000fae0006400e0086200),        //make $r2 = 256392 (0x3e988)
     _96(0x10000000900000fa88000000),        //make $r0 = 256400 (0x3e990);;
     _32(0x38080002),        //ld $r2 = 0 (0x0)[$r2];;
     _32(0x270d0207),        //sd 8 (0x8)[$r7] = $r3;;
     _32(0x271d0400),        //sd 16 (0x10)[$r0] = $r7;;
     _32(0x7905a042),        //compd.gtu $r1 = $r2, $r1;;
     _32(0x087fe601),        //cb.dnez $r1? 19070 <_free_r+0x110>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _96(0x0800000088000106e0048e00),        //make $r1 = 268856 (0x41a38);;
     _32(0x9ffffef9),        //call 18e08 <_malloc_trim_r>
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x17ffff91),        //goto 19070 <_free_r+0x110>;;
     _32(0x69090500),        //compd.gtu $r2 = $r0, 20 (0x14);;
     _32(0x08800302),        //cb.deqz $r2? 19264 <_free_r+0x304>;;
     _32(0x69091500),        //compd.gtu $r2 = $r0, 84 (0x54);;
     _32(0x080008c2),        //cb.dnez $r2? 192c8 <_free_r+0x368>;;
     _32(0x6603b301),        //extfz $r0 = $r1, 43 (0x2b), 12 (0xc);;
     _32(0xf1101bc0),        //addw $r4 = $r0, 111 (0x6f)
     _32(0x71001b80),        //addw $r0 = $r0, 110 (0x6e);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffffb0),        //goto 19114 <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x97ffff90),        //goto 1909c <_free_r+0x13c>
     _32(0x71050081),        //addd $r1 = $r1, $r2;;
     _32(0xf1101700),        //addw $r4 = $r0, 92 (0x5c)
     _32(0x710016c0),        //addw $r0 = $r0, 91 (0x5b);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffffa8),        //goto 19114 <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _96(0x00000000800000fae0006400),        //make $r0 = 256400 (0x3e990);;
     _32(0x271d0a00),        //sd 40 (0x28)[$r0] = $r7;;
     _32(0x271d0800),        //sd 32 (0x20)[$r0] = $r7;;
     _32(0x27150607),        //sd 24 (0x18)[$r7] = $r5;;
     _32(0x28110207),        //sq 8 (0x8)[$r7] = $r4r5;;
     _32(0x97ffff76),        //goto 19070 <_free_r+0x110>
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0xe0040001),        //make $r1 = 1 (0x1)
     _32(0xfa023080),        //sraw $r0 = $r0, 2 (0x2)
     _96(0x10000000900000fae0086400),        //make $r2 = 256400 (0x3e990);;
     _32(0xf9026001),        //slld $r0 = $r1, $r0
     _32(0x38140202),        //ld $r5 = 8 (0x8)[$r2];;
     _32(0x7a010140),        //ord $r0 = $r0, $r5;;
     _32(0x97ffffa5),        //goto 19154 <_free_r+0x1f4>
     _32(0x27010202),        //sd 8 (0x8)[$r2] = $r0;;
     _32(0x69095500),        //compd.gtu $r2 = $r0, 340 (0x154);;
     _32(0x08000202),        //cb.dnez $r2? 192ec <_free_r+0x38c>;;
     _32(0x6603e3c1),        //extfz $r0 = $r1, 46 (0x2e), 15 (0xf);;
     _32(0xf1101e00),        //addw $r4 = $r0, 120 (0x78)
     _32(0x71001dc0),        //addw $r0 = $r0, 119 (0x77);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffff8c),        //goto 19114 <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xe01007f0),        //make $r4 = 2032 (0x7f0)
     _32(0xe000007e),        //make $r0 = 126 (0x7e)
     _64(0x10000001e9095500),        //compd.gtu $r2 = $r0, 1364 (0x554);;
     _32(0x087fe182),        //cb.dnez $r2? 19114 <_free_r+0x1b4>;;
     _32(0x67031481),        //extfz $r0 = $r1, 49 (0x31), 18 (0x12);;
     _32(0xf1101f40),        //addw $r4 = $r0, 125 (0x7d)
     _32(0x71001f00),        //addw $r0 = $r0, 124 (0x7c);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffff80),        //goto 19114 <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0x27010207),        //sd 8 (0x8)[$r7] = $r0;;
     _32(0x97ffff53),        //goto 19070 <_free_r+0x110>
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110100100110000; //0x16930
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(test, 0b00010110100000100000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110100100110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__divdf3, 0b00010110100110101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__udivdi3, 0b00010111010111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__umoddi3, 0b00010111011001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__udivmoddi4, 0b00010111011011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__divdi3, 0b00010111011101101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__moddi3, 0b00010111100000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111100001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit, 0b00010111100010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_fini_array, 0b00010111100011100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_init_array, 0b00010111100101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_init_signal_r_part_0, 0b00010111100111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_init_signal_r, 0b00010111101001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_signal_r, 0b00010111101001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_raise_r, 0b00010111101100000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sigtramp_r, 0b00010111101111101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(raise, 0b00010111110010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(signal, 0b00010111110010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_init_signal, 0b00010111110101100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sigtramp, 0b00010111110110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_kill_r, 0b00010111110110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_getpid_r, 0b00010111111000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__call_exitprocs, 0b00010111111000110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_init, 0b00010111111111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_close, 0b00010111111111101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_try_acquire, 0b00010111111111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_acquire, 0b00011000000010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_release, 0b00011000000111001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_malloc_r, 0b00011000001001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__malloc_lock, 0b00011000110000010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__malloc_unlock, 0b00011000110000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(cleanup_glue, 0b00011000110000110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_reclaim_reent, 0b00011000110001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_sbrk_r, 0b00011000110110010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_malloc_trim_r, 0b00011000111000001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_free_r, 0b00011000111101100000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016930;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
