// executing pipeline builtin_prefetch_3.c.out.dumped test 
val k1_pipeline_builtin_prefetch_3: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_builtin_prefetch_3() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let simple_vol_global: list_I = 
 [|
     _96(0x0000000080000118e0007000),        //make $r0 = 287168 (0x461c0);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000400),        //make $r0 = 253968 (0x3e010);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000600),        //make $r0 = 253976 (0x3e018);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000800),        //make $r0 = 253984 (0x3e020);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000118e000d400),        //make $r0 = 287568 (0x46350);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _32(0x7f03f000),        //nop ;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let simple_vol_file: list_I = 
 [|
     _96(0x0000000080000106e000e400),        //make $r0 = 269200 (0x41b90);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000a00),        //make $r0 = 253992 (0x3e028);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000c00),        //make $r0 = 254000 (0x3e030);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000e00),        //make $r0 = 254008 (0x3e038);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000107e0004800),        //make $r0 = 269600 (0x41d20);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _32(0x7f03f000),        //nop ;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let expr_vol_global: list_I = 
 [|
     _96(0x0000000080000118e0000600),        //make $r0 = 286744 (0x46018);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001200),        //make $r0 = 254024 (0x3e048);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001000),        //make $r0 = 254016 (0x3e040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001400),        //make $r0 = 254032 (0x3e050);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000118e0000700),        //make $r0 = 286748 (0x4601c);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001200),        //make $r0 = 254024 (0x3e048);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000100),        //addd $r0 = $r0, 4 (0x4);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001000),        //make $r0 = 254016 (0x3e040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000100),        //addd $r0 = $r0, 4 (0x4);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001400),        //make $r0 = 254032 (0x3e050);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000100),        //addd $r0 = $r0, 4 (0x4);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000118e0000800),        //make $r0 = 286752 (0x46020);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001000),        //make $r0 = 254016 (0x3e040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001200),        //make $r0 = 254024 (0x3e048);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001400),        //make $r0 = 254032 (0x3e050);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000118e0000600),        //make $r0 = 286744 (0x46018);;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001000),        //make $r0 = 254016 (0x3e040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001200),        //make $r0 = 254024 (0x3e048);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001400),        //make $r0 = 254032 (0x3e050);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000118e0000600),        //make $r0 = 286744 (0x46018);;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001000),        //make $r0 = 254016 (0x3e040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001200),        //make $r0 = 254024 (0x3e048);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001400),        //make $r0 = 254032 (0x3e050);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000118e0007000),        //make $r0 = 287168 (0x461c0);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000400),        //make $r0 = 253968 (0x3e010);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000600),        //make $r0 = 253976 (0x3e018);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000800),        //make $r0 = 253984 (0x3e020);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000118e0007200),        //make $r0 = 287176 (0x461c8);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000400),        //make $r0 = 253968 (0x3e010);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000300),        //addd $r0 = $r0, 12 (0xc);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000600),        //make $r0 = 253976 (0x3e018);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000300),        //addd $r0 = $r0, 12 (0xc);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000800),        //make $r0 = 253984 (0x3e020);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000300),        //addd $r0 = $r0, 12 (0xc);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000118e0007300),        //make $r0 = 287180 (0x461cc);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x0000000080000118e000d400),        //make $r0 = 287568 (0x46350);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _96(0x0000000080000118e1007000),        //addd $r0 = $r0, 287168 (0x461c0);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000400),        //make $r0 = 253968 (0x3e010);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000500),        //addd $r0 = $r0, 20 (0x14);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000600),        //make $r0 = 253976 (0x3e018);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000500),        //addd $r0 = $r0, 20 (0x14);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000800),        //make $r0 = 253984 (0x3e020);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61000500),        //addd $r0 = $r0, 20 (0x14);;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000400),        //make $r0 = 253968 (0x3e010);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x0000000080000118e000d400),        //make $r0 = 287568 (0x46350);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000600),        //make $r0 = 253976 (0x3e018);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x0000000080000118e000d400),        //make $r0 = 287568 (0x46350);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000800),        //make $r0 = 253984 (0x3e020);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x0000000080000118e000d400),        //make $r0 = 287568 (0x46350);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x3c0c0000),        //dtouchl 0 (0x0)[$r0];;
     _32(0x7f03f000),        //nop ;;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x1ffffee5),        //call 16820 <simple_vol_global>;;
     _32(0x1ffffefe),        //call 16888 <simple_vol_file>;;
     _96(0x0000000080000118e000d600),        //make $r0 = 287576 (0x46358);;
     _96(0x0000000080000118e004d600),        //make $r1 = 287576 (0x46358);;
     _32(0x27050400),        //sd 16 (0x10)[$r0] = $r1;;
     _96(0x0000000080000118e0000600),        //make $r0 = 286744 (0x46018);;
     _96(0x0000000080000118e004d600),        //make $r1 = 287576 (0x46358);;
     _32(0x27050400),        //sd 16 (0x10)[$r0] = $r1;;
     _32(0x1fffff09),        //call 168f0 <expr_vol_global>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x18000001)        //call 16cd8 <exit>;;
 |];

let exit_: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x9800004d),        //call 16e20 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x00000000800000fde0000000),        //make $r0 = 259072 (0x3f400);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 16d14 <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x980002e5),        //call 178a8 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110110010000000; //0x16c80
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(simple_vol_global, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(simple_vol_file, 0b00010110100010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(expr_vol_global, 0b00010110100011110000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110110010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit_, 0b00010110110011011000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016c80;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, rcount, wcount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, rcount, wcount, adr_end_main);
print_list_data(mD);
}
