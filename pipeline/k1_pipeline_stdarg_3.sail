// executing pipeline stdarg_3.c.out.dumped test 
val k1_pipeline_stdarg_3: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_stdarg_3() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let bar: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x000000008000011be0042c00),        //make $r1 = 289968 (0x46cb0);;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let f1: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000009),        //goto 16894 <f1+0x4c>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x7104ffc0),        //addw $r1 = $r0, -1 (0xffffffff);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x0efffd40),        //cb.wgtz $r0? 16874 <f1+0x2c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f2: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000009),        //goto 16904 <f2+0x4c>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0043200),        //make $r1 = 289992 (0x46cc8);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x7104ffc0),        //addw $r1 = $r0, -1 (0xffffffff);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x0efffd40),        //cb.wgtz $r0? 168e4 <f2+0x2c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f3: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000011),        //goto 1699c <f3+0x74>;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffffa2),        //call 16820 <bar>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7104ffc0),        //addw $r1 = $r0, -1 (0xffffffff);;
     _32(0x2605070c),        //sw 28 (0x1c)[$r12] = $r1;;
     _32(0x0efffb40),        //cb.wgtz $r0? 1695c <f3+0x34>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f4: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000016),        //goto 16a50 <f4+0x88>;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0043200),        //make $r1 = 289992 (0x46cc8);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _96(0x000000008000011be0003200),        //make $r0 = 289992 (0x46cc8);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0200800080000000e0040000),        //make $r1 = 4616189618054758400 (0x4010000000000000);;
     _32(0x50027040),        //faddd $r0 = $r0, $r1;;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff75),        //call 16820 <bar>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7104ffc0),        //addw $r1 = $r0, -1 (0xffffffff);;
     _32(0x2605070c),        //sw 28 (0x1c)[$r12] = $r1;;
     _32(0x0efffa00),        //cb.wgtz $r0? 169fc <f4+0x34>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f5: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000009),        //goto 16ac4 <f5+0x4c>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040800),        //addd $r1 = $r0, 32 (0x20);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _96(0x000000008000011be0102400),        //make $r4 = 289936 (0x46c90);;
     _32(0x3c040000),        //lo $r0r1r2r3 = 0 (0x0)[$r0];;
     _32(0x28050004),        //so 0 (0x0)[$r4] = $r0r1r2r3;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x7104ffc0),        //addw $r1 = $r0, -1 (0xffffffff);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x0efffd40),        //cb.wgtz $r0? 16aa4 <f5+0x2c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f6: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x10000009),        //goto 16b34 <f6+0x4c>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040400),        //addd $r1 = $r0, 16 (0x10);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _96(0x000000008000011be0083400),        //make $r2 = 290000 (0x46cd0);;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x28010002),        //sq 0 (0x0)[$r2] = $r0r1;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x7104ffc0),        //addw $r1 = $r0, -1 (0xffffffff);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x0efffd40),        //cb.wgtz $r0? 16b14 <f6+0x2c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f7: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000010),        //goto 16bc8 <f7+0x70>;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040800),        //addd $r1 = $r0, 32 (0x20);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _96(0x000000008000011be0102400),        //make $r4 = 289936 (0x46c90);;
     _32(0x3c040000),        //lo $r0r1r2r3 = 0 (0x0)[$r0];;
     _32(0x28050004),        //so 0 (0x0)[$r4] = $r0r1r2r3;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x1fffff17),        //call 16820 <bar>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7104ffc0),        //addw $r1 = $r0, -1 (0xffffffff);;
     _32(0x2605070c),        //sw 28 (0x1c)[$r12] = $r1;;
     _32(0x0efffb80),        //cb.wgtz $r0? 16b8c <f7+0x34>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f8: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000019),        //goto 16c84 <f8+0x94>;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040400),        //addd $r1 = $r0, 16 (0x10);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _96(0x000000008000011be0083400),        //make $r2 = 290000 (0x46cd0);;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x28010002),        //sq 0 (0x0)[$r2] = $r0r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002e00),        //make $r0 = 289976 (0x46cb8);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x000000008000011be0003400),        //make $r0 = 290000 (0x46cd0);;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffee8),        //call 16820 <bar>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7104ffc0),        //addw $r1 = $r0, -1 (0xffffffff);;
     _32(0x2605070c),        //sw 28 (0x1c)[$r12] = $r1;;
     _32(0x0efff940),        //cb.wgtz $r0? 16c24 <f8+0x34>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x27410e0c),        //sd 56 (0x38)[$r12] = $r16;;
     _32(0x6020000d),        //make $r8 = 13 (0xd);;
     _32(0x601c000b),        //make $r7 = 11 (0xb);;
     _32(0x60180009),        //make $r6 = 9 (0x9);;
     _32(0x60140007),        //make $r5 = 7 (0x7);;
     _32(0x60100005),        //make $r4 = 5 (0x5);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000007),        //make $r0 = 7 (0x7);;
     _32(0x1ffffeda),        //call 16848 <f1>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x610102c0),        //compd.eq $r0 = $r0, 11 (0xb);;
     _32(0x08000080),        //cb.dnez $r0? 16d00 <main+0x50>;;
     _32(0x18000161),        //call 17280 <abort>;;
     _96(0x0202800080000000e01c0000),        //make $r7 = 4634204016564240384 (0x4050000000000000);;
     _96(0x0202000080000000e0180000),        //make $r6 = 4629700416936869888 (0x4040000000000000);;
     _96(0x0201800080000000e0140000),        //make $r5 = 4625196817309499392 (0x4030000000000000);;
     _96(0x0201000080000000e0100000),        //make $r4 = 4620693217682128896 (0x4020000000000000);;
     _96(0x0200800080000000e00c0000),        //make $r3 = 4616189618054758400 (0x4010000000000000);;
     _96(0x0200000080000000e0080000),        //make $r2 = 4611686018427387904 (0x4000000000000000);;
     _96(0x01ff800080000000e0040000),        //make $r1 = 4607182418800017408 (0x3ff0000000000000);;
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x1ffffed8),        //call 168b8 <f2>;;
     _96(0x000000008000011be0003200),        //make $r0 = 289992 (0x46cc8);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0202000080000000e0040000),        //make $r1 = 4629700416936869888 (0x4040000000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16d84 <main+0xd4>;;
     _32(0x18000140),        //call 17280 <abort>;;
     _32(0x60080003),        //make $r2 = 3 (0x3);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffee6),        //call 16928 <f3>;;
     _96(0x000000008000011be0002c00),        //make $r0 = 289968 (0x46cb0);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000000f001b040),        //compw.ne $r0 = $r0, 1 (0x1);;
     _32(0x0c0001c0),        //cb.wnez $r0? 16dc8 <main+0x118>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61010040),        //compd.eq $r0 = $r0, 1 (0x1);;
     _32(0x08000080),        //cb.dnez $r0? 16dcc <main+0x11c>;;
     _32(0x1800012e),        //call 17280 <abort>;;
     _96(0x0201980080000000e0080000),        //make $r2 = 4626041242239631360 (0x4033000000000000);;
     _96(0x0201880080000000e0040000),        //make $r1 = 4625478292286210048 (0x4031000000000000);;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffef8),        //call 169c8 <f4>;;
     _96(0x000000008000011be0002c00),        //make $r0 = 289968 (0x46cb0);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000000f001b540),        //compw.ne $r0 = $r0, 21 (0x15);;
     _32(0x0c000280),        //cb.wnez $r0? 16e2c <main+0x17c>;;
     _96(0x000000008000011be0003200),        //make $r0 = 289992 (0x46cc8);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0201880080000000e0040000),        //make $r1 = 4625478292286210048 (0x4031000000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16e30 <main+0x180>;;
     _32(0x18000115),        //call 17280 <abort>;;
     _32(0x60000083),        //make $r0 = 131 (0x83);;
     _32(0x2601200c),        //sw 128 (0x80)[$r12] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x2601240c),        //sw 144 (0x90)[$r12] = $r0;;
     _96(0x0201700080000000e0000000),        //make $r0 = 4624633867356078080 (0x402e000000000000);;
     _32(0x2701220c),        //sd 136 (0x88)[$r12] = $r0;;
     _96(0x02033f0080000000e0000000),        //make $r0 = 4640924231633207296 (0x4067e00000000000);;
     _32(0x2701260c),        //sd 152 (0x98)[$r12] = $r0;;
     _32(0x3c04200c),        //lo $r0r1r2r3 = 128 (0x80)[$r12];;
     _32(0x2805180c),        //so 96 (0x60)[$r12] = $r0r1r2r3;;
     _32(0x600000fe),        //make $r0 = 254 (0xfe);;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _96(0x0203320080000000e0000000),        //make $r0 = 4640466834796052480 (0x4066400000000000);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x3800260c),        //ld $r0 = 152 (0x98)[$r12];;
     _32(0x2701000c),        //sd 0 (0x0)[$r12] = $r0;;
     _32(0x3824200c),        //ld $r9 = 128 (0x80)[$r12];;
     _32(0x3828220c),        //ld $r10 = 136 (0x88)[$r12];;
     _32(0x382c240c),        //ld $r11 = 144 (0x90)[$r12];;
     _32(0x3c04180c),        //lo $r0r1r2r3 = 96 (0x60)[$r12];;
     _32(0x6a140000),        //copyd $r5 = $r0;;
     _32(0x6a180001),        //copyd $r6 = $r1;;
     _32(0x6a1c0002),        //copyd $r7 = $r2;;
     _32(0x6a200003),        //copyd $r8 = $r3;;
     _32(0x3c04200c),        //lo $r0r1r2r3 = 128 (0x80)[$r12];;
     _32(0x6a100003),        //copyd $r4 = $r3;;
     _32(0x6a0c0002),        //copyd $r3 = $r2;;
     _32(0x6a080001),        //copyd $r2 = $r1;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffeee),        //call 16a78 <f5>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000004f001b0c0),        //compw.ne $r0 = $r0, 131 (0x83);;
     _32(0x0c000680),        //cb.wnez $r0? 16f44 <main+0x294>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _64(0x00000007f001b780),        //compw.ne $r0 = $r0, 254 (0xfe);;
     _32(0x0c0004c0),        //cb.wnez $r0? 16f44 <main+0x294>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _96(0x0201700080000000e0040000),        //make $r1 = 4624633867356078080 (0x402e000000000000);;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x08000280),        //cb.dnez $r0? 16f44 <main+0x294>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _96(0x0203320080000000e0040000),        //make $r1 = 4640466834796052480 (0x4066400000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16f48 <main+0x298>;;
     _32(0x180000cf),        //call 17280 <abort>;;
     _32(0x3800260c),        //ld $r0 = 152 (0x98)[$r12];;
     _32(0x2701000c),        //sd 0 (0x0)[$r12] = $r0;;
     _32(0x3824200c),        //ld $r9 = 128 (0x80)[$r12];;
     _32(0x3828220c),        //ld $r10 = 136 (0x88)[$r12];;
     _32(0x382c240c),        //ld $r11 = 144 (0x90)[$r12];;
     _32(0x3c04180c),        //lo $r0r1r2r3 = 96 (0x60)[$r12];;
     _32(0x6a140000),        //copyd $r5 = $r0;;
     _32(0x6a180001),        //copyd $r6 = $r1;;
     _32(0x6a1c0002),        //copyd $r7 = $r2;;
     _32(0x6a200003),        //copyd $r8 = $r3;;
     _32(0x3c04200c),        //lo $r0r1r2r3 = 128 (0x80)[$r12];;
     _32(0x6a100003),        //copyd $r4 = $r3;;
     _32(0x6a0c0002),        //copyd $r3 = $r2;;
     _32(0x6a080001),        //copyd $r2 = $r1;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffffebc),        //call 16a78 <f5>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000004f001b0c0),        //compw.ne $r0 = $r0, 131 (0x83);;
     _32(0x0c000680),        //cb.wnez $r0? 1700c <main+0x35c>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _64(0x00000007f001b6c0),        //compw.ne $r0 = $r0, 251 (0xfb);;
     _32(0x0c0004c0),        //cb.wnez $r0? 1700c <main+0x35c>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _96(0x0201700080000000e0040000),        //make $r1 = 4624633867356078080 (0x402e000000000000);;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x08000280),        //cb.dnez $r0? 1700c <main+0x35c>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _96(0x02033f0080000000e0040000),        //make $r1 = 4640924231633207296 (0x4067e00000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 17010 <main+0x360>;;
     _32(0x1800009d),        //call 17280 <abort>;;
     _32(0x6000008a),        //make $r0 = 138 (0x8a);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _96(0x0201800080000000e0000000),        //make $r0 = 4625196817309499392 (0x4030000000000000);;
     _32(0x2701140c),        //sd 80 (0x50)[$r12] = $r0;;
     _32(0x60000101),        //make $r0 = 257 (0x101);;
     _32(0x2701120c),        //sd 72 (0x48)[$r12] = $r0;;
     _96(0x0203300080000000e0000000),        //make $r0 = 4640396466051874816 (0x4066000000000000);;
     _32(0x2701100c),        //sd 64 (0x40)[$r12] = $r0;;
     _32(0x3c00140c),        //lq $r0r1 = 80 (0x50)[$r12];;
     _32(0x6a140000),        //copyd $r5 = $r0;;
     _32(0x6a180001),        //copyd $r6 = $r1;;
     _32(0x3c00100c),        //lq $r0r1 = 64 (0x40)[$r12];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x6a100001),        //copyd $r4 = $r1;;
     _32(0x3c00140c),        //lq $r0r1 = 80 (0x50)[$r12];;
     _32(0x6a080001),        //copyd $r2 = $r1;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffea0),        //call 16ae8 <f6>;;
     _96(0x000000008000011be0003400),        //make $r0 = 290000 (0x46cd0);;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x60014040),        //compd.ne $r0 = $r0, 257 (0x101);;
     _32(0x08000280),        //cb.dnez $r0? 170a8 <main+0x3f8>;;
     _96(0x000000008000011be0003400),        //make $r0 = 290000 (0x46cd0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0203300080000000e0040000),        //make $r1 = 4640396466051874816 (0x4066000000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 170ac <main+0x3fc>;;
     _32(0x18000076),        //call 17280 <abort>;;
     _32(0x3c00140c),        //lq $r0r1 = 80 (0x50)[$r12];;
     _32(0x6a140000),        //copyd $r5 = $r0;;
     _32(0x6a180001),        //copyd $r6 = $r1;;
     _32(0x3c00100c),        //lq $r0r1 = 64 (0x40)[$r12];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x6a100001),        //copyd $r4 = $r1;;
     _32(0x3c00140c),        //lq $r0r1 = 80 (0x50)[$r12];;
     _32(0x6a080001),        //copyd $r2 = $r1;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffffe85),        //call 16ae8 <f6>;;
     _96(0x000000008000011be0003400),        //make $r0 = 290000 (0x46cd0);;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x60012280),        //compd.ne $r0 = $r0, 138 (0x8a);;
     _32(0x08000280),        //cb.dnez $r0? 17114 <main+0x464>;;
     _96(0x000000008000011be0003400),        //make $r0 = 290000 (0x46cd0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0201800080000000e0040000),        //make $r1 = 4625196817309499392 (0x4030000000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 17118 <main+0x468>;;
     _32(0x1800005b),        //call 17280 <abort>;;
     _32(0x3800260c),        //ld $r0 = 152 (0x98)[$r12];;
     _32(0x2701000c),        //sd 0 (0x0)[$r12] = $r0;;
     _32(0x3824200c),        //ld $r9 = 128 (0x80)[$r12];;
     _32(0x3828220c),        //ld $r10 = 136 (0x88)[$r12];;
     _32(0x382c240c),        //ld $r11 = 144 (0x90)[$r12];;
     _32(0x3c04200c),        //lo $r0r1r2r3 = 128 (0x80)[$r12];;
     _32(0x6a140000),        //copyd $r5 = $r0;;
     _32(0x6a180001),        //copyd $r6 = $r1;;
     _32(0x6a1c0002),        //copyd $r7 = $r2;;
     _32(0x6a200003),        //copyd $r8 = $r3;;
     _32(0x3c04180c),        //lo $r0r1r2r3 = 96 (0x60)[$r12];;
     _32(0x6a100003),        //copyd $r4 = $r3;;
     _32(0x6a0c0002),        //copyd $r3 = $r2;;
     _32(0x6a080001),        //copyd $r2 = $r1;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffe80),        //call 16b58 <f7>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000004f001b0c0),        //compw.ne $r0 = $r0, 131 (0x83);;
     _32(0x0c000680),        //cb.wnez $r0? 171dc <main+0x52c>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _64(0x00000007f001b780),        //compw.ne $r0 = $r0, 254 (0xfe);;
     _32(0x0c0004c0),        //cb.wnez $r0? 171dc <main+0x52c>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _96(0x0201700080000000e0040000),        //make $r1 = 4624633867356078080 (0x402e000000000000);;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x08000280),        //cb.dnez $r0? 171dc <main+0x52c>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _96(0x0203320080000000e0040000),        //make $r1 = 4640466834796052480 (0x4066400000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 171e0 <main+0x530>;;
     _32(0x18000029),        //call 17280 <abort>;;
     _96(0x000000008000011be0002c00),        //make $r0 = 289968 (0x46cb0);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000004f101b0c0),        //compw.eq $r0 = $r0, 131 (0x83);;
     _32(0x0c000080),        //cb.wnez $r0? 17200 <main+0x550>;;
     _32(0x18000021),        //call 17280 <abort>;;
     _32(0x3c00140c),        //lq $r0r1 = 80 (0x50)[$r12];;
     _32(0x6a140000),        //copyd $r5 = $r0;;
     _32(0x6a180001),        //copyd $r6 = $r1;;
     _32(0x3c00140c),        //lq $r0r1 = 80 (0x50)[$r12];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x6a100001),        //copyd $r4 = $r1;;
     _32(0x3c00100c),        //lq $r0r1 = 64 (0x40)[$r12];;
     _32(0x6a080001),        //copyd $r2 = $r1;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffffe72),        //call 16bf0 <f8>;;
     _96(0x000000008000011be0003400),        //make $r0 = 290000 (0x46cd0);;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x60014040),        //compd.ne $r0 = $r0, 257 (0x101);;
     _32(0x08000280),        //cb.dnez $r0? 17268 <main+0x5b8>;;
     _96(0x000000008000011be0003400),        //make $r0 = 290000 (0x46cd0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0203300080000000e0040000),        //make $r1 = 4640396466051874816 (0x4066000000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 1726c <main+0x5bc>;;
     _32(0x18000006),        //call 17280 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000)        //ret ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 17658 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 19188 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110110010110000; //0x16cb0
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(bar, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f1, 0b00010110100001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f2, 0b00010110100010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f3, 0b00010110100100101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f4, 0b00010110100111001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f5, 0b00010110101001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f6, 0b00010110101011101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f7, 0b00010110101101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f8, 0b00010110101111110000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110110010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111001010000000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016cb0;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, rcount, wcount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, rcount, wcount, adr_end_main);
print_list_data(mD);
}
