// executing pipeline 20090113_3 test 
val k1_pipeline_20090113_3: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_20090113_3() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let bmp_iter_set_init: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x2609020c),        //sw 8 (0x8)[$r12] = $r2;;
     _32(0x270d000c),        //sd 0 (0x0)[$r12] = $r3;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x27050200),        //sd 8 (0x8)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x080001c0),        //cb.dnez $r0? 16874 <bmp_iter_set_init+0x54>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _96(0x0000000080000117e0042600),        //make $r1 = 285848 (0x45c98);;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x10000010),        //goto 168b0 <bmp_iter_set_init+0x90>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x30040400),        //lwz $r1 = 16 (0x10)[$r0];;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x7b0231c0),        //srlw $r0 = $r0, 7 (0x7);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7601b001),        //compw.ltu $r0 = $r1, $r0;;
     _32(0x0c8001c0),        //cb.weqz $r0? 168ac <bmp_iter_set_init+0x8c>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x17ffffea),        //goto 16850 <bmp_iter_set_init+0x30>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x30040400),        //lwz $r1 = 16 (0x10)[$r0];;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x7b0231c0),        //srlw $r0 = $r0, 7 (0x7);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000180),        //cb.wnez $r0? 168e4 <bmp_iter_set_init+0xc4>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _32(0x790231c0),        //sllw $r0 = $r0, 7 (0x7);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x7b023180),        //srlw $r0 = $r0, 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x26050400),        //sw 16 (0x10)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38040600),        //ld $r1 = 24 (0x18)[$r0];;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050600),        //sd 24 (0x18)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x38040600),        //ld $r1 = 24 (0x18)[$r0];;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7b066001),        //srld $r1 = $r1, $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27050600),        //sd 24 (0x18)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _32(0x61010000),        //compd.eq $r0 = $r0, 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004020c),        //lwz $r1 = 8 (0x8)[$r12];;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x3800000c),        //ld $r0 = 0 (0x0)[$r12];;
     _32(0x3004020c),        //lwz $r1 = 8 (0x8)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let foobar: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x6104060c),        //addd $r1 = $r12, 24 (0x18);;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x1fffff9f),        //call 16820 <bmp_iter_set_init>;;
     _32(0x10000011),        //goto 169ec <foobar+0x6c>;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x2701140c),        //sd 80 (0x50)[$r12] = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _32(0x7b062040),        //srld $r1 = $r0, 1 (0x1);;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x27050600),        //sd 24 (0x18)[$r0] = $r1;;
     _32(0x3800140c),        //ld $r0 = 80 (0x50)[$r12];;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800140c),        //ld $r0 = 80 (0x50)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x2701120c),        //sd 72 (0x48)[$r12] = $r0;;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x2701100c),        //sd 64 (0x40)[$r12] = $r0;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _32(0x088004c0),        //cb.deqz $r0? 16a50 <foobar+0xd0>;;
     _32(0x1000000c),        //goto 16a38 <foobar+0xb8>;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _32(0x7b062040),        //srld $r1 = $r0, 1 (0x1);;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x27050600),        //sd 24 (0x18)[$r0] = $r1;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08fffc80),        //cb.deqz $r0? 16a0c <foobar+0x8c>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x10000054),        //goto 16b9c <foobar+0x21c>;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000fc0),        //addw $r0 = $r0, 63 (0x3f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800f000),        //andw $r0 = $r0, -64 (0xffffffc0);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x26050400),        //sw 16 (0x10)[$r0] = $r1;;
     _32(0x1000002b),        //goto 16b34 <foobar+0x1b4>;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38040600),        //ld $r1 = 24 (0x18)[$r0];;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x27050600),        //sd 24 (0x18)[$r0] = $r1;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _32(0x088004c0),        //cb.deqz $r0? 16b04 <foobar+0x184>;;
     _32(0x1000000c),        //goto 16aec <foobar+0x16c>;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _32(0x7b062040),        //srld $r1 = $r0, 1 (0x1);;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x27050600),        //sd 24 (0x18)[$r0] = $r1;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38000600),        //ld $r0 = 24 (0x18)[$r0];;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08fffc80),        //cb.deqz $r0? 16ac0 <foobar+0x140>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x10000027),        //goto 16b9c <foobar+0x21c>;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71001000),        //addw $r0 = $r0, 64 (0x40);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x26050400),        //sw 16 (0x10)[$r0] = $r1;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _64(0x00000000f001b080),        //compw.ne $r0 = $r0, 2 (0x2);;
     _32(0x0c7ff480),        //cb.wnez $r0? 16a8c <foobar+0x10c>;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x080000c0),        //cb.dnez $r0? 16b70 <foobar+0x1f0>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1000000c),        //goto 16b9c <foobar+0x21c>;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x30000400),        //lwz $r0 = 16 (0x10)[$r0];;
     _32(0x790231c0),        //sllw $r0 = $r0, 7 (0x7);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050400),        //sw 16 (0x10)[$r0] = $r1;;
     _32(0x17ffffe7),        //goto 16b34 <foobar+0x1b4>;;
     _32(0x087fe100),        //cb.dnez $r0? 169ac <foobar+0x2c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130180c),        //addd $r12 = $r12, 96 (0x60);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2701100c),        //sd 64 (0x40)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601120c),        //sw 72 (0x48)[$r12] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x2701140c),        //sd 80 (0x50)[$r12] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x61000e0c),        //addd $r0 = $r12, 56 (0x38);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x61000e0c),        //addd $r0 = $r12, 56 (0x38);;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26010a0c),        //sw 40 (0x28)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x1fffff5c),        //call 16980 <foobar>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130180c),        //addd $r12 = $r12, 96 (0x60);;
     _32(0x0fd00000)        //ret ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110101110111000; //0x16bb8
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(bmp_iter_set_init, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foobar, 0b00010110100110000000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110101110111000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016bb8;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
