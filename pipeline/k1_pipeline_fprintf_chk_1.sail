// executing pipeline fprintf_chk_1.c.out.dumped test 
val k1_pipeline_fprintf_chk_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_fprintf_chk_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let __fprintf_chk: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x270d160c),        //sd 88 (0x58)[$r12] = $r3;;
     _32(0x2811180c),        //sq 96 (0x60)[$r12] = $r4r5;;
     _32(0x28191c0c),        //sq 112 (0x70)[$r12] = $r6r7;;
     _32(0x2821200c),        //sq 128 (0x80)[$r12] = $r8r9;;
     _32(0x2829240c),        //sq 144 (0x90)[$r12] = $r10r11;;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x2709060c),        //sd 24 (0x18)[$r12] = $r2;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x6100160c),        //addd $r0 = $r12, 88 (0x58);;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x18000eae),        //call 1a330 <vfprintf>;;
     _32(0x26010f0c),        //sw 60 (0x3c)[$r12] = $r0;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _96(0x0000000080000100e000f000),        //make $r0 = 263104 (0x403c0);;
     _32(0x180002e9),        //call 17488 <fwrite>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16904 <main+0x6c>;;
     _32(0x18000208),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e008f000),        //make $r2 = 263104 (0x403c0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1fffffb9),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b140),        //compw.eq $r0 = $r0, 5 (0x5);;
     _32(0x0c000080),        //cb.wnez $r0? 16954 <main+0xbc>;;
     _32(0x180001f4),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16970 <main+0xd8>;;
     _32(0x180001ed),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60080006),        //make $r2 = 6 (0x6);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _96(0x0000000080000100e000f200),        //make $r0 = 263112 (0x403c8);;
     _32(0x180002b6),        //call 17488 <fwrite>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 169d0 <main+0x138>;;
     _32(0x180001d5),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e008f200),        //make $r2 = 263112 (0x403c8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1fffff86),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b180),        //compw.eq $r0 = $r0, 6 (0x6);;
     _32(0x0c000080),        //cb.wnez $r0? 16a20 <main+0x188>;;
     _32(0x180001c1),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16a3c <main+0x1a4>;;
     _32(0x180001ba),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000061),        //make $r0 = 97 (0x61);;
     _32(0x180001ff),        //call 17268 <fputc>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16a8c <main+0x1f4>;;
     _32(0x180001a6),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e008f400),        //make $r2 = 263120 (0x403d0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1fffff57),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16adc <main+0x244>;;
     _32(0x18000192),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16af8 <main+0x260>;;
     _32(0x1800018b),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16b28 <main+0x290>;;
     _32(0x1800017f),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e008f600),        //make $r2 = 263128 (0x403d8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1fffff30),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16b70 <main+0x2d8>;;
     _32(0x1800016d),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16b8c <main+0x2f4>;;
     _32(0x18000166),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _96(0x0000000080000100e000f000),        //make $r0 = 263104 (0x403c0);;
     _32(0x1800022f),        //call 17488 <fwrite>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16bec <main+0x354>;;
     _32(0x1800014e),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e00cf000),        //make $r3 = 263104 (0x403c0);;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffefc),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b140),        //compw.eq $r0 = $r0, 5 (0x5);;
     _32(0x0c000080),        //cb.wnez $r0? 16c48 <main+0x3b0>;;
     _32(0x18000137),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16c64 <main+0x3cc>;;
     _32(0x18000130),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60080006),        //make $r2 = 6 (0x6);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _96(0x0000000080000100e000f200),        //make $r0 = 263112 (0x403c8);;
     _32(0x180001f9),        //call 17488 <fwrite>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16cc4 <main+0x42c>;;
     _32(0x18000118),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e00cf200),        //make $r3 = 263112 (0x403c8);;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffec6),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b180),        //compw.eq $r0 = $r0, 6 (0x6);;
     _32(0x0c000080),        //cb.wnez $r0? 16d20 <main+0x488>;;
     _32(0x18000101),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16d3c <main+0x4a4>;;
     _32(0x180000fa),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000061),        //make $r0 = 97 (0x61);;
     _32(0x1800013f),        //call 17268 <fputc>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16d8c <main+0x4f4>;;
     _32(0x180000e6),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e00cf400),        //make $r3 = 263120 (0x403d0);;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe94),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16de8 <main+0x550>;;
     _32(0x180000cf),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16e04 <main+0x56c>;;
     _32(0x180000c8),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16e34 <main+0x59c>;;
     _32(0x180000bc),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e00cf600),        //make $r3 = 263128 (0x403d8);;
     _96(0x0000000080000100e008f800),        //make $r2 = 263136 (0x403e0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe6a),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16e88 <main+0x5f0>;;
     _32(0x180000a7),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ea4 <main+0x60c>;;
     _32(0x180000a0),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000078),        //make $r0 = 120 (0x78);;
     _32(0x180000e5),        //call 17268 <fputc>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ef4 <main+0x65c>;;
     _32(0x1800008c),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x600c0078),        //make $r3 = 120 (0x78);;
     _96(0x0000000080000100e008fa00),        //make $r2 = 263144 (0x403e8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe3c),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16f48 <main+0x6b0>;;
     _32(0x18000077),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16f64 <main+0x6cc>;;
     _32(0x18000070),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e00cf200),        //make $r3 = 263112 (0x403c8);;
     _96(0x0000000080000100e008fc00),        //make $r2 = 263152 (0x403f0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe1e),        //call 16820 <__fprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16fc8 <main+0x730>;;
     _32(0x18000057),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _96(0x0000000080000100e00cf200),        //make $r3 = 263112 (0x403c8);;
     _96(0x0000000080000100e008fc00),        //make $r2 = 263152 (0x403f0);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffe05),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b1c0),        //compw.eq $r0 = $r0, 7 (0x7);;
     _32(0x0c000080),        //cb.wnez $r0? 17024 <main+0x78c>;;
     _32(0x18000040),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 17040 <main+0x7a8>;;
     _32(0x18000039),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x600c0000),        //make $r3 = 0 (0x0);;
     _96(0x0000000080000100e008fe00),        //make $r2 = 263160 (0x403f8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffde9),        //call 16820 <__fprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 1709c <main+0x804>;;
     _32(0x18000022),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x600c0000),        //make $r3 = 0 (0x0);;
     _96(0x0000000080000100e008fe00),        //make $r2 = 263160 (0x403f8);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x1ffffdd2),        //call 16820 <__fprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 170f0 <main+0x858>;;
     _32(0x1800000d),        //call 17120 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 1710c <main+0x874>;;
     _32(0x18000006),        //call 17120 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980002e7),        //call 17cc8 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98002ced),        //call 224e8 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let __libc_fini_array: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _96(0x800000dca749040ce0480000),        //make $r18 = 225280 (0x37000)
     _32(0x00000000),        //sd 16 (0x10)[$r12] = $r18;;
     _96(0x800000dca739020ce5380012),        //sbfd $r14 = $r18, 225280 (0x37000)
     _32(0x00000000),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa3a20ce),        //srad $r14 = $r14, 3 (0x3)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x0880014e),        //cb.deqz $r14? 17184 <__libc_fini_array+0x44>;;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x3802f392),        //ld.xs $r0 = $r14[$r18];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x087fff4e),        //cb.dnez $r14? 17174 <__libc_fini_array+0x34>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let _fputc_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xf84cffc1),        //zxwd $r19 = $r1
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xea380002),        //copyd $r14 = $r2
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x88800100),        //cb.deqz $r0? 171cc <_fputc_r+0x2c>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x30041400),        //lwz $r1 = 80 (0x50)[$r0];;
     _32(0x0c800641),        //cb.weqz $r1? 1722c <_fputc_r+0x8c>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b000140),        //cb.odd $r0? 171e4 <_fputc_r+0x44>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c800780),        //cb.weqz $r0? 17258 <_fputc_r+0xb8>;;
     _32(0x98000183),        //call 177f0 <_putc_r>
     _32(0xfa040013),        //copyw $r1 = $r19
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x6a08000e),        //copyd $r2 = $r14;;
     _32(0xfa480000),        //copyw $r18 = $r0
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x0b000141),        //cb.odd $r1? 17210 <_fputc_r+0x70>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c800280),        //cb.weqz $r0? 17234 <_fputc_r+0x94>;;
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x180013dd),        //call 1c1a0 <__sinit>;;
     _32(0x17ffffe7),        //goto 171cc <_fputc_r+0x2c>;;
     _32(0x98000143),        //call 17740 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x980000f6),        //call 17630 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffe1),        //goto 171e4 <_fputc_r+0x44>;;
     _32(0x7f03f000)        //nop ;;
 |];

let fputc: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x08000000880000fce0081000),        //make $r2 = 258112 (0x3f040);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xf84cffc0),        //zxwd $r19 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x38480002),        //ld $r18 = 0 (0x0)[$r2];;
     _32(0x088000d2),        //cb.deqz $r18? 172a0 <fputc+0x38>;;
     _32(0x30001412),        //lwz $r0 = 80 (0x50)[$r18];;
     _32(0x0c800640),        //cb.weqz $r0? 17300 <fputc+0x98>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b000140),        //cb.odd $r0? 172b8 <fputc+0x50>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c8007c0),        //cb.weqz $r0? 17330 <fputc+0xc8>;;
     _32(0x9800014e),        //call 177f0 <_putc_r>
     _32(0xfa040013),        //copyw $r1 = $r19
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x6a08000e),        //copyd $r2 = $r14;;
     _32(0xfa480000),        //copyw $r18 = $r0
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x0b000141),        //cb.odd $r1? 172e4 <fputc+0x7c>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c8002c0),        //cb.weqz $r0? 1730c <fputc+0xa4>;;
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x980013a8),        //call 1c1a0 <__sinit>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x17ffffe6),        //goto 172a0 <fputc+0x38>;;
     _32(0x9800010d),        //call 17740 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x980000c0),        //call 17630 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffe0),        //goto 172b8 <fputc+0x50>;;
     _32(0x00000000)        //errop ;;
 |];

let _fwrite_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0xea480003),        //copyd $r18 = $r3
     _32(0xe10c0e0c),        //addd $r3 = $r12, 56 (0x38)
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849040c),        //sq 16 (0x10)[$r12] = $r18r19;;
     _32(0xea500002),        //copyd $r20 = $r2
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _32(0x2851080c),        //sq 32 (0x20)[$r12] = $r20r21;;
     _32(0xea380004),        //copyd $r14 = $r4
     _32(0xd4541512),        //muld $r21 = $r18, $r20
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x27410c0c),        //sd 48 (0x30)[$r12] = $r16;;
     _32(0x27050e0c),        //sd 56 (0x38)[$r12] = $r1;;
     _32(0x270d120c),        //sd 72 (0x48)[$r12] = $r3;;
     _32(0x2609140c),        //sw 80 (0x50)[$r12] = $r2;;
     _32(0x2755100c),        //sd 64 (0x40)[$r12] = $r21;;
     _32(0x88800100),        //cb.deqz $r0? 17394 <_fwrite_r+0x54>
     _32(0x2755160c),        //sd 88 (0x58)[$r12] = $r21;;
     _32(0x30041400),        //lwz $r1 = 80 (0x50)[$r0];;
     _32(0x0c800b41),        //cb.weqz $r1? 17444 <_fwrite_r+0x104>;;
     _32(0x3008420e),        //lwz $r2 = 264 (0x108)[$r14];;
     _32(0x2804040e),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0x8b000142),        //cb.odd $r2? 173b0 <_fwrite_r+0x70>
     _32(0x6403f001),        //zxhd $r0 = $r1;;
     _64(0x00000000f8088000),        //andw $r2 = $r0, 512 (0x200);;
     _32(0x0c800c42),        //cb.weqz $r2? 17470 <_fwrite_r+0x130>;;
     _64(0x00000008f8000000),        //andw $r0 = $r0, 8192 (0x2000);;
     _32(0x0c000200),        //cb.wnez $r0? 173d8 <_fwrite_r+0x98>;;
     _64(0xb000420efa040001),        //orw $r1 = $r1, 8192 (0x2000)
     _32(0x00000008),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x2505040e),        //sh 16 (0x10)[$r14] = $r1;;
     _64(0x07fffff7f800ffc0),        //andw $r0 = $r0, -8193 (0xffffffffffffdfff);;
     _32(0x2601420e),        //sw 264 (0x108)[$r14] = $r0;;
     _32(0x9800157c),        //call 1c9c8 <__sfvwrite_r>
     _32(0xe108120c),        //addd $r2 = $r12, 72 (0x48)
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x0c800640),        //cb.weqz $r0? 1744c <_fwrite_r+0x10c>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b800380),        //cb.even $r0? 17428 <_fwrite_r+0xe8>;;
     _32(0xea040014),        //copyd $r1 = $r20
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x98003ddb),        //call 26b68 <__udivdi3>
     _32(0x75010540),        //sbfd $r0 = $r0, $r21;;
     _32(0x6a480000),        //copyd $r18 = $r0;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x3c48040c),        //lq $r18r19 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c50080c),        //lq $r20r21 = 32 (0x20)[$r12];;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c7ffc00),        //cb.wnez $r0? 173f4 <_fwrite_r+0xb4>;;
     _32(0x980000c2),        //call 17740 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffed),        //goto 173f4 <_fwrite_r+0xb4>;;
     _32(0x18001357),        //call 1c1a0 <__sinit>;;
     _32(0x17ffffd3),        //goto 17394 <_fwrite_r+0x54>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b7ffb80),        //cb.odd $r0? 17408 <_fwrite_r+0xc8>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c7ffa80),        //cb.wnez $r0? 17408 <_fwrite_r+0xc8>;;
     _32(0x980000b7),        //call 17740 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffe7),        //goto 17408 <_fwrite_r+0xc8>;;
     _32(0x98000070),        //call 17630 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x2804040e),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0x97ffffcd),        //goto 173b0 <_fwrite_r+0x70>
     _32(0x6403f001),        //zxhd $r0 = $r1;;
     _32(0x7f03f000)        //nop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110100010011000; //0x16898
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__fprintf_chk, 0b00010110100000100000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110100010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111000100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_fini_array, 0b00010111000101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fputc_r, 0b00010111000110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fputc, 0b00010111001001101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fwrite_r, 0b00010111001101000000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016898;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
