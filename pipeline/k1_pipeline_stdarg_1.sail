// executing pipeline stdarg_1.c.out.dumped test 
val k1_pipeline_stdarg_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_stdarg_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let foo: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000000f001b140),        //compw.ne $r0 = $r0, 5 (0x5);;
     _32(0x0c000280),        //cb.wnez $r0? 16868 <foo+0x48>;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0002600),        //make $r0 = 289944 (0x46c98);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x10000002),        //goto 1686c <foo+0x4c>;;
     _32(0x180001d6),        //call 16fc0 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let bar: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000200f001b180),        //compw.ne $r0 = $r0, 16390 (0x4006);;
     _32(0x0c000740),        //cb.wnez $r0? 16910 <bar+0x90>;;
     _96(0x000000008000011be0002a00),        //make $r0 = 289960 (0x46ca8);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _96(0x000000008000011be0082a00),        //make $r2 = 289960 (0x46ca8);;
     _32(0x27050002),        //sd 0 (0x0)[$r2] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0201880080000000e0040000),        //make $r1 = 4625478292286210048 (0x4031000000000000);;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x08000340),        //cb.dnez $r0? 1690c <bar+0x8c>;;
     _96(0x000000008000011be0002a00),        //make $r0 = 289960 (0x46ca8);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _96(0x000000008000011be0082a00),        //make $r2 = 289960 (0x46ca8);;
     _32(0x27050002),        //sd 0 (0x0)[$r2] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61012040),        //compd.eq $r0 = $r0, 129 (0x81);;
     _32(0x08000a40),        //cb.dnez $r0? 169ac <bar+0x12c>;;
     _32(0x180001ad),        //call 16fc0 <abort>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000200f001b200),        //compw.ne $r0 = $r0, 16392 (0x4008);;
     _32(0x0c000900),        //cb.wnez $r0? 169ac <bar+0x12c>;;
     _96(0x000000008000011be0002c00),        //make $r0 = 289968 (0x46cb0);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000001),        //ld $r0 = 0 (0x0)[$r1];;
     _32(0x61080200),        //addd $r2 = $r0, 8 (0x8);;
     _32(0x27090001),        //sd 0 (0x0)[$r1] = $r2;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60010380),        //compd.ne $r0 = $r0, 14 (0xe);;
     _32(0x08000640),        //cb.dnez $r0? 169a8 <bar+0x128>;;
     _96(0x000000008000011be0002c00),        //make $r0 = 289968 (0x46cb0);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000001),        //ld $r0 = 0 (0x0)[$r1];;
     _32(0x61080200),        //addd $r2 = $r0, 8 (0x8);;
     _32(0x27090001),        //sd 0 (0x0)[$r1] = $r2;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0203030080000000e0040000),        //make $r1 = 4638813169307877376 (0x4060600000000000);;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x08000300),        //cb.dnez $r0? 169a8 <bar+0x128>;;
     _96(0x000000008000011be0002c00),        //make $r0 = 289968 (0x46cb0);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000001),        //ld $r0 = 0 (0x0)[$r1];;
     _32(0x61080200),        //addd $r2 = $r0, 8 (0x8);;
     _32(0x27090001),        //sd 0 (0x0)[$r1] = $r2;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000000f101b440),        //compw.eq $r0 = $r0, 17 (0x11);;
     _32(0x0c000080),        //cb.wnez $r0? 169ac <bar+0x12c>;;
     _32(0x18000186),        //call 16fc0 <abort>;;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f0: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f1: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f2: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _96(0x000000008000011be0002800),        //make $r0 = 289952 (0x46ca0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff84),        //call 16880 <bar>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff76),        //call 16880 <bar>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f3: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0042800),        //make $r1 = 289952 (0x46ca0);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f4: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x1fffff2a),        //call 16820 <foo>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f5: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _96(0x000000008000011be0042a00),        //make $r1 = 289960 (0x46ca8);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x1fffff2a),        //call 16880 <bar>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f6: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _96(0x000000008000011be0002800),        //make $r0 = 289952 (0x46ca0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x46033000),        //fixedd.rz $r0 = $r0, 0 (0x0);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffff12),        //call 16880 <bar>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0042200),        //make $r1 = 289928 (0x46c88);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1ffffefe),        //call 16880 <bar>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f7: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _96(0x000000008000011be0042c00),        //make $r1 = 289968 (0x46cb0);;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x1ffffee6),        //call 16880 <bar>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f8: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _96(0x000000008000011be0042c00),        //make $r1 = 289968 (0x46cb0);;
     _32(0x6100060c),        //addd $r0 = $r12, 24 (0x18);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x1ffffece),        //call 16880 <bar>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705060c),        //sd 24 (0x18)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x000000008000011be0042800),        //make $r1 = 289952 (0x46ca0);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffff12),        //call 169d8 <f0>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1fffff16),        //call 169f0 <f1>;;
     _96(0x000000008000011be0002800),        //make $r0 = 289952 (0x46ca0);;
     _96(0x0201f80080000000e0040000),        //make $r1 = 4629418941960159232 (0x403f000000000000);;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x6004001c),        //make $r1 = 28 (0x1c);;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1fffff1a),        //call 16a28 <f2>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000000f001b700),        //compw.ne $r0 = $r0, 28 (0x1c);;
     _32(0x0c0001c0),        //cb.wnez $r0? 16df8 <main+0x78>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61010700),        //compd.eq $r0 = $r0, 28 (0x1c);;
     _32(0x08000080),        //cb.dnez $r0? 16dfc <main+0x7c>;;
     _32(0x18000072),        //call 16fc0 <abort>;;
     _96(0x0203030080000000e0040000),        //make $r1 = 4638813169307877376 (0x4060600000000000);;
     _32(0x60000004),        //make $r0 = 4 (0x4);;
     _32(0x1fffff2d),        //call 16ac0 <f3>;;
     _96(0x000000008000011be0002800),        //make $r0 = 289952 (0x46ca0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0203030080000000e0040000),        //make $r1 = 4638813169307877376 (0x4060600000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16e38 <main+0xb8>;;
     _32(0x18000063),        //call 16fc0 <abort>;;
     _32(0x60080080),        //make $r2 = 128 (0x80);;
     _96(0x0201800080000000e0040000),        //make $r1 = 4625196817309499392 (0x4030000000000000);;
     _32(0x60000005),        //make $r0 = 5 (0x5);;
     _32(0x1fffff33),        //call 16b18 <f4>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x60010400),        //compd.ne $r0 = $r0, 16 (0x10);;
     _32(0x08000200),        //cb.dnez $r0? 16e84 <main+0x104>;;
     _96(0x000000008000011be0002600),        //make $r0 = 289944 (0x46c98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000004f101b000),        //compw.eq $r0 = $r0, 128 (0x80);;
     _32(0x0c000080),        //cb.wnez $r0? 16e88 <main+0x108>;;
     _32(0x1800004f),        //call 16fc0 <abort>;;
     _32(0x60080081),        //make $r2 = 129 (0x81);;
     _96(0x0201880080000000e0040000),        //make $r1 = 4625478292286210048 (0x4031000000000000);;
     _32(0x60004006),        //make $r0 = 16390 (0x4006);;
     _32(0x1fffff3d),        //call 16b90 <f5>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000200f101b180),        //compw.eq $r0 = $r0, 16390 (0x4006);;
     _32(0x0c000080),        //cb.wnez $r0? 16ec0 <main+0x140>;;
     _32(0x18000041),        //call 16fc0 <abort>;;
     _32(0x600cffe1),        //make $r3 = -31 (0xffffffe1);;
     _32(0x6008000e),        //make $r2 = 14 (0xe);;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x60000007),        //make $r0 = 7 (0x7);;
     _32(0x1fffff48),        //call 16bf0 <f6>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x07fffffff101b040),        //compw.eq $r0 = $r0, 4294967265 (0xffffffe1);;
     _32(0x0c000080),        //cb.wnez $r0? 16ef4 <main+0x174>;;
     _32(0x18000034),        //call 16fc0 <abort>;;
     _96(0x0201d00080000000e0100000),        //make $r4 = 4628011567076605952 (0x403a000000000000);;
     _32(0x600c0011),        //make $r3 = 17 (0x11);;
     _96(0x0203030080000000e0080000),        //make $r2 = 4638813169307877376 (0x4060600000000000);;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x60004008),        //make $r0 = 16392 (0x4008);;
     _32(0x1fffff62),        //call 16ca0 <f7>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000200f101b200),        //compw.eq $r0 = $r0, 16392 (0x4008);;
     _32(0x0c000080),        //cb.wnez $r0? 16f3c <main+0x1bc>;;
     _32(0x18000022),        //call 16fc0 <abort>;;
     _96(0x0201d80080000000e0100000),        //make $r4 = 4628293042053316608 (0x403b000000000000);;
     _32(0x600c0011),        //make $r3 = 17 (0x11);;
     _96(0x0203030080000000e0080000),        //make $r2 = 4638813169307877376 (0x4060600000000000);;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x60004008),        //make $r0 = 16392 (0x4008);;
     _32(0x1fffff68),        //call 16d00 <f8>;;
     _96(0x000000008000011be0002400),        //make $r0 = 289936 (0x46c90);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000200f001b200),        //compw.ne $r0 = $r0, 16392 (0x4008);;
     _32(0x0c000280),        //cb.wnez $r0? 16fa4 <main+0x224>;;
     _96(0x000000008000011be0002800),        //make $r0 = 289952 (0x46ca0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0201d80080000000e0040000),        //make $r1 = 4628293042053316608 (0x403b000000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16fa8 <main+0x228>;;
     _32(0x18000007),        //call 16fc0 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 17398 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 18ec8 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110110110000000; //0x16d80
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(bar, 0b00010110100010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f0, 0b00010110100111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f1, 0b00010110100111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f2, 0b00010110101000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f3, 0b00010110101011000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f4, 0b00010110101100011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f5, 0b00010110101110010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f6, 0b00010110101111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f7, 0b00010110110010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f8, 0b00010110110100000000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110110110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110111111000000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016d80;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
