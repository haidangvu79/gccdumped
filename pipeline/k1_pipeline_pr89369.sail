// executing pipeline pr89369.c.out.dumped test 
val k1_pipeline_pr89369: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_pr89369() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let foo: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x2609020c),        //sw 8 (0x8)[$r12] = $r2;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x30000300),        //lwz $r0 = 12 (0xc)[$r0];;
     _32(0x79022800),        //slld $r0 = $r0, 32 (0x20);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x30040201),        //lwz $r1 = 8 (0x8)[$r1];;
     _32(0x7a010040),        //ord $r0 = $r0, $r1;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x30000100),        //lwz $r0 = 4 (0x4)[$r0];;
     _32(0x79022800),        //slld $r0 = $r0, 32 (0x20);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x7a010040),        //ord $r0 = $r0, $r1;;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x38040e0c),        //ld $r1 = 56 (0x38)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x75000200),        //sbfw $r0 = $r0, 8 (0x8);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x38040e0c),        //ld $r1 = 56 (0x38)[$r12];;
     _32(0x79026001),        //slld $r0 = $r1, $r0;;
     _32(0x3804080c),        //ld $r1 = 32 (0x20)[$r12];;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x26050100),        //sw 4 (0x4)[$r0] = $r1;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x26050300),        //sw 12 (0xc)[$r0] = $r1;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x26050200),        //sw 8 (0x8)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let bar: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x2609020c),        //sw 8 (0x8)[$r12] = $r2;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x30000300),        //lwz $r0 = 12 (0xc)[$r0];;
     _32(0x79022800),        //slld $r0 = $r0, 32 (0x20);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x30040201),        //lwz $r1 = 8 (0x8)[$r1];;
     _32(0x7a010040),        //ord $r0 = $r0, $r1;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x30000100),        //lwz $r0 = 4 (0x4)[$r0];;
     _32(0x79022800),        //slld $r0 = $r0, 32 (0x20);;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x7a010040),        //ord $r0 = $r0, $r1;;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x38040e0c),        //ld $r1 = 56 (0x38)[$r12];;
     _32(0x79026001),        //slld $r0 = $r1, $r0;;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x79026001),        //slld $r0 = $r1, $r0;;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x75000200),        //sbfw $r0 = $r0, 8 (0x8);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x790230c0),        //sllw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x38040a0c),        //ld $r1 = 40 (0x28)[$r12];;
     _32(0x7a010001),        //ord $r0 = $r1, $r0;;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x26050100),        //sw 4 (0x4)[$r0] = $r1;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x26050300),        //sw 12 (0xc)[$r0] = $r1;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x26050200),        //sw 8 (0x8)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let baz: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x27050c0c),        //sd 48 (0x30)[$r12] = $r1;;
     _32(0x27090a0c),        //sd 40 (0x28)[$r12] = $r2;;
     _32(0x270d080c),        //sd 32 (0x20)[$r12] = $r3;;
     _32(0x2711060c),        //sd 24 (0x18)[$r12] = $r4;;
     _32(0x6100140c),        //addd $r0 = $r12, 80 (0x50);;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x1fffffb7),        //call 16918 <bar>;;
     _32(0x6100100c),        //addd $r0 = $r12, 64 (0x40);;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x3804080c),        //ld $r1 = 32 (0x20)[$r12];;
     _32(0x1fffff75),        //call 16820 <foo>;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x3000140c),        //lwz $r0 = 80 (0x50)[$r12];;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7b0232c0),        //srlw $r0 = $r0, 11 (0xb);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07f7fffff800fbc0),        //andw $r0 = $r0, -536870929 (0xffffffffdfffffef);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3000100c),        //lwz $r0 = 64 (0x40)[$r12];;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x79023480),        //sllw $r0 = $r0, 18 (0x12);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x30040100),        //lwz $r1 = 4 (0x4)[$r0];;
     _32(0x3000150c),        //lwz $r0 = 84 (0x54)[$r12];;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x30000100),        //lwz $r0 = 4 (0x4)[$r0];;
     _32(0x7b0232c0),        //srlw $r0 = $r0, 11 (0xb);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07f77fb2f800dfc0),        //andw $r0 = $r0, -570504321 (0xffffffffddfecb7f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3000110c),        //lwz $r0 = 68 (0x44)[$r12];;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x30000100),        //lwz $r0 = 4 (0x4)[$r0];;
     _32(0x79023480),        //sllw $r0 = $r0, 18 (0x12);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x26050100),        //sw 4 (0x4)[$r0] = $r1;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x30040200),        //lwz $r1 = 8 (0x8)[$r0];;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x30000200),        //lwz $r0 = 8 (0x8)[$r0];;
     _32(0x7b0232c0),        //srlw $r0 = $r0, 11 (0xb);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07effebff800ffc0),        //andw $r0 = $r0, -1074069505 (0xffffffffbffaffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3000120c),        //lwz $r0 = 72 (0x48)[$r12];;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x30000200),        //lwz $r0 = 8 (0x8)[$r0];;
     _32(0x79023480),        //sllw $r0 = $r0, 18 (0x12);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x26050200),        //sw 8 (0x8)[$r0] = $r1;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x30040300),        //lwz $r1 = 12 (0xc)[$r0];;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x30000300),        //lwz $r0 = 12 (0xc)[$r0];;
     _32(0x7b0232c0),        //srlw $r0 = $r0, 11 (0xb);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x07effffff800fd80),        //andw $r0 = $r0, -1073741834 (0xffffffffbffffff6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3000130c),        //lwz $r0 = 76 (0x4c)[$r12];;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x30000300),        //lwz $r0 = 12 (0xc)[$r0];;
     _32(0x79023480),        //sllw $r0 = $r0, 18 (0x12);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x26050300),        //sw 12 (0xc)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130180c),        //addd $r12 = $r12, 96 (0x60);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x600004d3),        //make $r0 = 1235 (0x4d3);;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _64(0x07ef1512e00036ff),        //make $r0 = -1135327013 (0xffffffffbc5448db);;
     _32(0x2601090c),        //sw 36 (0x24)[$r12] = $r0;;
     _64(0x07fc8af7e000a7ff),        //make $r0 = -232005985 (0xfffffffff22bde9f);;
     _32(0x26010a0c),        //sw 40 (0x28)[$r12] = $r0;;
     _64(0x07faed13e000e3ff),        //make $r0 = -340504689 (0xffffffffebb44f8f);;
     _32(0x26010b0c),        //sw 44 (0x2c)[$r12] = $r0;;
     _64(0x0000e8c9e000e640),        //make $r0 = 61024153 (0x3a32799);;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _64(0x00182fa0e0009180),        //make $r0 = 1623097926 (0x60be8246);;
     _32(0x26010d0c),        //sw 52 (0x34)[$r12] = $r0;;
     _64(0x07e8b499e000bb7f),        //make $r0 = -1563269395 (0xffffffffa2d266ed);;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _64(0x001ea861e0004d80),        //make $r0 = 2057405750 (0x7aa18536);;
     _32(0x26010f0c),        //sw 60 (0x3c)[$r12] = $r0;;
     _64(0x000568e1e0004600),        //make $r0 = 363037976 (0x15a38518);;
     _32(0x2601100c),        //sw 64 (0x40)[$r12] = $r0;;
     _64(0x07f3d957e000387f),        //make $r0 = -815440671 (0xffffffffcf655ce1);;
     _32(0x2601110c),        //sw 68 (0x44)[$r12] = $r0;;
     _64(0x07fcf826e000653f),        //make $r0 = -203384428 (0xfffffffff3e09994);;
     _32(0x2601120c),        //sw 72 (0x48)[$r12] = $r0;;
     _64(0x00143bdae0007f80),        //make $r0 = 1357867518 (0x50ef69fe);;
     _32(0x2601130c),        //sw 76 (0x4c)[$r12] = $r0;;
     _64(0x07e209d2e000c1ff),        //make $r0 = -2010690809 (0xffffffff88274b07);;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _64(0x07f9f252e00019bf),        //make $r0 = -406239130 (0xffffffffe7c94866);;
     _32(0x2601150c),        //sw 84 (0x54)[$r12] = $r0;;
     _64(0x07f03aa7e000d1ff),        //make $r0 = -1058365625 (0xffffffffc0ea9f47);;
     _32(0x2601160c),        //sw 88 (0x58)[$r12] = $r0;;
     _64(0x07edaa0fe00010ff),        //make $r0 = -1230488509 (0xffffffffb6a83c43);;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _64(0x07f34340e0000cbf),        //make $r0 = -854785998 (0xffffffffcd0d0032);;
     _32(0x2601180c),        //sw 96 (0x60)[$r12] = $r0;;
     _64(0x001751fde00075c0),        //make $r0 = 1564997079 (0x5d47f5d7);;
     _32(0x2601190c),        //sw 100 (0x64)[$r12] = $r0;;
     _64(0x001682bee000fd80),        //make $r0 = 1510669302 (0x5a0afbf6);;
     _32(0x26011a0c),        //sw 104 (0x68)[$r12] = $r0;;
     _64(0x07ebaa1ee000c93f),        //make $r0 = -1364690140 (0xffffffffaea87b24);;
     _32(0x26011b0c),        //sw 108 (0x6c)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26011d0c),        //sw 116 (0x74)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61100c00),        //addd $r4 = $r0, 48 (0x30);;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x610c0800),        //addd $r3 = $r0, 32 (0x20);;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61080400),        //addd $r2 = $r0, 16 (0x10);;
     _32(0x6104080c),        //addd $r1 = $r12, 32 (0x20);;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x61001400),        //addd $r0 = $r0, 80 (0x50);;
     _32(0x1fffff37),        //call 16a10 <baz>;;
     _32(0x3004180c),        //lwz $r1 = 96 (0x60)[$r12];;
     _32(0x30001c0c),        //lwz $r0 = 112 (0x70)[$r12];;
     _32(0x7001b001),        //compw.ne $r0 = $r1, $r0;;
     _32(0x0c000340),        //cb.wnez $r0? 16d78 <main+0x180>;;
     _32(0x3004190c),        //lwz $r1 = 100 (0x64)[$r12];;
     _32(0x30001d0c),        //lwz $r0 = 116 (0x74)[$r12];;
     _32(0x7001b001),        //compw.ne $r0 = $r1, $r0;;
     _32(0x0c000240),        //cb.wnez $r0? 16d78 <main+0x180>;;
     _32(0x30041a0c),        //lwz $r1 = 104 (0x68)[$r12];;
     _32(0x30001e0c),        //lwz $r0 = 120 (0x78)[$r12];;
     _32(0x7001b001),        //compw.ne $r0 = $r1, $r0;;
     _32(0x0c000140),        //cb.wnez $r0? 16d78 <main+0x180>;;
     _32(0x30041b0c),        //lwz $r1 = 108 (0x6c)[$r12];;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16d7c <main+0x184>;;
     _32(0x18000006),        //call 16d90 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 17168 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 18c98 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110101111111000; //0x16bf8
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(bar, 0b00010110100100011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(baz, 0b00010110101000010000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110101111111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110110110010000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016bf8;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
