// executing pipeline pr23324 test 
val k1_pipeline_pr23324: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_pr23324() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let callee_af6: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741080c),        //sd 32 (0x20)[$r12] = $r16;;
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0x6a380000),        //copyd $r14 = $r0;;
     _32(0x27050e0c),        //sd 56 (0x38)[$r12] = $r1;;
     _32(0x27090c0c),        //sd 48 (0x30)[$r12] = $r2;;
     _32(0x260d0a0c),        //sw 40 (0x28)[$r12] = $r3;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x68035000),        //extfs $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000000e),        //lwz $r0 = 0 (0x0)[$r14];;
     _32(0x68035000),        //extfs $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68077001),        //sxbd $r1 = $r1;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16878 <callee_af6+0x58>;;
     _32(0x180001af),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6803c180),        //extfs $r0 = $r0, 12 (0xc), 6 (0x6);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000000e),        //lwz $r0 = 0 (0x0)[$r14];;
     _32(0x6803c180),        //extfs $r0 = $r0, 12 (0xc), 6 (0x6);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68077001),        //sxbd $r1 = $r1;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 168b0 <callee_af6+0x90>;;
     _32(0x180001a1),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x69032340),        //extfs $r0 = $r0, 18 (0x12), 13 (0xd);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000000e),        //lwz $r0 = 0 (0x0)[$r14];;
     _32(0x69032340),        //extfs $r0 = $r0, 18 (0x12), 13 (0xd);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68077001),        //sxbd $r1 = $r1;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 168e8 <callee_af6+0xc8>;;
     _32(0x18000193),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x690374c0),        //extfs $r0 = $r0, 23 (0x17), 19 (0x13);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000000e),        //lwz $r0 = 0 (0x0)[$r14];;
     _32(0x690374c0),        //extfs $r0 = $r0, 23 (0x17), 19 (0x13);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68077001),        //sxbd $r1 = $r1;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16920 <callee_af6+0x100>;;
     _32(0x18000185),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x200400c0),        //lbz $r1 = 3 (0x3)[$r0];;
     _32(0x200000ce),        //lbz $r0 = 3 (0x3)[$r14];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16940 <callee_af6+0x120>;;
     _32(0x1800017d),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30040100),        //lwz $r1 = 4 (0x4)[$r0];;
     _32(0x3000010e),        //lwz $r0 = 4 (0x4)[$r14];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16960 <callee_af6+0x140>;;
     _32(0x18000175),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x38040200),        //ld $r1 = 8 (0x8)[$r0];;
     _32(0x3800020e),        //ld $r0 = 8 (0x8)[$r14];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16980 <callee_af6+0x160>;;
     _32(0x1800016d),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x38040400),        //ld $r1 = 16 (0x10)[$r0];;
     _32(0x3800040e),        //ld $r0 = 16 (0x10)[$r14];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 169a0 <callee_af6+0x180>;;
     _32(0x18000165),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30000600),        //lwz $r0 = 24 (0x18)[$r0];;
     _32(0x6803b000),        //extfs $r0 = $r0, 11 (0xb), 0 (0x0);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _32(0x3000060e),        //lwz $r0 = 24 (0x18)[$r14];;
     _32(0x6803b000),        //extfs $r0 = $r0, 11 (0xb), 0 (0x0);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6807f001),        //sxhd $r1 = $r1;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 169d8 <callee_af6+0x1b8>;;
     _32(0x18000157),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30000600),        //lwz $r0 = 24 (0x18)[$r0];;
     _32(0x6803e300),        //extfs $r0 = $r0, 14 (0xe), 12 (0xc);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000060e),        //lwz $r0 = 24 (0x18)[$r14];;
     _32(0x6803e300),        //extfs $r0 = $r0, 14 (0xe), 12 (0xc);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68077001),        //sxbd $r1 = $r1;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16a10 <callee_af6+0x1f0>;;
     _32(0x18000149),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30000600),        //lwz $r0 = 24 (0x18)[$r0];;
     _32(0x690303c0),        //extfs $r0 = $r0, 16 (0x10), 15 (0xf);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000060e),        //lwz $r0 = 24 (0x18)[$r14];;
     _32(0x690303c0),        //extfs $r0 = $r0, 16 (0x10), 15 (0xf);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68077001),        //sxbd $r1 = $r1;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16a48 <callee_af6+0x228>;;
     _32(0x1800013b),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x30000600),        //lwz $r0 = 24 (0x18)[$r0];;
     _32(0x6903a440),        //extfs $r0 = $r0, 26 (0x1a), 17 (0x11);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _32(0x3000060e),        //lwz $r0 = 24 (0x18)[$r14];;
     _32(0x6903a440),        //extfs $r0 = $r0, 26 (0x1a), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6807f001),        //sxhd $r1 = $r1;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16a80 <callee_af6+0x260>;;
     _32(0x1800012d),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x38040800),        //ld $r1 = 32 (0x20)[$r0];;
     _32(0x3800080e),        //ld $r0 = 32 (0x20)[$r14];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16aa0 <callee_af6+0x280>;;
     _32(0x18000125),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x38040a00),        //ld $r1 = 40 (0x28)[$r0];;
     _32(0x38000a0e),        //ld $r0 = 40 (0x28)[$r14];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ac0 <callee_af6+0x2a0>;;
     _32(0x1800011d),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x38040c00),        //ld $r1 = 48 (0x30)[$r0];;
     _32(0x38000c0e),        //ld $r0 = 48 (0x30)[$r14];;
     _32(0x7a030001),        //fcompd.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ae0 <callee_af6+0x2c0>;;
     _32(0x18000115),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001000),        //make $r0 = 254016 (0x3e040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38040e0c),        //ld $r1 = 56 (0x38)[$r12];;
     _32(0x7a030001),        //fcompd.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16b00 <callee_af6+0x2e0>;;
     _32(0x1800010d),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001200),        //make $r0 = 254024 (0x3e048);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38040c0c),        //ld $r1 = 48 (0x30)[$r12];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16b20 <callee_af6+0x300>;;
     _32(0x18000105),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001400),        //make $r0 = 254032 (0x3e050);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x30040a0c),        //lwz $r1 = 40 (0x28)[$r12];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16b40 <callee_af6+0x320>;;
     _32(0x180000fd),        //call 16f30 <abort>;;
     _32(0x3840080c),        //ld $r16 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let caller_bf6: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x00000000800000f8e0001000),        //make $r0 = 254016 (0x3e040);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001200),        //make $r0 = 254024 (0x3e048);;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001400),        //make $r0 = 254032 (0x3e050);;
     _32(0x30100000),        //lwz $r4 = 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0000200),        //make $r0 = 253960 (0x3e008);;
     _32(0x380c0000),        //ld $r3 = 0 (0x0)[$r0];;
     _32(0x270d080c),        //sd 32 (0x20)[$r12] = $r3;;
     _32(0x380c0200),        //ld $r3 = 8 (0x8)[$r0];;
     _32(0x270d0a0c),        //sd 40 (0x28)[$r12] = $r3;;
     _32(0x380c0400),        //ld $r3 = 16 (0x10)[$r0];;
     _32(0x270d0c0c),        //sd 48 (0x30)[$r12] = $r3;;
     _32(0x380c0600),        //ld $r3 = 24 (0x18)[$r0];;
     _32(0x270d0e0c),        //sd 56 (0x38)[$r12] = $r3;;
     _32(0x380c0800),        //ld $r3 = 32 (0x20)[$r0];;
     _32(0x270d100c),        //sd 64 (0x40)[$r12] = $r3;;
     _32(0x380c0a00),        //ld $r3 = 40 (0x28)[$r0];;
     _32(0x270d120c),        //sd 72 (0x48)[$r12] = $r3;;
     _32(0x38000c00),        //ld $r0 = 48 (0x30)[$r0];;
     _32(0x2701140c),        //sd 80 (0x50)[$r12] = $r0;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x7a0c0004),        //copyw $r3 = $r4;;
     _32(0x1fffff10),        //call 16820 <callee_af6>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130180c),        //addd $r12 = $r12, 96 (0x60);;
     _32(0x0fd00000)        //ret ;;
 |];

let callee_af7: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x2601160c),        //sw 88 (0x58)[$r12] = $r0;;
     _32(0x2705140c),        //sd 80 (0x50)[$r12] = $r1;;
     _32(0x6a000002),        //copyd $r0 = $r2;;
     _32(0x6a040003),        //copyd $r1 = $r3;;
     _32(0x6a080004),        //copyd $r2 = $r4;;
     _32(0x6a0c0005),        //copyd $r3 = $r5;;
     _32(0x28050c0c),        //so 48 (0x30)[$r12] = $r0r1r2r3;;
     _32(0x27190a0c),        //sd 40 (0x28)[$r12] = $r6;;
     _32(0x261d080c),        //sw 32 (0x20)[$r12] = $r7;;
     _32(0x2721060c),        //sd 24 (0x18)[$r12] = $r8;;
     _32(0x2725040c),        //sd 16 (0x10)[$r12] = $r9;;
     _32(0x2729020c),        //sd 8 (0x8)[$r12] = $r10;;
     _96(0x00000000800000f8e0001800),        //make $r0 = 254048 (0x3e060);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x3004160c),        //lwz $r1 = 88 (0x58)[$r12];;
     _32(0x72030001),        //fcompw.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16c54 <callee_af7+0x5c>;;
     _32(0x180000b8),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001a00),        //make $r0 = 254056 (0x3e068);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3804140c),        //ld $r1 = 80 (0x50)[$r12];;
     _32(0x7a030001),        //fcompd.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16c74 <callee_af7+0x7c>;;
     _32(0x180000b0),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001c00),        //make $r0 = 254064 (0x3e070);;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x72030001),        //fcompw.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16c94 <callee_af7+0x9c>;;
     _32(0x180000a8),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001c00),        //make $r0 = 254064 (0x3e070);;
     _32(0x28040100),        //lhz $r1 = 4 (0x4)[$r0];;
     _32(0x28000d0c),        //lhz $r0 = 52 (0x34)[$r12];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16cb4 <callee_af7+0xbc>;;
     _32(0x180000a0),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001c00),        //make $r0 = 254064 (0x3e070);;
     _32(0x30000200),        //lwz $r0 = 8 (0x8)[$r0];;
     _32(0x68038000),        //extfs $r0 = $r0, 8 (0x8), 0 (0x0);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x68038000),        //extfs $r0 = $r0, 8 (0x8), 0 (0x0);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6807f001),        //sxhd $r1 = $r1;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16cec <callee_af7+0xf4>;;
     _32(0x18000092),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001c00),        //make $r0 = 254064 (0x3e070);;
     _32(0x28040280),        //lhz $r1 = 10 (0xa)[$r0];;
     _32(0x28000e8c),        //lhz $r0 = 58 (0x3a)[$r12];;
     _32(0x6807f001),        //sxhd $r1 = $r1;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16d14 <callee_af7+0x11c>;;
     _32(0x18000088),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001c00),        //make $r0 = 254064 (0x3e070);;
     _32(0x38040400),        //ld $r1 = 16 (0x10)[$r0];;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x7a030001),        //fcompd.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16d34 <callee_af7+0x13c>;;
     _32(0x18000080),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001c00),        //make $r0 = 254064 (0x3e070);;
     _32(0x30040600),        //lwz $r1 = 24 (0x18)[$r0];;
     _32(0x3000120c),        //lwz $r0 = 72 (0x48)[$r12];;
     _32(0x72030001),        //fcompw.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16d54 <callee_af7+0x15c>;;
     _32(0x18000078),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0002400),        //make $r0 = 254096 (0x3e090);;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x72030001),        //fcompw.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16d74 <callee_af7+0x17c>;;
     _32(0x18000070),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0002600),        //make $r0 = 254104 (0x3e098);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x3004080c),        //lwz $r1 = 32 (0x20)[$r12];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16d94 <callee_af7+0x19c>;;
     _32(0x18000068),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0002800),        //make $r0 = 254112 (0x3e0a0);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x7a030001),        //fcompd.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16db4 <callee_af7+0x1bc>;;
     _32(0x18000060),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0002a00),        //make $r0 = 254120 (0x3e0a8);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16dd8 <callee_af7+0x1e0>;;
     _32(0x18000057),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0002c00),        //make $r0 = 254128 (0x3e0b0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16df8 <callee_af7+0x200>;;
     _32(0x1800004f),        //call 16f30 <abort>;;
     _96(0x00000000800000f8e0001600),        //make $r0 = 254040 (0x3e058);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130180c),        //addd $r12 = $r12, 96 (0x60);;
     _32(0x0fd00000)        //ret ;;
 |];

let caller_bf7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _96(0x00000000800000f8e0001800),        //make $r0 = 254048 (0x3e060);;
     _32(0x302c0000),        //lwz $r11 = 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0001a00),        //make $r0 = 254056 (0x3e068);;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0002600),        //make $r0 = 254104 (0x3e098);;
     _32(0x30100000),        //lwz $r4 = 0 (0x0)[$r0];;
     _96(0x00000000800000f8e0002c00),        //make $r0 = 254128 (0x3e0b0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x00000000800000f8e00c2800),        //make $r3 = 254112 (0x3e0a0);;
     _96(0x00000000800000f8e0082400),        //make $r2 = 254096 (0x3e090);;
     _96(0x00000000800000f8e0041c00),        //make $r1 = 254064 (0x3e070);;
     _32(0x6a280000),        //copyd $r10 = $r0;;
     _96(0x00000000800000f8e0242a00),        //make $r9 = 254120 (0x3e0a8);;
     _32(0x38200003),        //ld $r8 = 0 (0x0)[$r3];;
     _32(0x7a1c0004),        //copyw $r7 = $r4;;
     _32(0x38180002),        //ld $r6 = 0 (0x0)[$r2];;
     _32(0x3c040001),        //lo $r0r1r2r3 = 0 (0x0)[$r1];;
     _32(0x6a100002),        //copyd $r4 = $r2;;
     _32(0x6a140003),        //copyd $r5 = $r3;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x6a04000e),        //copyd $r1 = $r14;;
     _32(0x7a00000b),        //copyw $r0 = $r11;;
     _32(0x1fffff4d),        //call 16bf8 <callee_af7>;;
     _32(0x240107cc),        //sb 31 (0x1f)[$r12] = $r0;;
     _96(0x00000000800000f8e0001600),        //make $r0 = 254040 (0x3e058);;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x200407cc),        //lbz $r1 = 31 (0x1f)[$r12];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16eec <caller_bf7+0xd4>;;
     _32(0x18000012),        //call 16f30 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x1fffff11),        //call 16b58 <caller_bf6>;;
     _32(0x1fffffc0),        //call 16e18 <caller_bf7>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 17308 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 18e38 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110111100001000; //0x16f08
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(callee_af6, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(caller_bf6, 0b00010110101101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(callee_af7, 0b00010110101111111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(caller_bf7, 0b00010110111000011000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110111100001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110111100110000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016f08;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
