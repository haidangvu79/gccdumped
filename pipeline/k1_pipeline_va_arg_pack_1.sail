// executing pipeline va_arg_pack_1.c.out.dumped test 
val k1_pipeline_va_arg_pack_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_va_arg_pack_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let foo1: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x28091c0c),        //sq 112 (0x70)[$r12] = $r2r3;;
     _32(0x2811200c),        //sq 128 (0x80)[$r12] = $r4r5;;
     _32(0x2819240c),        //sq 144 (0x90)[$r12] = $r6r7;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x61001c0c),        //addd $r0 = $r12, 112 (0x70);;
     _32(0x27010a0c),        //sd 40 (0x28)[$r12] = $r0;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x0d0002c0),        //cb.wltz $r0? 16880 <foo1+0x60>;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _64(0x00000000f501b4c0),        //compw.gt $r0 = $r0, 19 (0x13);;
     _32(0x0c0001c0),        //cb.wnez $r0? 16880 <foo1+0x60>;;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x3400080c),        //lws $r0 = 32 (0x20)[$r12];;
     _32(0x2002e001),        //lbz $r0 = $r0[$r1];;
     _32(0x08800080),        //cb.deqz $r0? 16884 <foo1+0x64>;;
     _32(0x1800024a),        //call 171a8 <abort>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x3400080c),        //lws $r0 = 32 (0x20)[$r12];;
     _32(0x240be001),        //sb $r0[$r1] = $r2;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000000f101b180),        //compw.eq $r0 = $r0, 6 (0x6);;
     _32(0x0c000080),        //cb.wnez $r0? 168e8 <foo1+0xc8>;;
     _32(0x18000231),        //call 171a8 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _64(0x00000000f101b140),        //compw.eq $r0 = $r0, 5 (0x5);;
     _32(0x0c000080),        //cb.wnez $r0? 16910 <foo1+0xf0>;;
     _32(0x18000227),        //call 171a8 <abort>;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c001c00),        //cb.wnez $r0? 16adc <foo1+0x2bc>;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _64(0x00000000f501b080),        //compw.gt $r0 = $r0, 2 (0x2);;
     _32(0x0c001ac0),        //cb.wnez $r0? 16ad8 <foo1+0x2b8>;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x0c800180),        //cb.weqz $r0? 1694c <foo1+0x12c>;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000f00),        //cb.wnez $r0? 16a34 <foo1+0x214>;;
     _32(0x10000064),        //goto 16ad8 <foo1+0x2b8>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _64(0x00000000f001b240),        //compw.ne $r0 = $r0, 9 (0x9);;
     _32(0x0c000200),        //cb.wnez $r0? 1698c <foo1+0x16c>;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _64(0x00000000f101b240),        //compw.eq $r0 = $r0, 9 (0x9);;
     _32(0x0c000080),        //cb.wnez $r0? 16990 <foo1+0x170>;;
     _32(0x18000207),        //call 171a8 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040400),        //addd $r1 = $r0, 16 (0x10);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x28010c0c),        //sq 48 (0x30)[$r12] = $r0r1;;
     _32(0x61000c0c),        //addd $r0 = $r12, 48 (0x30);;
     _32(0x60080010),        //make $r2 = 16 (0x10);;
     _96(0x00000000800000fce0040800),        //make $r1 = 258080 (0x3f020);;
     _32(0x18000244),        //call 172c8 <memcmp>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 169c8 <foo1+0x1a8>;;
     _32(0x180001f9),        //call 171a8 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701120c),        //sd 72 (0x48)[$r12] = $r0;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _96(0x00000000800000fce0040800),        //make $r1 = 258080 (0x3f020);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 169f8 <foo1+0x1d8>;;
     _32(0x180001ed),        //call 171a8 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701100c),        //sd 64 (0x40)[$r12] = $r0;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x600100c0),        //compd.ne $r0 = $r0, 3 (0x3);;
     _32(0x080001c0),        //cb.dnez $r0? 16a30 <foo1+0x210>;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x61010100),        //compd.eq $r0 = $r0, 4 (0x4);;
     _32(0x08000b80),        //cb.dnez $r0? 16ae4 <foo1+0x2c4>;;
     _32(0x180001de),        //call 171a8 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701140c),        //sd 80 (0x50)[$r12] = $r0;;
     _32(0x3800140c),        //ld $r0 = 80 (0x50)[$r12];;
     _96(0x0202240080000000e0040000),        //make $r1 = 4630967054332067840 (0x4044800000000000);;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x08000200),        //cb.dnez $r0? 16a7c <foo1+0x25c>;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x3804140c),        //ld $r1 = 80 (0x50)[$r12];;
     _32(0x7a030001),        //fcompd.oeq $r0 = $r1, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16a80 <foo1+0x260>;;
     _32(0x180001cb),        //call 171a8 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _64(0x00000000f101b200),        //compw.eq $r0 = $r0, 8 (0x8);;
     _32(0x0c000080),        //cb.wnez $r0? 16aa8 <foo1+0x288>;;
     _32(0x180001c1),        //call 171a8 <abort>;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701120c),        //sd 72 (0x48)[$r12] = $r0;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _96(0x00000000800000fce0040400),        //make $r1 = 258064 (0x3f010);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x080001c0),        //cb.dnez $r0? 16aec <foo1+0x2cc>;;
     _32(0x180001b5),        //call 171a8 <abort>;;
     _32(0x180001b4),        //call 171a8 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000004),        //goto 16af0 <foo1+0x2d0>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000002),        //goto 16af0 <foo1+0x2d0>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let foo2: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x28091c0c),        //sq 112 (0x70)[$r12] = $r2r3;;
     _32(0x2811200c),        //sq 128 (0x80)[$r12] = $r4r5;;
     _32(0x2819240c),        //sq 144 (0x90)[$r12] = $r6r7;;
     _32(0x2821280c),        //sq 160 (0xa0)[$r12] = $r8r9;;
     _32(0x28292c0c),        //sq 176 (0xb0)[$r12] = $r10r11;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x61001c0c),        //addd $r0 = $r12, 112 (0x70);;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0d0002c0),        //cb.wltz $r0? 16b68 <foo2+0x60>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000000f501b4c0),        //compw.gt $r0 = $r0, 19 (0x13);;
     _32(0x0c0001c0),        //cb.wnez $r0? 16b68 <foo2+0x60>;;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x3400060c),        //lws $r0 = 24 (0x18)[$r12];;
     _32(0x2002e001),        //lbz $r0 = $r0[$r1];;
     _32(0x08800080),        //cb.deqz $r0? 16b6c <foo2+0x64>;;
     _32(0x18000190),        //call 171a8 <abort>;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x000000008000011be0002200),        //make $r0 = 289928 (0x46c88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a001000),        //orw $r0 = $r0, 64 (0x40);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x000000008000011be0042400),        //make $r1 = 289936 (0x46c90);;
     _32(0x3400060c),        //lws $r0 = 24 (0x18)[$r12];;
     _32(0x240be001),        //sb $r0[$r1] = $r2;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _64(0x00000000f101b280),        //compw.eq $r0 = $r0, 10 (0xa);;
     _32(0x0c000080),        //cb.wnez $r0? 16bd8 <foo2+0xd0>;;
     _32(0x18000175),        //call 171a8 <abort>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000000f101b300),        //compw.eq $r0 = $r0, 12 (0xc);;
     _32(0x0c000380),        //cb.wnez $r0? 16c1c <foo2+0x114>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000000f501b300),        //compw.gt $r0 = $r0, 12 (0xc);;
     _32(0x0c001400),        //cb.wnez $r0? 16d34 <foo2+0x22c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c001340),        //cb.wnez $r0? 16d38 <foo2+0x230>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000000f001b2c0),        //compw.ne $r0 = $r0, 11 (0xb);;
     _32(0x0c001200),        //cb.wnez $r0? 16d34 <foo2+0x22c>;;
     _32(0x1000004b),        //goto 16d44 <foo2+0x23c>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _96(0x0202240080000000e0040000),        //make $r1 = 4630967054332067840 (0x4044800000000000);;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x08000280),        //cb.dnez $r0? 16c6c <foo2+0x164>;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x0202200080000000e0040000),        //make $r1 = 4630826316843712512 (0x4044000000000000);;
     _32(0x7a030040),        //fcompd.oeq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16c70 <foo2+0x168>;;
     _32(0x1800014f),        //call 171a8 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x61040400),        //addd $r1 = $r0, 16 (0x10);;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x28010e0c),        //sq 56 (0x38)[$r12] = $r0r1;;
     _32(0x61000e0c),        //addd $r0 = $r12, 56 (0x38);;
     _32(0x60080010),        //make $r2 = 16 (0x10);;
     _96(0x00000000800000fce0040800),        //make $r1 = 258080 (0x3f020);;
     _32(0x1800018c),        //call 172c8 <memcmp>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16ca8 <foo2+0x1a0>;;
     _32(0x18000141),        //call 171a8 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x61040400),        //addd $r1 = $r0, 16 (0x10);;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x28010a0c),        //sq 40 (0x28)[$r12] = $r0r1;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x60080010),        //make $r2 = 16 (0x10);;
     _96(0x00000000800000fce0040800),        //make $r1 = 258080 (0x3f020);;
     _32(0x1800017e),        //call 172c8 <memcmp>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16ce0 <foo2+0x1d8>;;
     _32(0x18000133),        //call 171a8 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701140c),        //sd 80 (0x50)[$r12] = $r0;;
     _32(0x3800140c),        //ld $r0 = 80 (0x50)[$r12];;
     _96(0x00000000800000fce0040400),        //make $r1 = 258064 (0x3f010);;
     _32(0x7101a040),        //compd.eq $r0 = $r0, $r1;;
     _32(0x08000080),        //cb.dnez $r0? 16d10 <foo2+0x208>;;
     _32(0x18000127),        //call 171a8 <abort>;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701120c),        //sd 72 (0x48)[$r12] = $r0;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x61010400),        //compd.eq $r0 = $r0, 16 (0x10);;
     _32(0x08000140),        //cb.dnez $r0? 16d40 <foo2+0x238>;;
     _32(0x1800011e),        //call 171a8 <abort>;;
     _32(0x1800011d),        //call 171a8 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000002),        //goto 16d44 <foo2+0x23c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x71000200),        //addw $r0 = $r0, 8 (0x8);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000)        //ret ;;
 |];

let foo3: list_I = 
 [|
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741080c),        //sd 32 (0x20)[$r12] = $r16;;
     _32(0x2749060c),        //sd 24 (0x18)[$r12] = $r18;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x30480000),        //lwz $r18 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _32(0x6100004e),        //addd $r0 = $r14, 1 (0x1);;
     _96(0x00000000800000fce0040400),        //make $r1 = 258064 (0x3f010);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26010f0c),        //sw 60 (0x3c)[$r12] = $r0;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _64(0x00000000f501b240),        //compw.gt $r0 = $r0, 9 (0x9);;
     _32(0x0c000440),        //cb.wnez $r0? 16e30 <main+0xc8>;;
     _32(0x1fffffdc),        //call 16d60 <foo3>;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x6a1c000e),        //copyd $r7 = $r14;;
     _96(0x00000000800000fce0180800),        //make $r6 = 258080 (0x3f020);;
     _32(0x3c100000),        //lq $r4r5 = 0 (0x0)[$r0];;
     _32(0x7a0c0012),        //copyw $r3 = $r18;;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x1ffffe7f),        //call 16820 <foo1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x10000014),        //goto 16e7c <main+0x114>;;
     _32(0x1fffffcc),        //call 16d60 <foo3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000100),        //addw $r0 = $r0, 4 (0x4);;
     _32(0x781cffc0),        //zxwd $r7 = $r0;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x6a18000e),        //copyd $r6 = $r14;;
     _96(0x00000000800000fce0140800),        //make $r5 = 258080 (0x3f020);;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x6a100001),        //copyd $r4 = $r1;;
     _32(0x7a080012),        //copyw $r2 = $r18;;
     _32(0x7a040007),        //copyw $r1 = $r7;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x1fffff25),        //call 16b08 <foo2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16e8c <main+0x124>;;
     _32(0x180000c8),        //call 171a8 <abort>;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x01ff800080000000e0040000),        //make $r1 = 4607182418800017408 (0x3ff0000000000000);;
     _32(0x50027040),        //faddd $r0 = $r0, $r1;;
     _96(0x00000000800000fce0040c00),        //make $r1 = 258096 (0x3f030);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x38480000),        //ld $r18 = 0 (0x0)[$r0];;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _64(0x00000000f501b240),        //compw.gt $r0 = $r0, 9 (0x9);;
     _32(0x0c000300),        //cb.wnez $r0? 16f20 <main+0x1b8>;;
     _32(0x1fffff9b),        //call 16d60 <foo3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a140012),        //copyd $r5 = $r18;;
     _32(0x60100008),        //make $r4 = 8 (0x8);;
     _32(0x6a0c000e),        //copyd $r3 = $r14;;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x1ffffe43),        //call 16820 <foo1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1000000c),        //goto 16f4c <main+0x1e4>;;
     _32(0x1fffff90),        //call 16d60 <foo3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000100),        //addw $r0 = $r0, 4 (0x4);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a100012),        //copyd $r4 = $r18;;
     _32(0x600c0008),        //make $r3 = 8 (0x8);;
     _32(0x6a08000e),        //copyd $r2 = $r14;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x1ffffef1),        //call 16b08 <foo2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16f64 <main+0x1fc>;;
     _32(0x18000092),        //call 171a8 <abort>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x26010d0c),        //sw 52 (0x34)[$r12] = $r0;;
     _32(0x30000d0c),        //lwz $r0 = 52 (0x34)[$r12];;
     _64(0x00000000f501b240),        //compw.gt $r0 = $r0, 9 (0x9);;
     _32(0x0c000240),        //cb.wnez $r0? 16f9c <main+0x234>;;
     _32(0x1fffff79),        //call 16d60 <foo3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _32(0x30000d0c),        //lwz $r0 = 52 (0x34)[$r12];;
     _32(0x1ffffe24),        //call 16820 <foo1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x10000009),        //goto 16fbc <main+0x254>;;
     _32(0x1fffff71),        //call 16d60 <foo3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000100),        //addw $r0 = $r0, 4 (0x4);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _32(0x30000d0c),        //lwz $r0 = 52 (0x34)[$r12];;
     _32(0x1ffffed5),        //call 16b08 <foo2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 16fd4 <main+0x26c>;;
     _32(0x18000076),        //call 171a8 <abort>;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000080),        //addw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _64(0x00000000f501b240),        //compw.gt $r0 = $r0, 9 (0x9);;
     _32(0x0c000240),        //cb.wnez $r0? 17020 <main+0x2b8>;;
     _32(0x1fffff58),        //call 16d60 <foo3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x1ffffe03),        //call 16820 <foo1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x10000009),        //goto 17040 <main+0x2d8>;;
     _32(0x1fffff50),        //call 16d60 <foo3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000100),        //addw $r0 = $r0, 4 (0x4);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x1ffffeb4),        //call 16b08 <foo2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b4c0),        //compw.eq $r0 = $r0, 19 (0x13);;
     _32(0x0c000080),        //cb.wnez $r0? 17058 <main+0x2f0>;;
     _32(0x18000055),        //call 171a8 <abort>;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _96(0x01ff800080000000e0000000),        //make $r0 = 4607182418800017408 (0x3ff0000000000000);;
     _32(0x54027380),        //fsbfd $r0 = $r0, $r14;;
     _96(0x00000000800000fce0040c00),        //make $r1 = 258096 (0x3f030);;
     _32(0x27010001),        //sd 0 (0x0)[$r1] = $r0;;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x38480000),        //ld $r18 = 0 (0x0)[$r0];;
     _32(0x7a000002),        //copyw $r0 = $r2;;
     _32(0x26010b0c),        //sw 44 (0x2c)[$r12] = $r0;;
     _32(0x30000b0c),        //lwz $r0 = 44 (0x2c)[$r12];;
     _64(0x00000000f501b240),        //compw.gt $r0 = $r0, 9 (0x9);;
     _32(0x0c000500),        //cb.wnez $r0? 17114 <main+0x3ac>;;
     _32(0x1fffff26),        //call 16d60 <foo3>;;
     _32(0x7828ffc0),        //zxwd $r10 = $r0;;
     _96(0x00000000800000fce0040800),        //make $r1 = 258080 (0x3f020);;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x60240010),        //make $r9 = 16 (0x10);;
     _32(0x6a200012),        //copyd $r8 = $r18;;
     _32(0x3c180001),        //lq $r6r7 = 0 (0x0)[$r1];;
     _32(0x3c100000),        //lq $r4r5 = 0 (0x0)[$r0];;
     _32(0x6a0c000e),        //copyd $r3 = $r14;;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x7a04000a),        //copyw $r1 = $r10;;
     _32(0x30000b0c),        //lwz $r0 = 44 (0x2c)[$r12];;
     _32(0x1ffffdc6),        //call 16820 <foo1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x10000018),        //goto 17170 <main+0x408>;;
     _32(0x1fffff13),        //call 16d60 <foo3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000100),        //addw $r0 = $r0, 4 (0x4);;
     _32(0x7824ffc0),        //zxwd $r9 = $r0;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _96(0x00000000800000fce0080800),        //make $r2 = 258080 (0x3f020);;
     _32(0x60200010),        //make $r8 = 16 (0x10);;
     _32(0x6a1c0012),        //copyd $r7 = $r18;;
     _32(0x3c000000),        //lq $r0r1 = 0 (0x0)[$r0];;
     _32(0x6a140000),        //copyd $r5 = $r0;;
     _32(0x6a180001),        //copyd $r6 = $r1;;
     _32(0x3c000002),        //lq $r0r1 = 0 (0x0)[$r2];;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x6a100001),        //copyd $r4 = $r1;;
     _32(0x6a08000e),        //copyd $r2 = $r14;;
     _32(0x7a040009),        //copyw $r1 = $r9;;
     _32(0x30000b0c),        //lwz $r0 = 44 (0x2c)[$r12];;
     _32(0x1ffffe68),        //call 16b08 <foo2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b500),        //compw.eq $r0 = $r0, 20 (0x14);;
     _32(0x0c000080),        //cb.wnez $r0? 17188 <main+0x420>;;
     _32(0x18000009),        //call 171a8 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3840080c),        //ld $r16 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3848060c),        //ld $r18 = 24 (0x18)[$r12];;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000115),        //call 17608 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007df),        //call 19138 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110110101101000; //0x16d68
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo1, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo2, 0b00010110101100001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo3, 0b00010110110101100000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110110101101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111000110101000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016d68;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, rcount, wcount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, rcount, wcount, adr_end_main);
print_list_data(mD);
}
