// executing pipeline 20040705_2.c.out.dumped test 
val k1_pipeline_20040705_2: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_20040705_2() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let ret1: list_I = 
 [|
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0fd00000)        //ret ;;
 |];

let ret2: list_I = 
 [|
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0fd00000)        //ret ;;
 |];

let ret3: list_I = 
 [|
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0fd00000)        //ret ;;
 |];

let ret4: list_I = 
 [|
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0fd00000)        //ret ;;
 |];

let ret5: list_I = 
 [|
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0fd00000)        //ret ;;
 |];

let ret6: list_I = 
 [|
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let ret7: list_I = 
 [|
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0fd00000)        //ret ;;
 |];

let ret8: list_I = 
 [|
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0fd00000)        //ret ;;
 |];

let ret9: list_I = 
 [|
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x0fd00000)        //ret ;;
 |];

let fn1_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x71011040),        //addw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28040000),        //lhz $r1 = 0 (0x0)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20040080),        //lbz $r1 = 2 (0x2)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200400c0),        //lbz $r1 = 3 (0x3)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn7_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn7_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28040000),        //lhz $r1 = 0 (0x0)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20040080),        //lbz $r1 = 2 (0x2)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200400c0),        //lbz $r1 = 3 (0x3)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000fc0),        //addw $r0 = $r0, 63 (0x3f);;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f100ffc0),        //addw $r0 = $r0, 2047 (0x7ff);;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn3_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff100ffc0),        //addw $r0 = $r0, 32767 (0x7fff);;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn4_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x710007c0),        //addw $r0 = $r0, 31 (0x1f);;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff100ffc0),        //addw $r0 = $r0, 67108863 (0x3ffffff);;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000fc0),        //addw $r0 = $r0, 63 (0x3f);;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f100ffc0),        //addw $r0 = $r0, 2047 (0x7ff);;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn3_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff100ffc0),        //addw $r0 = $r0, 32767 (0x7fff);;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn4_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x710007c0),        //addw $r0 = $r0, 31 (0x1f);;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff100ffc0),        //addw $r0 = $r0, 67108863 (0x3ffffff);;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78011001),        //andw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x78011001),        //andw $r0 = $r1, $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x78011001),        //andw $r0 = $r1, $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78011001),        //andw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78011001),        //andw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78011040),        //andw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28040000),        //lhz $r1 = 0 (0x0)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x78011001),        //andw $r0 = $r1, $r0;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20040080),        //lbz $r1 = 2 (0x2)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78011001),        //andw $r0 = $r1, $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200400c0),        //lbz $r1 = 3 (0x3)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78011001),        //andw $r0 = $r1, $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7a011040),        //orw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28040000),        //lhz $r1 = 0 (0x0)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20040080),        //lbz $r1 = 2 (0x2)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200400c0),        //lbz $r1 = 3 (0x3)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7c011040),        //xorw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28040000),        //lhz $r1 = 0 (0x0)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20040080),        //lbz $r1 = 2 (0x2)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_9: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200400c0),        //lbz $r1 = 3 (0x3)[$r0];;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7c011001),        //xorw $r0 = $r1, $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_a: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x18001474),        //call 1d5d0 <__udivdi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn2_a: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x18001458),        //call 1d5d0 <__udivdi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn3_a: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x1800143c),        //call 1d5d0 <__udivdi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn4_a: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x18001420),        //call 1d5d0 <__udivdi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn5_a: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x18001404),        //call 1d5d0 <__udivdi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn6_a: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x6a000002),        //copyd $r0 = $r2;;
     _32(0x180013e6),        //call 1d5d0 <__udivdi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_a: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x180013cc),        //call 1d5d0 <__udivdi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn8_a: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x180013b6),        //call 1d5d0 <__udivdi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn9_a: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x180013a0),        //call 1d5d0 <__udivdi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn1_b: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x180013aa),        //call 1d658 <__umoddi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn2_b: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x1800138e),        //call 1d658 <__umoddi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn3_b: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x18001372),        //call 1d658 <__umoddi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn4_b: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x18001356),        //call 1d658 <__umoddi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn5_b: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x1800133a),        //call 1d658 <__umoddi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn6_b: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x6a000002),        //copyd $r0 = $r2;;
     _32(0x1800131c),        //call 1d658 <__umoddi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_b: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x18001302),        //call 1d658 <__umoddi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn8_b: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x180012ec),        //call 1d658 <__umoddi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn9_b: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x180012d6),        //call 1d658 <__umoddi3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn1_c: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn2_c: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn3_c: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn4_c: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn5_c: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn6_c: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn7_c: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_c: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_c: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x710000c0),        //addw $r0 = $r0, 3 (0x3);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_d: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7100fe40),        //addw $r0 = $r0, -7 (0xfffffff9);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn2_d: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7100fe40),        //addw $r0 = $r0, -7 (0xfffffff9);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn3_d: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7100fe40),        //addw $r0 = $r0, -7 (0xfffffff9);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn4_d: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7100fe40),        //addw $r0 = $r0, -7 (0xfffffff9);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn5_d: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7100fe40),        //addw $r0 = $r0, -7 (0xfffffff9);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn6_d: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7100fe40),        //addw $r0 = $r0, -7 (0xfffffff9);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn7_d: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7100fe40),        //addw $r0 = $r0, -7 (0xfffffff9);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_d: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x7100fe40),        //addw $r0 = $r0, -7 (0xfffffff9);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_d: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x7100fe40),        //addw $r0 = $r0, -7 (0xfffffff9);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_e: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000540),        //andw $r0 = $r0, 21 (0x15);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn2_e: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x78000540),        //andw $r0 = $r0, 21 (0x15);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_e: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x78000540),        //andw $r0 = $r0, 21 (0x15);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_e: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000540),        //andw $r0 = $r0, 21 (0x15);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn5_e: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn6_e: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000540),        //andw $r0 = $r0, 21 (0x15);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn7_e: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x78000540),        //andw $r0 = $r0, 21 (0x15);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_e: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x78000540),        //andw $r0 = $r0, 21 (0x15);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_e: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x78000540),        //andw $r0 = $r0, 21 (0x15);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a0004c0),        //orw $r0 = $r0, 19 (0x13);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn2_f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7a0004c0),        //orw $r0 = $r0, 19 (0x13);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7a0004c0),        //orw $r0 = $r0, 19 (0x13);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a0004c0),        //orw $r0 = $r0, 19 (0x13);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn5_f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a0004c0),        //orw $r0 = $r0, 19 (0x13);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a0004c0),        //orw $r0 = $r0, 19 (0x13);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn7_f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7a0004c0),        //orw $r0 = $r0, 19 (0x13);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x7a0004c0),        //orw $r0 = $r0, 19 (0x13);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x7a0004c0),        //orw $r0 = $r0, 19 (0x13);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_g: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7c000940),        //xorw $r0 = $r0, 37 (0x25);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn2_g: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7c000940),        //xorw $r0 = $r0, 37 (0x25);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_g: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7c000940),        //xorw $r0 = $r0, 37 (0x25);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_g: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7c000940),        //xorw $r0 = $r0, 37 (0x25);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_g: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7c000940),        //xorw $r0 = $r0, 37 (0x25);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_g: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c000940),        //xorw $r0 = $r0, 37 (0x25);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn7_g: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x7c000940),        //xorw $r0 = $r0, 37 (0x25);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn8_g: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _32(0x7c000940),        //xorw $r0 = $r0, 37 (0x25);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn9_g: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _32(0x7c000940),        //xorw $r0 = $r0, 37 (0x25);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn1_h: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x001e1e1ee0041e40),        //make $r1 = 2021161081 (0x78787879);;
     _32(0x58043040),        //mulwd $r1 = $r0, $r1;;
     _32(0x7b062801),        //srld $r1 = $r1, 32 (0x20);;
     _32(0x7a0630c1),        //sraw $r1 = $r1, 3 (0x3);;
     _32(0x7a0237c0),        //sraw $r0 = $r0, 31 (0x1f);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn2_h: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x001e1e1ee0041e40),        //make $r1 = 2021161081 (0x78787879);;
     _32(0x58043040),        //mulwd $r1 = $r0, $r1;;
     _32(0x7b062801),        //srld $r1 = $r1, 32 (0x20);;
     _32(0x7a0630c1),        //sraw $r1 = $r1, 3 (0x3);;
     _32(0x7a0237c0),        //sraw $r0 = $r0, 31 (0x1f);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn3_h: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x001e1e1ee0041e40),        //make $r1 = 2021161081 (0x78787879);;
     _32(0x58043040),        //mulwd $r1 = $r0, $r1;;
     _32(0x7b062801),        //srld $r1 = $r1, 32 (0x20);;
     _32(0x7a0630c1),        //sraw $r1 = $r1, 3 (0x3);;
     _32(0x7a0237c0),        //sraw $r0 = $r0, 31 (0x1f);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn4_h: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x001e1e1ee0041e40),        //make $r1 = 2021161081 (0x78787879);;
     _32(0x58043040),        //mulwd $r1 = $r0, $r1;;
     _32(0x7b062801),        //srld $r1 = $r1, 32 (0x20);;
     _32(0x7a0630c1),        //sraw $r1 = $r1, 3 (0x3);;
     _32(0x7a0237c0),        //sraw $r0 = $r0, 31 (0x1f);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn5_h: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x001e1e1ee0041e40),        //make $r1 = 2021161081 (0x78787879);;
     _32(0x58043040),        //mulwd $r1 = $r0, $r1;;
     _32(0x7b062801),        //srld $r1 = $r1, 32 (0x20);;
     _32(0x7a0630c1),        //sraw $r1 = $r1, 3 (0x3);;
     _32(0x7a0237c0),        //sraw $r0 = $r0, 31 (0x1f);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn6_h: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x001e1e1ee0041e40),        //make $r1 = 2021161081 (0x78787879);;
     _32(0x58043040),        //mulwd $r1 = $r0, $r1;;
     _32(0x7b062801),        //srld $r1 = $r1, 32 (0x20);;
     _32(0x7a0630c1),        //sraw $r1 = $r1, 3 (0x3);;
     _32(0x7a0237c0),        //sraw $r0 = $r0, 31 (0x1f);;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn7_h: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _96(0x07878787843c3c3ce0043c40),        //make $r1 = 17361641481138401521 (0xf0f0f0f0f0f0f0f1);;
     _32(0x59041040),        //muludt $r0r1 = $r0, $r1;;
     _32(0x6a000001),        //copyd $r0 = $r1;;
     _32(0x7b022100),        //srld $r0 = $r0, 4 (0x4);;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn8_h: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20000080),        //lbz $r0 = 2 (0x2)[$r0];;
     _96(0x07878787843c3c3ce0043c40),        //make $r1 = 17361641481138401521 (0xf0f0f0f0f0f0f0f1);;
     _32(0x59041040),        //muludt $r0r1 = $r0, $r1;;
     _32(0x6a000001),        //copyd $r0 = $r1;;
     _32(0x7b022100),        //srld $r0 = $r0, 4 (0x4);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn9_h: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200000c0),        //lbz $r0 = 3 (0x3)[$r0];;
     _96(0x07878787843c3c3ce0043c40),        //make $r1 = 17361641481138401521 (0xf0f0f0f0f0f0f0f1);;
     _32(0x59041040),        //muludt $r0r1 = $r0, $r1;;
     _32(0x6a000001),        //copyd $r0 = $r1;;
     _32(0x7b022100),        //srld $r0 = $r0, 4 (0x4);;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn1_i: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035000),        //extfz $r0 = $r0, 5 (0x5), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _64(0x001af286e000bcc0),        //make $r0 = 1808407283 (0x6bca1af3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a0a30c0),        //sraw $r2 = $r0, 3 (0x3);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x75091080),        //sbfw $r2 = $r0, $r2;;
     _32(0x7a000002),        //copyw $r0 = $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x71011080),        //addw $r0 = $r0, $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x75011002),        //sbfw $r0 = $r2, $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000fc0),        //andw $r0 = $r0, 63 (0x3f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn2_i: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x65030180),        //extfz $r0 = $r0, 16 (0x10), 6 (0x6);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _64(0x001af286e000bcc0),        //make $r0 = 1808407283 (0x6bca1af3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a0a30c0),        //sraw $r2 = $r0, 3 (0x3);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x75091080),        //sbfw $r2 = $r0, $r2;;
     _32(0x7a000002),        //copyw $r0 = $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x71011080),        //addw $r0 = $r0, $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x75011002),        //sbfw $r0 = $r2, $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f800ffc0),        //andw $r0 = $r0, 2047 (0x7ff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn3_i: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002200),        //make $r0 = 314504 (0x4cc88);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f440),        //extfz $r0 = $r0, 31 (0x1f), 17 (0x11);;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _64(0x001af286e000bcc0),        //make $r0 = 1808407283 (0x6bca1af3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a0a30c0),        //sraw $r2 = $r0, 3 (0x3);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x75091080),        //sbfw $r2 = $r0, $r2;;
     _32(0x7a000002),        //copyw $r0 = $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x71011080),        //addw $r0 = $r0, $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x75011002),        //sbfw $r0 = $r2, $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001ff800ffc0),        //andw $r0 = $r0, 32767 (0x7fff);;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn4_i: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64034000),        //extfz $r0 = $r0, 4 (0x4), 0 (0x0);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _64(0x001af286e000bcc0),        //make $r0 = 1808407283 (0x6bca1af3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a0a30c0),        //sraw $r2 = $r0, 3 (0x3);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x75091080),        //sbfw $r2 = $r0, $r2;;
     _32(0x7a000002),        //copyw $r0 = $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x71011080),        //addw $r0 = $r0, $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x75011002),        //sbfw $r0 = $r2, $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x780007c0),        //andw $r0 = $r0, 31 (0x1f);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn5_i: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x64035140),        //extfz $r0 = $r0, 5 (0x5), 5 (0x5);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _64(0x001af286e000bcc0),        //make $r0 = 1808407283 (0x6bca1af3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a0a30c0),        //sraw $r2 = $r0, 3 (0x3);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x75091080),        //sbfw $r2 = $r0, $r2;;
     _32(0x7a000002),        //copyw $r0 = $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x71011080),        //addw $r0 = $r0, $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x75011002),        //sbfw $r0 = $r2, $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fn6_i: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002600),        //make $r0 = 314520 (0x4cc98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x6503f180),        //extfz $r0 = $r0, 31 (0x1f), 6 (0x6);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a040000),        //copyw $r1 = $r0;;
     _64(0x001af286e000bcc0),        //make $r0 = 1808407283 (0x6bca1af3);;
     _32(0x58003001),        //mulwd $r0 = $r1, $r0;;
     _32(0x7b022800),        //srld $r0 = $r0, 32 (0x20);;
     _32(0x7a0a30c0),        //sraw $r2 = $r0, 3 (0x3);;
     _32(0x7a0237c1),        //sraw $r0 = $r1, 31 (0x1f);;
     _32(0x75091080),        //sbfw $r2 = $r0, $r2;;
     _32(0x7a000002),        //copyw $r0 = $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x71011080),        //addw $r0 = $r0, $r2;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x75011002),        //sbfw $r0 = $r2, $r0;;
     _32(0x75011040),        //sbfw $r0 = $r0, $r1;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000fffff800ffc0),        //andw $r0 = $r0, 67108863 (0x3ffffff);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn7_i: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x28080000),        //lhz $r2 = 0 (0x0)[$r0];;
     _96(0x06bca1af81435e50e000d7c0),        //make $r0 = 15534100272597517151 (0xd79435e50d79435f);;
     _32(0x59041002),        //muludt $r0r1 = $r2, $r0;;
     _32(0x6a000001),        //copyd $r0 = $r1;;
     _32(0x7b062100),        //srld $r1 = $r0, 4 (0x4);;
     _32(0x6a000001),        //copyd $r0 = $r1;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010040),        //addd $r0 = $r0, $r1;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x75010001),        //sbfd $r0 = $r1, $r0;;
     _32(0x75010080),        //sbfd $r0 = $r0, $r2;;
     _32(0x6407f000),        //zxhd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn8_i: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x20080080),        //lbz $r2 = 2 (0x2)[$r0];;
     _96(0x06bca1af81435e50e000d7c0),        //make $r0 = 15534100272597517151 (0xd79435e50d79435f);;
     _32(0x59041002),        //muludt $r0r1 = $r2, $r0;;
     _32(0x6a000001),        //copyd $r0 = $r1;;
     _32(0x7b062100),        //srld $r1 = $r0, 4 (0x4);;
     _32(0x6a000001),        //copyd $r0 = $r1;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010040),        //addd $r0 = $r0, $r1;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x75010001),        //sbfd $r0 = $r1, $r0;;
     _32(0x75010080),        //sbfd $r0 = $r0, $r2;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fn9_i: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x200800c0),        //lbz $r2 = 3 (0x3)[$r0];;
     _96(0x06bca1af81435e50e000d7c0),        //make $r0 = 15534100272597517151 (0xd79435e50d79435f);;
     _32(0x59041002),        //muludt $r0r1 = $r2, $r0;;
     _32(0x6a000001),        //copyd $r0 = $r1;;
     _32(0x7b062100),        //srld $r1 = $r0, 4 (0x4);;
     _32(0x6a000001),        //copyd $r0 = $r1;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010040),        //addd $r0 = $r0, $r1;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x75010001),        //sbfd $r0 = $r1, $r0;;
     _32(0x75010080),        //sbfd $r0 = $r0, $r2;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1c8),        //call 16928 <fn1_1>;;
     _32(0x1ffff185),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b580),        //compw.eq $r0 = $r0, 54 (0x36);;
     _32(0x0c000080),        //cb.wnez $r0? 1a224 <main+0x114>;;
     _32(0x18000d96),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1d1),        //call 16988 <fn2_1>;;
     _32(0x1ffff17e),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000001bf101b5c0),        //compw.eq $r0 = $r0, 887 (0x377);;
     _32(0x0c000080),        //cb.wnez $r0? 1a260 <main+0x150>;;
     _32(0x18000d87),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1dc),        //call 169f0 <fn3_1>;;
     _32(0x1ffff177),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000170f101b340),        //compw.eq $r0 = $r0, 11789 (0x2e0d);;
     _32(0x0c000080),        //cb.wnez $r0? 1a29c <main+0x18c>;;
     _32(0x18000d78),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff1e7),        //call 16a58 <fn4_1>;;
     _32(0x1ffff170),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b340),        //compw.eq $r0 = $r0, 13 (0xd);;
     _32(0x0c000080),        //cb.wnez $r0? 1a2d8 <main+0x1c8>;;
     _32(0x18000d69),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff1f0),        //call 16ab8 <fn5_1>;;
     _32(0x1ffff169),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1a30c <main+0x1fc>;;
     _32(0x18000d5c),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff1fa),        //call 16b18 <fn6_1>;;
     _32(0x1ffff163),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0010203ef101b5c0),        //compw.eq $r0 = $r0, 33818583 (0x20407d7);;
     _32(0x0c000080),        //cb.wnez $r0? 1a34c <main+0x23c>;;
     _32(0x18000d4c),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff202),        //call 16b78 <fn7_1>;;
     _32(0x1ffff15b),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000035cf101b140),        //compw.eq $r0 = $r0, 27525 (0x6b85);;
     _32(0x0c000080),        //cb.wnez $r0? 1a38c <main+0x27c>;;
     _32(0x18000d3c),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff207),        //call 16bc0 <fn8_1>;;
     _32(0x1ffff154),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b340),        //compw.eq $r0 = $r0, 173 (0xad);;
     _32(0x0c000080),        //cb.wnez $r0? 1a3c0 <main+0x2b0>;;
     _32(0x18000d2f),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff20c),        //call 16c08 <fn9_1>;;
     _32(0x1ffff14d),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b080),        //compw.eq $r0 = $r0, 130 (0x82);;
     _32(0x0c000080),        //cb.wnez $r0? 1a3f4 <main+0x2e4>;;
     _32(0x18000d22),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1d7),        //call 16c50 <fn1_2>;;
     _32(0x1ffff0ca),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b500),        //compw.eq $r0 = $r0, 52 (0x34);;
     _32(0x0c000080),        //cb.wnez $r0? 1a510 <main+0x400>;;
     _32(0x18000cdb),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1dc),        //call 16ca0 <fn2_2>;;
     _32(0x1ffff0c3),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000013f101b740),        //compw.eq $r0 = $r0, 637 (0x27d);;
     _32(0x0c000080),        //cb.wnez $r0? 1a54c <main+0x43c>;;
     _32(0x18000ccc),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1e3),        //call 16cf8 <fn3_2>;;
     _32(0x1ffff0bc),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003d1f101b3c0),        //compw.eq $r0 = $r0, 31279 (0x7a2f);;
     _32(0x0c000080),        //cb.wnez $r0? 1a588 <main+0x478>;;
     _32(0x18000cbd),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff1ea),        //call 16d50 <fn4_2>;;
     _32(0x1ffff0b5),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b580),        //compw.eq $r0 = $r0, 22 (0x16);;
     _32(0x0c000080),        //cb.wnez $r0? 1a5c4 <main+0x4b4>;;
     _32(0x18000cae),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff1ef),        //call 16da0 <fn5_2>;;
     _32(0x1ffff0ae),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1a5f8 <main+0x4e8>;;
     _32(0x18000ca1),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff1f5),        //call 16df0 <fn6_2>;;
     _32(0x1ffff0a8),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00100000f101b040),        //compw.eq $r0 = $r0, 33554433 (0x2000001);;
     _32(0x0c000080),        //cb.wnez $r0? 1a638 <main+0x528>;;
     _32(0x18000c91),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff1fb),        //call 16e48 <fn7_2>;;
     _32(0x1ffff0a0),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000345f101b740),        //compw.eq $r0 = $r0, 26813 (0x68bd);;
     _32(0x0c000080),        //cb.wnez $r0? 1a678 <main+0x568>;;
     _32(0x18000c81),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff1fe),        //call 16e88 <fn8_2>;;
     _32(0x1ffff099),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b740),        //compw.eq $r0 = $r0, 157 (0x9d);;
     _32(0x0c000080),        //cb.wnez $r0? 1a6ac <main+0x59c>;;
     _32(0x18000c74),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff201),        //call 16ec8 <fn9_2>;;
     _32(0x1ffff092),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b700),        //compw.eq $r0 = $r0, 188 (0xbc);;
     _32(0x0c000080),        //cb.wnez $r0? 1a6e0 <main+0x5d0>;;
     _32(0x18000c67),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1ca),        //call 16f08 <fn1_3>;;
     _32(0x1ffff00f),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b500),        //compw.eq $r0 = $r0, 52 (0x34);;
     _32(0x0c000080),        //cb.wnez $r0? 1a7fc <main+0x6ec>;;
     _32(0x18000c20),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1cf),        //call 16f58 <fn2_3>;;
     _32(0x1ffff008),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000013f101b740),        //compw.eq $r0 = $r0, 637 (0x27d);;
     _32(0x0c000080),        //cb.wnez $r0? 1a838 <main+0x728>;;
     _32(0x18000c11),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1d6),        //call 16fb0 <fn3_3>;;
     _32(0x1ffff001),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003d1f101b3c0),        //compw.eq $r0 = $r0, 31279 (0x7a2f);;
     _32(0x0c000080),        //cb.wnez $r0? 1a874 <main+0x764>;;
     _32(0x18000c02),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff1dd),        //call 17008 <fn4_3>;;
     _32(0x1fffeffa),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b580),        //compw.eq $r0 = $r0, 22 (0x16);;
     _32(0x0c000080),        //cb.wnez $r0? 1a8b0 <main+0x7a0>;;
     _32(0x18000bf3),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff1e2),        //call 17058 <fn5_3>;;
     _32(0x1fffeff3),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1a8e4 <main+0x7d4>;;
     _32(0x18000be6),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff1e8),        //call 170a8 <fn6_3>;;
     _32(0x1fffefed),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00100000f101b040),        //compw.eq $r0 = $r0, 33554433 (0x2000001);;
     _32(0x0c000080),        //cb.wnez $r0? 1a924 <main+0x814>;;
     _32(0x18000bd6),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff1ee),        //call 17100 <fn7_3>;;
     _32(0x1fffefe5),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000345f101b740),        //compw.eq $r0 = $r0, 26813 (0x68bd);;
     _32(0x0c000080),        //cb.wnez $r0? 1a964 <main+0x854>;;
     _32(0x18000bc6),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff1f1),        //call 17140 <fn8_3>;;
     _32(0x1fffefde),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b740),        //compw.eq $r0 = $r0, 157 (0x9d);;
     _32(0x0c000080),        //cb.wnez $r0? 1a998 <main+0x888>;;
     _32(0x18000bb9),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff1f4),        //call 17180 <fn9_3>;;
     _32(0x1fffefd7),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b700),        //compw.eq $r0 = $r0, 188 (0xbc);;
     _32(0x0c000080),        //cb.wnez $r0? 1a9cc <main+0x8bc>;;
     _32(0x18000bac),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1bd),        //call 171c0 <fn1_4>;;
     _32(0x1fffef54),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b400),        //compw.eq $r0 = $r0, 48 (0x30);;
     _32(0x0c000080),        //cb.wnez $r0? 1aae8 <main+0x9d8>;;
     _32(0x18000b65),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1c6),        //call 17220 <fn2_4>;;
     _32(0x1fffef4d),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000000cf101b040),        //compw.eq $r0 = $r0, 385 (0x181);;
     _32(0x0c000080),        //cb.wnez $r0? 1ab24 <main+0xa14>;;
     _32(0x18000b56),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1d1),        //call 17288 <fn3_4>;;
     _32(0x1fffef46),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000232f101b3c0),        //compw.eq $r0 = $r0, 17999 (0x464f);;
     _32(0x0c000080),        //cb.wnez $r0? 1ab60 <main+0xa50>;;
     _32(0x18000b47),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff1dc),        //call 172f0 <fn4_4>;;
     _32(0x1fffef3f),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b740),        //compw.eq $r0 = $r0, 29 (0x1d);;
     _32(0x0c000080),        //cb.wnez $r0? 1ab9c <main+0xa8c>;;
     _32(0x18000b38),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff1e5),        //call 17350 <fn5_4>;;
     _32(0x1fffef38),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1abd0 <main+0xac0>;;
     _32(0x18000b2b),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff1ef),        //call 173b0 <fn6_4>;;
     _32(0x1fffef32),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000fdfc1f101b240),        //compw.eq $r0 = $r0, 33290281 (0x1fbf829);;
     _32(0x0c000080),        //cb.wnez $r0? 1ac10 <main+0xb00>;;
     _32(0x18000b1b),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff1f7),        //call 17410 <fn7_4>;;
     _32(0x1fffef2a),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000032ff101b4c0),        //compw.eq $r0 = $r0, 26099 (0x65f3);;
     _32(0x0c000080),        //cb.wnez $r0? 1ac50 <main+0xb40>;;
     _32(0x18000b0b),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff1fc),        //call 17458 <fn8_4>;;
     _32(0x1fffef23),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b2c0),        //compw.eq $r0 = $r0, 139 (0x8b);;
     _32(0x0c000080),        //cb.wnez $r0? 1ac84 <main+0xb74>;;
     _32(0x18000afe),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff201),        //call 174a0 <fn9_4>;;
     _32(0x1fffef1c),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000007f101b500),        //compw.eq $r0 = $r0, 244 (0xf4);;
     _32(0x0c000080),        //cb.wnez $r0? 1acb8 <main+0xba8>;;
     _32(0x18000af1),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1cc),        //call 174e8 <fn1_5>;;
     _32(0x1fffee99),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b480),        //compw.eq $r0 = $r0, 50 (0x32);;
     _32(0x0c000080),        //cb.wnez $r0? 1add4 <main+0xcc4>;;
     _32(0x18000aaa),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1d1),        //call 17538 <fn2_5>;;
     _32(0x1fffee92),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000013f101b6c0),        //compw.eq $r0 = $r0, 635 (0x27b);;
     _32(0x0c000080),        //cb.wnez $r0? 1ae10 <main+0xd00>;;
     _32(0x18000a9b),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1d8),        //call 17590 <fn3_5>;;
     _32(0x1fffee8b),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003d1f101b340),        //compw.eq $r0 = $r0, 31277 (0x7a2d);;
     _32(0x0c000080),        //cb.wnez $r0? 1ae4c <main+0xd3c>;;
     _32(0x18000a8c),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff1df),        //call 175e8 <fn4_5>;;
     _32(0x1fffee84),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b500),        //compw.eq $r0 = $r0, 20 (0x14);;
     _32(0x0c000080),        //cb.wnez $r0? 1ae88 <main+0xd78>;;
     _32(0x18000a7d),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff1e4),        //call 17638 <fn5_5>;;
     _32(0x1fffee7d),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1aebc <main+0xdac>;;
     _32(0x18000a70),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff1ea),        //call 17688 <fn6_5>;;
     _32(0x1fffee77),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000ffffff101b7c0),        //compw.eq $r0 = $r0, 33554431 (0x1ffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 1aefc <main+0xdec>;;
     _32(0x18000a60),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff1f0),        //call 176e0 <fn7_5>;;
     _32(0x1fffee6f),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000345f101b6c0),        //compw.eq $r0 = $r0, 26811 (0x68bb);;
     _32(0x0c000080),        //cb.wnez $r0? 1af3c <main+0xe2c>;;
     _32(0x18000a50),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff1f3),        //call 17720 <fn8_5>;;
     _32(0x1fffee68),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b6c0),        //compw.eq $r0 = $r0, 155 (0x9b);;
     _32(0x0c000080),        //cb.wnez $r0? 1af70 <main+0xe60>;;
     _32(0x18000a43),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff1f6),        //call 17760 <fn9_5>;;
     _32(0x1fffee61),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b680),        //compw.eq $r0 = $r0, 186 (0xba);;
     _32(0x0c000080),        //cb.wnez $r0? 1afa4 <main+0xe94>;;
     _32(0x18000a36),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1bf),        //call 177a0 <fn1_6>;;
     _32(0x1fffedde),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b480),        //compw.eq $r0 = $r0, 50 (0x32);;
     _32(0x0c000080),        //cb.wnez $r0? 1b0c0 <main+0xfb0>;;
     _32(0x180009ef),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1c4),        //call 177f0 <fn2_6>;;
     _32(0x1fffedd7),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000013f101b6c0),        //compw.eq $r0 = $r0, 635 (0x27b);;
     _32(0x0c000080),        //cb.wnez $r0? 1b0fc <main+0xfec>;;
     _32(0x180009e0),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1cb),        //call 17848 <fn3_6>;;
     _32(0x1fffedd0),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003d1f101b340),        //compw.eq $r0 = $r0, 31277 (0x7a2d);;
     _32(0x0c000080),        //cb.wnez $r0? 1b138 <main+0x1028>;;
     _32(0x180009d1),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff1d2),        //call 178a0 <fn4_6>;;
     _32(0x1fffedc9),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b500),        //compw.eq $r0 = $r0, 20 (0x14);;
     _32(0x0c000080),        //cb.wnez $r0? 1b174 <main+0x1064>;;
     _32(0x180009c2),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff1d7),        //call 178f0 <fn5_6>;;
     _32(0x1fffedc2),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1b1a8 <main+0x1098>;;
     _32(0x180009b5),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff1dd),        //call 17940 <fn6_6>;;
     _32(0x1fffedbc),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000ffffff101b7c0),        //compw.eq $r0 = $r0, 33554431 (0x1ffffff);;
     _32(0x0c000080),        //cb.wnez $r0? 1b1e8 <main+0x10d8>;;
     _32(0x180009a5),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff1e3),        //call 17998 <fn7_6>;;
     _32(0x1fffedb4),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000345f101b6c0),        //compw.eq $r0 = $r0, 26811 (0x68bb);;
     _32(0x0c000080),        //cb.wnez $r0? 1b228 <main+0x1118>;;
     _32(0x18000995),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff1e6),        //call 179d8 <fn8_6>;;
     _32(0x1fffedad),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b6c0),        //compw.eq $r0 = $r0, 155 (0x9b);;
     _32(0x0c000080),        //cb.wnez $r0? 1b25c <main+0x114c>;;
     _32(0x18000988),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff1e9),        //call 17a18 <fn9_6>;;
     _32(0x1fffeda6),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b680),        //compw.eq $r0 = $r0, 186 (0xba);;
     _32(0x0c000080),        //cb.wnez $r0? 1b290 <main+0x1180>;;
     _32(0x1800097b),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1b2),        //call 17a58 <fn1_7>;;
     _32(0x1fffed23),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b0c0),        //compw.eq $r0 = $r0, 3 (0x3);;
     _32(0x0c000080),        //cb.wnez $r0? 1b3ac <main+0x129c>;;
     _32(0x18000934),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1bb),        //call 17ab8 <fn2_7>;;
     _32(0x1fffed1c),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000003f101b600),        //compw.eq $r0 = $r0, 120 (0x78);;
     _32(0x0c000080),        //cb.wnez $r0? 1b3e8 <main+0x12d8>;;
     _32(0x18000925),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1c6),        //call 17b20 <fn3_7>;;
     _32(0x1fffed15),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000190f101b380),        //compw.eq $r0 = $r0, 12814 (0x320e);;
     _32(0x0c000080),        //cb.wnez $r0? 1b424 <main+0x1314>;;
     _32(0x18000916),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff1d1),        //call 17b88 <fn4_7>;;
     _32(0x1fffed0e),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 1b460 <main+0x1350>;;
     _32(0x18000907),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff1da),        //call 17be8 <fn5_7>;;
     _32(0x1fffed07),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 1b49c <main+0x138c>;;
     _32(0x180008f8),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff1e2),        //call 17c48 <fn6_7>;;
     _32(0x1fffecff),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1b4d4 <main+0x13c4>;;
     _32(0x180008ea),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff1ec),        //call 17ca8 <fn7_7>;;
     _32(0x1fffecf9),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b200),        //compw.eq $r0 = $r0, 136 (0x88);;
     _32(0x0c000080),        //cb.wnez $r0? 1b514 <main+0x1404>;;
     _32(0x180008da),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff1f1),        //call 17cf0 <fn8_7>;;
     _32(0x1fffecf2),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 1b548 <main+0x1438>;;
     _32(0x180008cd),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff1f6),        //call 17d38 <fn9_7>;;
     _32(0x1fffeceb),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b0c0),        //compw.eq $r0 = $r0, 131 (0x83);;
     _32(0x0c000080),        //cb.wnez $r0? 1b57c <main+0x146c>;;
     _32(0x180008c0),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1c1),        //call 17d80 <fn1_8>;;
     _32(0x1fffec68),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b4c0),        //compw.eq $r0 = $r0, 51 (0x33);;
     _32(0x0c000080),        //cb.wnez $r0? 1b698 <main+0x1588>;;
     _32(0x18000879),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1ca),        //call 17de0 <fn2_8>;;
     _32(0x1fffec61),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000017f101b7c0),        //compw.eq $r0 = $r0, 767 (0x2ff);;
     _32(0x0c000080),        //cb.wnez $r0? 1b6d4 <main+0x15c4>;;
     _32(0x1800086a),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1d5),        //call 17e48 <fn3_8>;;
     _32(0x1fffec5a),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003dff101b7c0),        //compw.eq $r0 = $r0, 31743 (0x7bff);;
     _32(0x0c000080),        //cb.wnez $r0? 1b710 <main+0x1600>;;
     _32(0x1800085b),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff1e0),        //call 17eb0 <fn4_8>;;
     _32(0x1fffec53),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b740),        //compw.eq $r0 = $r0, 29 (0x1d);;
     _32(0x0c000080),        //cb.wnez $r0? 1b74c <main+0x163c>;;
     _32(0x1800084c),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff1e9),        //call 17f10 <fn5_8>;;
     _32(0x1fffec4c),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 1b788 <main+0x1678>;;
     _32(0x1800083d),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff1f1),        //call 17f70 <fn6_8>;;
     _32(0x1fffec44),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0010203ef101b5c0),        //compw.eq $r0 = $r0, 33818583 (0x20407d7);;
     _32(0x0c000080),        //cb.wnez $r0? 1b7c8 <main+0x16b8>;;
     _32(0x1800082d),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff1f9),        //call 17fd0 <fn7_8>;;
     _32(0x1fffec3c),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000357f101b740),        //compw.eq $r0 = $r0, 27389 (0x6afd);;
     _32(0x0c000080),        //cb.wnez $r0? 1b808 <main+0x16f8>;;
     _32(0x1800081d),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff1fe),        //call 18018 <fn8_8>;;
     _32(0x1fffec35),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b740),        //compw.eq $r0 = $r0, 157 (0x9d);;
     _32(0x0c000080),        //cb.wnez $r0? 1b83c <main+0x172c>;;
     _32(0x18000810),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff203),        //call 18060 <fn9_8>;;
     _32(0x1fffec2e),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000007f101b7c0),        //compw.eq $r0 = $r0, 255 (0xff);;
     _32(0x0c000080),        //cb.wnez $r0? 1b870 <main+0x1760>;;
     _32(0x18000803),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1ce),        //call 180a8 <fn1_9>;;
     _32(0x1fffebab),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b400),        //compw.eq $r0 = $r0, 48 (0x30);;
     _32(0x0c000080),        //cb.wnez $r0? 1b98c <main+0x187c>;;
     _32(0x180007bc),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1d7),        //call 18108 <fn2_9>;;
     _32(0x1fffeba4),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000014f101b1c0),        //compw.eq $r0 = $r0, 647 (0x287);;
     _32(0x0c000080),        //cb.wnez $r0? 1b9c8 <main+0x18b8>;;
     _32(0x180007ad),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1e2),        //call 18170 <fn3_9>;;
     _32(0x1fffeb9d),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000024ff101b440),        //compw.eq $r0 = $r0, 18929 (0x49f1);;
     _32(0x0c000080),        //cb.wnez $r0? 1ba04 <main+0x18f4>;;
     _32(0x1800079e),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff1ed),        //call 181d8 <fn4_9>;;
     _32(0x1fffeb96),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b340),        //compw.eq $r0 = $r0, 13 (0xd);;
     _32(0x0c000080),        //cb.wnez $r0? 1ba40 <main+0x1930>;;
     _32(0x1800078f),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff1f6),        //call 18238 <fn5_9>;;
     _32(0x1fffeb8f),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1ba74 <main+0x1964>;;
     _32(0x18000782),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff200),        //call 18298 <fn6_9>;;
     _32(0x1fffeb89),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0010203ef101b5c0),        //compw.eq $r0 = $r0, 33818583 (0x20407d7);;
     _32(0x0c000080),        //cb.wnez $r0? 1bab4 <main+0x19a4>;;
     _32(0x18000772),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff208),        //call 182f8 <fn7_9>;;
     _32(0x1fffeb81),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000353f101b540),        //compw.eq $r0 = $r0, 27253 (0x6a75);;
     _32(0x0c000080),        //cb.wnez $r0? 1baf4 <main+0x19e4>;;
     _32(0x18000762),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff20d),        //call 18340 <fn8_9>;;
     _32(0x1fffeb7a),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b340),        //compw.eq $r0 = $r0, 141 (0x8d);;
     _32(0x0c000080),        //cb.wnez $r0? 1bb28 <main+0x1a18>;;
     _32(0x18000755),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff212),        //call 18388 <fn9_9>;;
     _32(0x1fffeb73),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000003f101b700),        //compw.eq $r0 = $r0, 124 (0x7c);;
     _32(0x0c000080),        //cb.wnez $r0? 1bb5c <main+0x1a4c>;;
     _32(0x18000748),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff1dd),        //call 183d0 <fn1_a>;;
     _32(0x1fffeaf0),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b440),        //compw.eq $r0 = $r0, 17 (0x11);;
     _32(0x0c000080),        //cb.wnez $r0? 1bc78 <main+0x1b68>;;
     _32(0x18000701),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff1ea),        //call 18440 <fn2_a>;;
     _32(0x1fffeae9),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 1bcb4 <main+0x1ba4>;;
     _32(0x180006f2),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff1f7),        //call 184b0 <fn3_a>;;
     _32(0x1fffeae2),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 1bcf0 <main+0x1be0>;;
     _32(0x180006e3),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff204),        //call 18520 <fn4_a>;;
     _32(0x1fffeadb),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1bd24 <main+0x1c14>;;
     _32(0x180006d6),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff213),        //call 18590 <fn5_a>;;
     _32(0x1fffead6),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 1bd60 <main+0x1c50>;;
     _32(0x180006c7),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff21f),        //call 18600 <fn6_a>;;
     _32(0x1fffeace),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000003f101b7c0),        //compw.eq $r0 = $r0, 127 (0x7f);;
     _32(0x0c000080),        //cb.wnez $r0? 1bda0 <main+0x1c90>;;
     _32(0x180006b7),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff22d),        //call 18678 <fn7_a>;;
     _32(0x1fffeac6),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b140),        //compw.eq $r0 = $r0, 37 (0x25);;
     _32(0x0c000080),        //cb.wnez $r0? 1bde0 <main+0x1cd0>;;
     _32(0x180006a7),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff236),        //call 186d0 <fn8_a>;;
     _32(0x1fffeabf),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b240),        //compw.eq $r0 = $r0, 9 (0x9);;
     _32(0x0c000080),        //cb.wnez $r0? 1be14 <main+0x1d04>;;
     _32(0x1800069a),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff23f),        //call 18728 <fn9_a>;;
     _32(0x1fffeab8),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1be40 <main+0x1d30>;;
     _32(0x1800068f),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff210),        //call 18780 <fn1_b>;;
     _32(0x1fffea37),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1bf54 <main+0x1e44>;;
     _32(0x1800064a),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff21f),        //call 187f0 <fn2_b>;;
     _32(0x1fffea32),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b180),        //compw.eq $r0 = $r0, 134 (0x86);;
     _32(0x0c000080),        //cb.wnez $r0? 1bf90 <main+0x1e80>;;
     _32(0x1800063b),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff22c),        //call 18860 <fn3_b>;;
     _32(0x1fffea2b),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000093f101b400),        //compw.eq $r0 = $r0, 4720 (0x1270);;
     _32(0x0c000080),        //cb.wnez $r0? 1bfcc <main+0x1ebc>;;
     _32(0x1800062c),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff239),        //call 188d0 <fn4_b>;;
     _32(0x1fffea24),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b540),        //compw.eq $r0 = $r0, 21 (0x15);;
     _32(0x0c000080),        //cb.wnez $r0? 1c008 <main+0x1ef8>;;
     _32(0x1800061d),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff246),        //call 18940 <fn5_b>;;
     _32(0x1fffea1d),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1c03c <main+0x1f2c>;;
     _32(0x18000610),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff254),        //call 189b0 <fn6_b>;;
     _32(0x1fffea17),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000000e2f101b5c0),        //compw.eq $r0 = $r0, 7255 (0x1c57);;
     _32(0x0c000080),        //cb.wnez $r0? 1c07c <main+0x1f6c>;;
     _32(0x18000600),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff262),        //call 18a28 <fn7_b>;;
     _32(0x1fffea0f),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000000df101b3c0),        //compw.eq $r0 = $r0, 431 (0x1af);;
     _32(0x0c000080),        //cb.wnez $r0? 1c0bc <main+0x1fac>;;
     _32(0x180005f0),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff26b),        //call 18a80 <fn8_b>;;
     _32(0x1fffea08),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b0c0),        //compw.eq $r0 = $r0, 3 (0x3);;
     _32(0x0c000080),        //cb.wnez $r0? 1c0f0 <main+0x1fe0>;;
     _32(0x180005e3),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff274),        //call 18ad8 <fn9_b>;;
     _32(0x1fffea01),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b6c0),        //compw.eq $r0 = $r0, 187 (0xbb);;
     _32(0x0c000080),        //cb.wnez $r0? 1c124 <main+0x2014>;;
     _32(0x180005d6),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff243),        //call 18b30 <fn1_c>;;
     _32(0x1fffe97e),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b580),        //compw.eq $r0 = $r0, 54 (0x36);;
     _32(0x0c000080),        //cb.wnez $r0? 1c240 <main+0x2130>;;
     _32(0x1800058f),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff24a),        //call 18b88 <fn2_c>;;
     _32(0x1fffe977),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000013f101b7c0),        //compw.eq $r0 = $r0, 639 (0x27f);;
     _32(0x0c000080),        //cb.wnez $r0? 1c27c <main+0x216c>;;
     _32(0x18000580),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff251),        //call 18be0 <fn3_c>;;
     _32(0x1fffe970),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003d1f101b440),        //compw.eq $r0 = $r0, 31281 (0x7a31);;
     _32(0x0c000080),        //cb.wnez $r0? 1c2b8 <main+0x21a8>;;
     _32(0x18000571),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff258),        //call 18c38 <fn4_c>;;
     _32(0x1fffe969),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b600),        //compw.eq $r0 = $r0, 24 (0x18);;
     _32(0x0c000080),        //cb.wnez $r0? 1c2f4 <main+0x21e4>;;
     _32(0x18000562),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff25f),        //call 18c90 <fn5_c>;;
     _32(0x1fffe962),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1c328 <main+0x2218>;;
     _32(0x18000555),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff267),        //call 18ce8 <fn6_c>;;
     _32(0x1fffe95c),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00100000f101b0c0),        //compw.eq $r0 = $r0, 33554435 (0x2000003);;
     _32(0x0c000080),        //cb.wnez $r0? 1c368 <main+0x2258>;;
     _32(0x18000545),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff26f),        //call 18d48 <fn7_c>;;
     _32(0x1fffe954),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000345f101b7c0),        //compw.eq $r0 = $r0, 26815 (0x68bf);;
     _32(0x0c000080),        //cb.wnez $r0? 1c3a8 <main+0x2298>;;
     _32(0x18000535),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff272),        //call 18d88 <fn8_c>;;
     _32(0x1fffe94d),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b7c0),        //compw.eq $r0 = $r0, 159 (0x9f);;
     _32(0x0c000080),        //cb.wnez $r0? 1c3dc <main+0x22cc>;;
     _32(0x18000528),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff275),        //call 18dc8 <fn9_c>;;
     _32(0x1fffe946),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b780),        //compw.eq $r0 = $r0, 190 (0xbe);;
     _32(0x0c000080),        //cb.wnez $r0? 1c410 <main+0x2300>;;
     _32(0x1800051b),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff23e),        //call 18e08 <fn1_d>;;
     _32(0x1fffe8c3),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b300),        //compw.eq $r0 = $r0, 44 (0x2c);;
     _32(0x0c000080),        //cb.wnez $r0? 1c52c <main+0x241c>;;
     _32(0x180004d4),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff245),        //call 18e60 <fn2_d>;;
     _32(0x1fffe8bc),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000013f101b540),        //compw.eq $r0 = $r0, 629 (0x275);;
     _32(0x0c000080),        //cb.wnez $r0? 1c568 <main+0x2458>;;
     _32(0x180004c5),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff24c),        //call 18eb8 <fn3_d>;;
     _32(0x1fffe8b5),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003d1f101b1c0),        //compw.eq $r0 = $r0, 31271 (0x7a27);;
     _32(0x0c000080),        //cb.wnez $r0? 1c5a4 <main+0x2494>;;
     _32(0x180004b6),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff253),        //call 18f10 <fn4_d>;;
     _32(0x1fffe8ae),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b380),        //compw.eq $r0 = $r0, 14 (0xe);;
     _32(0x0c000080),        //cb.wnez $r0? 1c5e0 <main+0x24d0>;;
     _32(0x180004a7),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff25a),        //call 18f68 <fn5_d>;;
     _32(0x1fffe8a7),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1c614 <main+0x2504>;;
     _32(0x1800049a),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff262),        //call 18fc0 <fn6_d>;;
     _32(0x1fffe8a1),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000ffffff101b640),        //compw.eq $r0 = $r0, 33554425 (0x1fffff9);;
     _32(0x0c000080),        //cb.wnez $r0? 1c654 <main+0x2544>;;
     _32(0x1800048a),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff26a),        //call 19020 <fn7_d>;;
     _32(0x1fffe899),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000345f101b540),        //compw.eq $r0 = $r0, 26805 (0x68b5);;
     _32(0x0c000080),        //cb.wnez $r0? 1c694 <main+0x2584>;;
     _32(0x1800047a),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff26d),        //call 19060 <fn8_d>;;
     _32(0x1fffe892),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b540),        //compw.eq $r0 = $r0, 149 (0x95);;
     _32(0x0c000080),        //cb.wnez $r0? 1c6c8 <main+0x25b8>;;
     _32(0x1800046d),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff270),        //call 190a0 <fn9_d>;;
     _32(0x1fffe88b),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b500),        //compw.eq $r0 = $r0, 180 (0xb4);;
     _32(0x0c000080),        //cb.wnez $r0? 1c6fc <main+0x25ec>;;
     _32(0x18000460),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff239),        //call 190e0 <fn1_e>;;
     _32(0x1fffe808),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b440),        //compw.eq $r0 = $r0, 17 (0x11);;
     _32(0x0c000080),        //cb.wnez $r0? 1c818 <main+0x2708>;;
     _32(0x18000419),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff23e),        //call 19130 <fn2_e>;;
     _32(0x1fffe801),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b500),        //compw.eq $r0 = $r0, 20 (0x14);;
     _32(0x0c000080),        //cb.wnez $r0? 1c854 <main+0x2744>;;
     _32(0x1800040a),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff243),        //call 19180 <fn3_e>;;
     _32(0x1fffe7fa),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b100),        //compw.eq $r0 = $r0, 4 (0x4);;
     _32(0x0c000080),        //cb.wnez $r0? 1c890 <main+0x2780>;;
     _32(0x180003fb),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff248),        //call 191d0 <fn4_e>;;
     _32(0x1fffe7f3),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b540),        //compw.eq $r0 = $r0, 21 (0x15);;
     _32(0x0c000080),        //cb.wnez $r0? 1c8cc <main+0x27bc>;;
     _32(0x180003ec),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff24d),        //call 19220 <fn5_e>;;
     _32(0x1fffe7ec),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 1c908 <main+0x27f8>;;
     _32(0x180003dd),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff24f),        //call 19268 <fn6_e>;;
     _32(0x1fffe7e4),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1c940 <main+0x2830>;;
     _32(0x180003cf),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff255),        //call 192b8 <fn7_e>;;
     _32(0x1fffe7de),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b500),        //compw.eq $r0 = $r0, 20 (0x14);;
     _32(0x0c000080),        //cb.wnez $r0? 1c980 <main+0x2870>;;
     _32(0x180003bf),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff258),        //call 192f8 <fn8_e>;;
     _32(0x1fffe7d7),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b500),        //compw.eq $r0 = $r0, 20 (0x14);;
     _32(0x0c000080),        //cb.wnez $r0? 1c9b4 <main+0x28a4>;;
     _32(0x180003b2),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff25b),        //call 19338 <fn9_e>;;
     _32(0x1fffe7d0),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b440),        //compw.eq $r0 = $r0, 17 (0x11);;
     _32(0x0c000080),        //cb.wnez $r0? 1c9e8 <main+0x28d8>;;
     _32(0x180003a5),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff224),        //call 19378 <fn1_f>;;
     _32(0x1fffe74d),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b4c0),        //compw.eq $r0 = $r0, 51 (0x33);;
     _32(0x0c000080),        //cb.wnez $r0? 1cb04 <main+0x29f4>;;
     _32(0x1800035e),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff229),        //call 193c8 <fn2_f>;;
     _32(0x1fffe746),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000013f101b7c0),        //compw.eq $r0 = $r0, 639 (0x27f);;
     _32(0x0c000080),        //cb.wnez $r0? 1cb40 <main+0x2a30>;;
     _32(0x1800034f),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff22e),        //call 19418 <fn3_f>;;
     _32(0x1fffe73f),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003d1f101b7c0),        //compw.eq $r0 = $r0, 31295 (0x7a3f);;
     _32(0x0c000080),        //cb.wnez $r0? 1cb7c <main+0x2a6c>;;
     _32(0x18000340),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff233),        //call 19468 <fn4_f>;;
     _32(0x1fffe738),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b5c0),        //compw.eq $r0 = $r0, 23 (0x17);;
     _32(0x0c000080),        //cb.wnez $r0? 1cbb8 <main+0x2aa8>;;
     _32(0x18000331),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff238),        //call 194b8 <fn5_f>;;
     _32(0x1fffe731),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 1cbf4 <main+0x2ae4>;;
     _32(0x18000322),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff23e),        //call 19510 <fn6_f>;;
     _32(0x1fffe729),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00100000f101b4c0),        //compw.eq $r0 = $r0, 33554451 (0x2000013);;
     _32(0x0c000080),        //cb.wnez $r0? 1cc34 <main+0x2b24>;;
     _32(0x18000312),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff242),        //call 19560 <fn7_f>;;
     _32(0x1fffe721),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000345f101b7c0),        //compw.eq $r0 = $r0, 26815 (0x68bf);;
     _32(0x0c000080),        //cb.wnez $r0? 1cc74 <main+0x2b64>;;
     _32(0x18000302),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff245),        //call 195a0 <fn8_f>;;
     _32(0x1fffe71a),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b7c0),        //compw.eq $r0 = $r0, 159 (0x9f);;
     _32(0x0c000080),        //cb.wnez $r0? 1cca8 <main+0x2b98>;;
     _32(0x180002f5),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff248),        //call 195e0 <fn9_f>;;
     _32(0x1fffe713),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b6c0),        //compw.eq $r0 = $r0, 187 (0xbb);;
     _32(0x0c000080),        //cb.wnez $r0? 1ccdc <main+0x2bcc>;;
     _32(0x180002e8),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff211),        //call 19620 <fn1_g>;;
     _32(0x1fffe690),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b580),        //compw.eq $r0 = $r0, 22 (0x16);;
     _32(0x0c000080),        //cb.wnez $r0? 1cdf8 <main+0x2ce8>;;
     _32(0x180002a1),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff216),        //call 19670 <fn2_g>;;
     _32(0x1fffe689),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000012f101b640),        //compw.eq $r0 = $r0, 601 (0x259);;
     _32(0x0c000080),        //cb.wnez $r0? 1ce34 <main+0x2d24>;;
     _32(0x18000292),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff21b),        //call 196c0 <fn3_g>;;
     _32(0x1fffe682),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x000003d0f101b2c0),        //compw.eq $r0 = $r0, 31243 (0x7a0b);;
     _32(0x0c000080),        //cb.wnez $r0? 1ce70 <main+0x2d60>;;
     _32(0x18000283),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff220),        //call 19710 <fn4_g>;;
     _32(0x1fffe67b),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 1ceac <main+0x2d9c>;;
     _32(0x18000274),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff227),        //call 19768 <fn5_g>;;
     _32(0x1fffe674),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1cee0 <main+0x2dd0>;;
     _32(0x18000267),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff22f),        //call 197c0 <fn6_g>;;
     _32(0x1fffe66e),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00100001f101b140),        //compw.eq $r0 = $r0, 33554469 (0x2000025);;
     _32(0x0c000080),        //cb.wnez $r0? 1cf20 <main+0x2e10>;;
     _32(0x18000257),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff233),        //call 19810 <fn7_g>;;
     _32(0x1fffe666),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000344f101b640),        //compw.eq $r0 = $r0, 26777 (0x6899);;
     _32(0x0c000080),        //cb.wnez $r0? 1cf60 <main+0x2e50>;;
     _32(0x18000247),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff236),        //call 19850 <fn8_g>;;
     _32(0x1fffe65f),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000005f101b640),        //compw.eq $r0 = $r0, 185 (0xb9);;
     _32(0x0c000080),        //cb.wnez $r0? 1cf94 <main+0x2e84>;;
     _32(0x1800023a),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff239),        //call 19890 <fn9_g>;;
     _32(0x1fffe658),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000004f101b780),        //compw.eq $r0 = $r0, 158 (0x9e);;
     _32(0x0c000080),        //cb.wnez $r0? 1cfc8 <main+0x2eb8>;;
     _32(0x1800022d),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff202),        //call 198d0 <fn1_h>;;
     _32(0x1fffe5d5),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b0c0),        //compw.eq $r0 = $r0, 3 (0x3);;
     _32(0x0c000080),        //cb.wnez $r0? 1d0e4 <main+0x2fd4>;;
     _32(0x180001e6),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff20f),        //call 19940 <fn2_h>;;
     _32(0x1fffe5ce),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b140),        //compw.eq $r0 = $r0, 37 (0x25);;
     _32(0x0c000080),        //cb.wnez $r0? 1d120 <main+0x3010>;;
     _32(0x180001d7),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff21e),        //call 199b8 <fn3_h>;;
     _32(0x1fffe5c7),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000039f101b3c0),        //compw.eq $r0 = $r0, 1839 (0x72f);;
     _32(0x0c000080),        //cb.wnez $r0? 1d15c <main+0x304c>;;
     _32(0x180001c8),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff22d),        //call 19a30 <fn4_h>;;
     _32(0x1fffe5c0),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 1d198 <main+0x3088>;;
     _32(0x180001b9),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff23a),        //call 19aa0 <fn5_h>;;
     _32(0x1fffe5b9),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1d1cc <main+0x30bc>;;
     _32(0x180001ac),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff248),        //call 19b10 <fn6_h>;;
     _32(0x1fffe5b3),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x0000f0f0f101b780),        //compw.eq $r0 = $r0, 1973790 (0x1e1e1e);;
     _32(0x0c000080),        //cb.wnez $r0? 1d20c <main+0x30fc>;;
     _32(0x1800019c),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff256),        //call 19b88 <fn7_h>;;
     _32(0x1fffe5ab),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000031f101b240),        //compw.eq $r0 = $r0, 1577 (0x629);;
     _32(0x0c000080),        //cb.wnez $r0? 1d24c <main+0x313c>;;
     _32(0x1800018c),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff25d),        //call 19bd8 <fn8_h>;;
     _32(0x1fffe5a4),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b240),        //compw.eq $r0 = $r0, 9 (0x9);;
     _32(0x0c000080),        //cb.wnez $r0? 1d280 <main+0x3170>;;
     _32(0x1800017f),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff264),        //call 19c28 <fn9_h>;;
     _32(0x1fffe59d),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b2c0),        //compw.eq $r0 = $r0, 11 (0xb);;
     _32(0x0c000080),        //cb.wnez $r0? 1d2b4 <main+0x31a4>;;
     _32(0x18000172),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60087a2e),        //make $r2 = 31278 (0x7a2e);;
     _32(0x6103f442),        //insf $r0 = $r2, 31 (0x1f), 17 (0x11);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffff231),        //call 19c78 <fn1_i>;;
     _32(0x1fffe51a),        //call 16820 <ret1>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b340),        //compw.eq $r0 = $r0, 13 (0xd);;
     _32(0x0c000080),        //cb.wnez $r0? 1d3d0 <main+0x32c0>;;
     _32(0x1800012b),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080033),        //make $r2 = 51 (0x33);;
     _32(0x60035002),        //insf $r0 = $r2, 5 (0x5), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600000fb),        //make $r0 = 251 (0xfb);;
     _32(0x1ffff246),        //call 19d08 <fn2_i>;;
     _32(0x1fffe513),        //call 16840 <ret2>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b240),        //compw.eq $r0 = $r0, 9 (0x9);;
     _32(0x0c000080),        //cb.wnez $r0? 1d40c <main+0x32fc>;;
     _32(0x1800011c),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008027c),        //make $r2 = 636 (0x27c);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600033df),        //make $r0 = 13279 (0x33df);;
     _32(0x1ffff25b),        //call 19d98 <fn3_i>;;
     _32(0x1fffe50c),        //call 16860 <ret3>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b100),        //compw.eq $r0 = $r0, 4 (0x4);;
     _32(0x0c000080),        //cb.wnez $r0? 1d448 <main+0x3338>;;
     _32(0x1800010d),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042200),        //make $r1 = 314504 (0x4cc88);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x6008022e),        //make $r2 = 558 (0x22e);;
     _32(0x61030182),        //insf $r0 = $r2, 16 (0x10), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000018),        //make $r0 = 24 (0x18);;
     _32(0x1ffff270),        //call 19e28 <fn4_i>;;
     _32(0x1fffe505),        //call 16880 <ret4>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 1d484 <main+0x3374>;;
     _32(0x180000fe),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080015),        //make $r2 = 21 (0x15);;
     _32(0x60034002),        //insf $r0 = $r2, 4 (0x4), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffff285),        //call 19eb8 <fn5_i>;;
     _32(0x1fffe4fe),        //call 168a0 <ret5>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 1d4c0 <main+0x33b0>;;
     _32(0x180000ef),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60035142),        //insf $r0 = $r2, 5 (0x5), 5 (0x5);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _64(0x00000101e000f5c0),        //make $r0 = 264151 (0x407d7);;
     _32(0x1ffff299),        //call 19f48 <fn6_i>;;
     _32(0x1fffe4f6),        //call 168c0 <ret6>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b380),        //compw.eq $r0 = $r0, 14 (0xe);;
     _32(0x0c000080),        //cb.wnez $r0? 1d500 <main+0x33f0>;;
     _32(0x180000df),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0042600),        //make $r1 = 314520 (0x4cc98);;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _64(0x00008000e0080000),        //make $r2 = 33554432 (0x2000000);;
     _32(0x6103f182),        //insf $r0 = $r2, 31 (0x1f), 6 (0x6);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x600002c9),        //make $r0 = 713 (0x2c9);;
     _32(0x1ffff2ad),        //call 19fd8 <fn7_i>;;
     _32(0x1fffe4ee),        //call 168e0 <ret7>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b0c0),        //compw.eq $r0 = $r0, 3 (0x3);;
     _32(0x0c000080),        //cb.wnez $r0? 1d540 <main+0x3430>;;
     _32(0x180000cf),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x600468bc),        //make $r1 = 26812 (0x68bc);;
     _32(0x25050000),        //sh 0 (0x0)[$r0] = $r1;;
     _32(0x60000011),        //make $r0 = 17 (0x11);;
     _32(0x1ffff2ba),        //call 1a040 <fn8_i>;;
     _32(0x1fffe4e7),        //call 168f8 <ret8>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b100),        //compw.eq $r0 = $r0, 4 (0x4);;
     _32(0x0c000080),        //cb.wnez $r0? 1d574 <main+0x3464>;;
     _32(0x180000c2),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ff9c),        //make $r1 = -100 (0xffffff9c);;
     _32(0x24050080),        //sb 2 (0x2)[$r0] = $r1;;
     _32(0x600000c7),        //make $r0 = 199 (0xc7);;
     _32(0x1ffff2c7),        //call 1a0a8 <fn9_i>;;
     _32(0x1fffe4e0),        //call 16910 <ret9>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 1d5a8 <main+0x3498>;;
     _32(0x180000b5),        //call 1d878 <abort>;;
     _96(0x0000000080000133e0002a00),        //make $r0 = 314536 (0x4cca8);;
     _32(0x6004ffbb),        //make $r1 = -69 (0xffffffbb);;
     _32(0x240500c0),        //sb 3 (0x3)[$r0] = $r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let __udivdi3: list_I = 
 [|
     _32(0x88800641),        //cb.deqz $r1? 1d634 <__udivdi3+0x64>
     _32(0x760da040),        //compd.ltu $r3 = $r0, $r1;;
     _32(0xea080000),        //copyd $r2 = $r0
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x08000503),        //cb.dnez $r3? 1d630 <__udivdi3+0x60>;;
     _32(0xf00e2001),        //clzd $r3 = $r1
     _32(0x70122002),        //clzd $r4 = $r2;;
     _32(0x751110c4),        //sbfw $r4 = $r4, $r3;;
     _32(0x79066101),        //slld $r1 = $r1, $r4;;
     _32(0x760da042),        //compd.ltu $r3 = $r2, $r1;;
     _32(0x08000103),        //cb.dnez $r3? 1d608 <__udivdi3+0x38>;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x75090081),        //sbfd $r2 = $r1, $r2;;
     _32(0x79026100),        //slld $r0 = $r0, $r4;;
     _32(0x0e000284),        //cb.wlez $r4? 1d630 <__udivdi3+0x60>;;
     _32(0xe0140001),        //make $r5 = 1 (0x1)
     _32(0xfa0c0004),        //copyw $r3 = $r4
     _32(0x7b062041),        //srld $r1 = $r1, 1 (0x1);;
     _32(0x79126105),        //slld $r4 = $r5, $r4;;
     _32(0x6110ffc4),        //addd $r4 = $r4, -1 (0xffffffff);;
     _32(0x0f000083),        //loopdo $r3, 1d628 <__udivdi3+0x58>;;
     _32(0x70090081),        //stsud $r2 = $r1, $r2;;
     _32(0x78090084),        //andd $r2 = $r4, $r2;;
     _32(0x71010080),        //addd $r0 = $r0, $r2;;
     _32(0x0fd00000),        //ret ;;
     _96(0x800000a3e0000000f0045700),        //pcrel $r1 = 167260 (0x28d5c)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b8040201),        //ld $r1 = 8 (0x8)[$r1];;
     _32(0x087ffe41),        //cb.dnez $r1? 1d630 <__udivdi3+0x60>;;
     _32(0x00000000),        //errop ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __umoddi3: list_I = 
 [|
     _32(0x888004c1),        //cb.deqz $r1? 1d6a4 <__umoddi3+0x4c>
     _32(0x760da040),        //compd.ltu $r3 = $r0, $r1;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x080003c3),        //cb.dnez $r3? 1d6a0 <__umoddi3+0x48>;;
     _32(0xf0022000),        //clzd $r0 = $r0
     _32(0x700e2001),        //clzd $r3 = $r1;;
     _32(0x750d10c0),        //sbfw $r3 = $r0, $r3;;
     _32(0x790660c1),        //slld $r1 = $r1, $r3;;
     _32(0xf611a042),        //compd.ltu $r4 = $r2, $r1
     _32(0xf5010081),        //sbfd $r0 = $r1, $r2
     _32(0x7b062041),        //srld $r1 = $r1, 1 (0x1);;
     _32(0x710a0004),        //cmoved.deqz $r4? $r2 = $r0;;
     _32(0x8e000183),        //cb.wlez $r3? 1d6a0 <__umoddi3+0x48>
     _32(0x6a000002),        //copyd $r0 = $r2;;
     _32(0x7a000003),        //copyw $r0 = $r3;;
     _32(0x0f000080),        //loopdo $r0, 1d69c <__umoddi3+0x44>;;
     _32(0x70090081),        //stsud $r2 = $r1, $r2;;
     _32(0x7b0260c2),        //srld $r0 = $r2, $r3;;
     _32(0x0fd00000),        //ret ;;
     _96(0x800000a3e0000000f0043b00),        //pcrel $r1 = 167148 (0x28cec)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b8040201),        //ld $r1 = 8 (0x8)[$r1];;
     _32(0x087ffe41),        //cb.dnez $r1? 1d6a0 <__umoddi3+0x48>;;
     _32(0x00000000),        //errop ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __udivmoddi4: list_I = 
 [|
     _32(0x88800801),        //cb.deqz $r1? 1d748 <__udivmoddi4+0x80>
     _32(0xf0162001),        //clzd $r5 = $r1
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0xf0122003),        //clzd $r4 = $r3
     _32(0x7601a040),        //compd.ltu $r0 = $r0, $r1;;
     _32(0x75111144),        //sbfw $r4 = $r4, $r5;;
     _32(0x88000580),        //cb.dnez $r0? 1d738 <__udivmoddi4+0x70>
     _32(0x79166101),        //slld $r5 = $r1, $r4;;
     _32(0xf605a143),        //compd.ltu $r1 = $r3, $r5
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x08000101),        //cb.dnez $r1? 1d700 <__udivmoddi4+0x38>;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x750d00c5),        //sbfd $r3 = $r5, $r3;;
     _32(0x79026100),        //slld $r0 = $r0, $r4;;
     _32(0x8e000304),        //cb.wlez $r4? 1d730 <__udivmoddi4+0x68>
     _32(0xe0180001),        //make $r6 = 1 (0x1)
     _32(0x6a040003),        //copyd $r1 = $r3;;
     _32(0xf91a6106),        //slld $r6 = $r6, $r4
     _32(0xfb162045),        //srld $r5 = $r5, 1 (0x1)
     _32(0x7a040004),        //copyw $r1 = $r4;;
     _32(0x6118ffc6),        //addd $r6 = $r6, -1 (0xffffffff);;
     _32(0x0f000081),        //loopdo $r1, 1d724 <__udivmoddi4+0x5c>;;
     _32(0x700d00c5),        //stsud $r3 = $r5, $r3;;
     _32(0xf81500c6),        //andd $r5 = $r6, $r3
     _32(0x7b066103),        //srld $r1 = $r3, $r4;;
     _32(0x71010140),        //addd $r0 = $r0, $r5;;
     _32(0x8fd00000),        //ret 
     _32(0x27050002),        //sd 0 (0x0)[$r2] = $r1;;
     _32(0xea040003),        //copyd $r1 = $r3
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x8fd00000),        //ret 
     _32(0x27050002),        //sd 0 (0x0)[$r2] = $r1;;
     _96(0x800000a3e0000000f00c1200),        //pcrel $r3 = 166984 (0x28c48)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b80c0203),        //ld $r3 = 8 (0x8)[$r3];;
     _32(0x087ffd03),        //cb.dnez $r3? 1d730 <__udivmoddi4+0x68>;;
     _32(0x00000000)        //errop ;;
 |];

let __divdi3: list_I = 
 [|
     _32(0x88800781),        //cb.deqz $r1? 1d7e0 <__divdi3+0x78>
     _32(0xe40c0000),        //absd $r3 = $r0
     _32(0xe4100001),        //absd $r4 = $r1
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0xf01a2003),        //clzd $r6 = $r3
     _32(0xf615a103),        //compd.ltu $r5 = $r3, $r4
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x080004c5),        //cb.dnez $r5? 1d7d0 <__divdi3+0x68>;;
     _32(0x70162004),        //clzd $r5 = $r4;;
     _32(0x75191146),        //sbfw $r6 = $r6, $r5;;
     _32(0x79126184),        //slld $r4 = $r4, $r6;;
     _32(0x7615a103),        //compd.ltu $r5 = $r3, $r4;;
     _32(0x08000105),        //cb.dnez $r5? 1d7a8 <__divdi3+0x40>;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x750d00c4),        //sbfd $r3 = $r4, $r3;;
     _32(0x79026180),        //slld $r0 = $r0, $r6;;
     _32(0x0e000286),        //cb.wlez $r6? 1d7d0 <__divdi3+0x68>;;
     _32(0xe01c0001),        //make $r7 = 1 (0x1)
     _32(0xfa140006),        //copyw $r5 = $r6
     _32(0x7b122044),        //srld $r4 = $r4, 1 (0x1);;
     _32(0x791a6187),        //slld $r6 = $r7, $r6;;
     _32(0x6118ffc6),        //addd $r6 = $r6, -1 (0xffffffff);;
     _32(0x0f000085),        //loopdo $r5, 1d7c8 <__divdi3+0x60>;;
     _32(0x700d00c4),        //stsud $r3 = $r4, $r3;;
     _32(0x780d00c6),        //andd $r3 = $r6, $r3;;
     _32(0x710100c0),        //addd $r0 = $r0, $r3;;
     _32(0xfc090042),        //xord $r2 = $r2, $r1
     _32(0x65040000),        //negd $r1 = $r0;;
     _32(0x8fd00000),        //ret 
     _32(0x72020042),        //cmoved.dltz $r2? $r0 = $r1;;
     _96(0x800000a2e0000000f00cec00),        //pcrel $r3 = 166832 (0x28bb0)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b80c0203),        //ld $r3 = 8 (0x8)[$r3];;
     _32(0x087ffd83),        //cb.dnez $r3? 1d7d0 <__divdi3+0x68>;;
     _32(0x00000000)        //errop ;;
 |];

let __moddi3: list_I = 
 [|
     _32(0x88800581),        //cb.deqz $r1? 1d858 <__moddi3+0x58>
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0xe4000000),        //absd $r0 = $r0
     _32(0x64040001),        //absd $r1 = $r1;;
     _32(0xf0122001),        //clzd $r4 = $r1
     _32(0x760da040),        //compd.ltu $r3 = $r0, $r1;;
     _32(0x08000343),        //cb.dnez $r3? 1d84c <__moddi3+0x4c>;;
     _32(0x700e2000),        //clzd $r3 = $r0;;
     _32(0x75111103),        //sbfw $r4 = $r3, $r4;;
     _32(0x79066101),        //slld $r1 = $r1, $r4;;
     _32(0xf615a040),        //compd.ltu $r5 = $r0, $r1
     _32(0xf50d0001),        //sbfd $r3 = $r1, $r0
     _32(0x7b062041),        //srld $r1 = $r1, 1 (0x1);;
     _32(0x8e000184),        //cb.wlez $r4? 1d84c <__moddi3+0x4c>
     _32(0x710200c5),        //cmoved.deqz $r5? $r0 = $r3;;
     _32(0x7a0c0004),        //copyw $r3 = $r4;;
     _32(0x0f000083),        //loopdo $r3, 1d848 <__moddi3+0x48>;;
     _32(0x70010001),        //stsud $r0 = $r1, $r0;;
     _32(0x7b026100),        //srld $r0 = $r0, $r4;;
     _32(0x65040000),        //negd $r1 = $r0;;
     _32(0x8fd00000),        //ret 
     _32(0x72020042),        //cmoved.dltz $r2? $r0 = $r1;;
     _96(0x800000a2e0000000f004ce00),        //pcrel $r1 = 166712 (0x28b38)
     _32(0x00000000),        //make $r0 = 0 (0x0);;
     _64(0x18000000b8040201),        //ld $r1 = 8 (0x8)[$r1];;
     _32(0x087ffdc1),        //cb.dnez $r1? 1d84c <__moddi3+0x4c>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 1dc50 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 1f780 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let __libc_fini_array: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _96(0x800000f4a749040ce0480000),        //make $r18 = 249856 (0x3d000)
     _32(0x00000000),        //sd 16 (0x10)[$r12] = $r18;;
     _96(0x800000f4a739020ce5380012),        //sbfd $r14 = $r18, 249856 (0x3d000)
     _32(0x00000000),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa3a20ce),        //srad $r14 = $r14, 3 (0x3)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x0880014e),        //cb.deqz $r14? 1d8dc <__libc_fini_array+0x44>;;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x3802f392),        //ld.xs $r0 = $r14[$r18];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x087fff4e),        //cb.dnez $r14? 1d8cc <__libc_fini_array+0x34>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let __libc_init_array: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _96(0x800000f4a849020ce04c0000),        //make $r19 = 249856 (0x3d000)
     _32(0x00000000),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xe0380000),        //make $r14 = 0 (0x0)
     _96(0x880000f4a739000ce5480013),        //sbfd $r18 = $r19, 249856 (0x3d000)
     _32(0x08000000),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xfa4a20d2),        //srad $r18 = $r18, 3 (0x3)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x08800192),        //cb.deqz $r18? 1d944 <__libc_init_array+0x4c>;;
     _32(0xe138004e),        //addd $r14 = $r14, 1 (0x1)
     _32(0x3802f393),        //ld.xs $r0 = $r14[$r19];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x7001a392),        //compd.ne $r0 = $r18, $r14;;
     _32(0x087fff00),        //cb.dnez $r0? 1d930 <__libc_init_array+0x38>;;
     _32(0xe0380000),        //make $r14 = 0 (0x0)
     _96(0x08000000880000f4e04c0000),        //make $r19 = 249856 (0x3d000);;
     _96(0x00000000800000f4e5480013),        //sbfd $r18 = $r19, 249856 (0x3d000);;
     _32(0x7a4a20d2),        //srad $r18 = $r18, 3 (0x3);;
     _32(0x08800192),        //cb.deqz $r18? 1d97c <__libc_init_array+0x84>;;
     _32(0xe138004e),        //addd $r14 = $r14, 1 (0x1)
     _32(0x3802f393),        //ld.xs $r0 = $r14[$r19];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x7001a392),        //compd.ne $r0 = $r18, $r14;;
     _32(0x087fff00),        //cb.dnez $r0? 1d968 <__libc_init_array+0x70>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let _init_signal_r_part_0: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040100),        //make $r1 = 256 (0x100);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x9800010f),        //call 1dde8 <_malloc_r>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x888003c0),        //cb.deqz $r0? 1d9f0 <_init_signal_r.part.0+0x58>
     _64(0x18000001a701460e),        //sd 1304 (0x518)[$r14] = $r0;;
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _32(0x60040020),        //make $r1 = 32 (0x20);;
     _32(0x0f0000c1),        //loopdo $r1, 1d9d8 <_init_signal_r.part.0+0x40>;;
     _32(0xe1080042),        //addd $r2 = $r2, 1 (0x1)
     _32(0x270ff080),        //sd.xs $r2[$r0] = $r3;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x97fffffb),        //goto 1d9dc <_init_signal_r.part.0+0x44>
     _64(0x003fffffe000ffc0),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0x7f03f000)        //nop ;;
 |];

let _init_signal_r: list_I = 
 [|
     _64(0x18000001b8044600),        //ld $r1 = 1304 (0x518)[$r0];;
     _32(0x088000c1),        //cb.deqz $r1? 1da14 <_init_signal_r+0x14>;;
     _32(0x8fd00000),        //ret 
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x17ffffe1)        //goto 1d998 <_init_signal_r.part.0>;;
 |];

let _signal_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _64(0x08000000f80db7c1),        //compw.leu $r3 = $r1, 31 (0x1f);;
     _32(0xea480002),        //copyd $r18 = $r2
     _32(0xf84cffc1),        //zxwd $r19 = $r1
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x8c800383),        //cb.weqz $r3? 1da74 <_signal_r+0x5c>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _64(0x18000001b8084600),        //ld $r2 = 1304 (0x518)[$r0];;
     _32(0x088004c2),        //cb.deqz $r2? 1da98 <_signal_r+0x80>;;
     _32(0x6907f013),        //sxwd $r1 = $r19;;
     _32(0x3802f042),        //ld.xs $r0 = $r1[$r2];;
     _32(0x274bf042),        //sd.xs $r1[$r2] = $r18;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0xe0040016),        //make $r1 = 22 (0x16)
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x1fffffc0),        //call 1d998 <_init_signal_r.part.0>;;
     _32(0xfa040000),        //copyw $r1 = $r0
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x0c7ffb81),        //cb.wnez $r1? 1da5c <_signal_r+0x44>;;
     _32(0x97ffffea),        //goto 1da50 <_signal_r+0x38>
     _64(0x18000001b808460e),        //ld $r2 = 1304 (0x518)[$r14];;
     _32(0x7f03f000)        //nop ;;
 |];

let _raise_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _64(0x08000000f809b7c1),        //compw.leu $r2 = $r1, 31 (0x1f);;
     _32(0xf848ffc1),        //zxwd $r18 = $r1
     _32(0xe04c0000),        //make $r19 = 0 (0x0)
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xe907f012),        //sxwd $r1 = $r18
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x8c800a82),        //cb.weqz $r2? 1db88 <_raise_r+0xd0>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _64(0x18000001b8004600),        //ld $r0 = 1304 (0x518)[$r0];;
     _32(0x08800440),        //cb.deqz $r0? 1db34 <_raise_r+0x7c>;;
     _32(0x380ef040),        //ld.xs $r3 = $r1[$r0];;
     _32(0xe1110043),        //compd.eq $r4 = $r3, 1 (0x1)
     _32(0x6009ffc3),        //compd.ne $r2 = $r3, -1 (0xffffffff);;
     _32(0x08800343),        //cb.deqz $r3? 1db34 <_raise_r+0x7c>;;
     _32(0x08000144),        //cb.dnez $r4? 1db18 <_raise_r+0x60>;;
     _32(0x08800582),        //cb.deqz $r2? 1db60 <_raise_r+0xa8>;;
     _32(0x8fdc0003),        //icall $r3
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x274ff040),        //sd.xs $r1[$r0] = $r19;;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x980000ab),        //call 1dde0 <_getpid_r>
     _32(0x6a00000e),        //copyd $r0 = $r14;;
     _32(0xfa080012),        //copyw $r2 = $r18
     _32(0xfa040000),        //copyw $r1 = $r0
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x1000007f),        //goto 1dd58 <_kill_r>;;
     _32(0xe0000016),        //make $r0 = 22 (0x16)
     _32(0x604c0001),        //make $r19 = 1 (0x1);;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x2601000e),        //sw 0 (0x0)[$r14] = $r0;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0xe0000016),        //make $r0 = 22 (0x16)
     _64(0x083fffffe04cffc0),        //make $r19 = 4294967295 (0xffffffff);;
     _32(0x97ffffe1),        //goto 1db18 <_raise_r+0x60>
     _32(0x2601000e),        //sw 0 (0x0)[$r14] = $r0;;
     _32(0x7f03f000)        //nop ;;
 |];

let __sigtramp_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _64(0x08000000f809b7c1),        //compw.leu $r2 = $r1, 31 (0x1f);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xf848ffc1),        //zxwd $r18 = $r1
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x8c800802),        //cb.weqz $r2? 1dc40 <__sigtramp_r+0xa0>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _64(0x18000001b8084600),        //ld $r2 = 1304 (0x518)[$r0];;
     _32(0x088005c2),        //cb.deqz $r2? 1dc2c <__sigtramp_r+0x8c>;;
     _32(0xe90ff012),        //sxwd $r3 = $r18
     _32(0xf4118092),        //addx8wd $r4 = $r18, $r2
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x380af0c2),        //ld.xs $r2 = $r3[$r2];;
     _32(0x6105ffc2),        //compd.eq $r1 = $r2, -1 (0xffffffff);;
     _32(0x088002c2),        //cb.deqz $r2? 1dc14 <__sigtramp_r+0x74>;;
     _32(0x88000281),        //cb.dnez $r1? 1dc14 <__sigtramp_r+0x74>
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0xe1050042),        //compd.eq $r1 = $r2, 1 (0x1)
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x08000181),        //cb.dnez $r1? 1dc14 <__sigtramp_r+0x74>;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x7a000012),        //copyw $r0 = $r18;;
     _32(0x8fdc0002),        //icall $r2
     _32(0x27050004),        //sd 0 (0x0)[$r4] = $r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x1fffff5b),        //call 1d998 <_init_signal_r.part.0>;;
     _32(0x0c000100),        //cb.wnez $r0? 1dc40 <__sigtramp_r+0xa0>;;
     _32(0x97ffffe8),        //goto 1dbd4 <__sigtramp_r+0x34>
     _64(0x18000001b808460e),        //ld $r2 = 1304 (0x518)[$r14];;
     _32(0x97fffff5),        //goto 1dc14 <__sigtramp_r+0x74>
     _64(0x003fffffe000ffc0),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0x7f03f000)        //nop ;;
 |];

let raise: list_I = 
 [|
     _32(0xfa040000),        //copyw $r1 = $r0
     _96(0x0800000088000114e0081000),        //make $r2 = 282688 (0x45040);;
     _32(0x97ffff96),        //goto 1dab8 <_raise_r>
     _32(0x38000002)        //ld $r0 = 0 (0x0)[$r2];;
 |];

let signal: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x0800000088000114e00c1000),        //make $r3 = 282688 (0x45040);;
     _32(0xea380001),        //copyd $r14 = $r1
     _64(0xa739000cf809b7c0),        //compw.leu $r2 = $r0, 31 (0x1f)
     _32(0x08000000),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xf848ffc0),        //zxwd $r18 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x8c800382),        //cb.weqz $r2? 1dcd0 <signal+0x68>
     _32(0x384c0003),        //ld $r19 = 0 (0x0)[$r3];;
     _64(0x18000001b8084613),        //ld $r2 = 1304 (0x518)[$r19];;
     _32(0x088004c2),        //cb.deqz $r2? 1dcf4 <signal+0x8c>;;
     _32(0x6907f012),        //sxwd $r1 = $r18;;
     _32(0x3802f042),        //ld.xs $r0 = $r1[$r2];;
     _32(0x273bf042),        //sd.xs $r1[$r2] = $r14;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0xe0040016),        //make $r1 = 22 (0x16)
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x26050013),        //sw 0 (0x0)[$r19] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x9fffff29),        //call 1d998 <_init_signal_r.part.0>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xfa040000),        //copyw $r1 = $r0
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x0c7ffb41),        //cb.wnez $r1? 1dcb8 <signal+0x50>;;
     _32(0x97ffffe9),        //goto 1dcac <signal+0x44>
     _64(0x18000001b8084613),        //ld $r2 = 1304 (0x518)[$r19];;
     _32(0x7f03f000)        //nop ;;
 |];

let _init_signal: list_I = 
 [|
     _96(0x0000000080000114e0001000),        //make $r0 = 282688 (0x45040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _64(0x18000001b8044600),        //ld $r1 = 1304 (0x518)[$r0];;
     _32(0x088000c1),        //cb.deqz $r1? 1dd3c <_init_signal+0x24>;;
     _32(0x8fd00000),        //ret 
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x17ffff17)        //goto 1d998 <_init_signal_r.part.0>;;
 |];

let __sigtramp: list_I = 
 [|
     _32(0xfa040000),        //copyw $r1 = $r0
     _96(0x0800000088000114e0081000),        //make $r2 = 282688 (0x45040);;
     _32(0x97ffff94),        //goto 1dba0 <__sigtramp_r>
     _32(0x38000002)        //ld $r0 = 0 (0x0)[$r2];;
 |];

let _kill_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x780cffc1),        //zxwd $r3 = $r1;;
     _32(0xe0100000),        //make $r4 = 0 (0x0)
     _32(0xfa040002),        //copyw $r1 = $r2
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa000003),        //copyw $r0 = $r3
     _96(0x88000133a749040ce0482e00),        //make $r18 = 314552 (0x4ccb8)
     _32(0x08000000),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980006f5),        //call 1f960 <_kill>
     _32(0x26110012),        //sw 0 (0x0)[$r18] = $r4;;
     _64(0x07fffffff005b7c0),        //compw.ne $r1 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c8001c1),        //cb.weqz $r1? 1ddb8 <_kill_r+0x60>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x30040012),        //lwz $r1 = 0 (0x0)[$r18];;
     _32(0x08fffe41),        //cb.deqz $r1? 1dda0 <_kill_r+0x48>;;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let _getpid_r: list_I = 
 [|
     _32(0x100006ec),        //goto 1f990 <_getpid>;;
     _32(0x00000000)        //errop ;;
 |];

let _malloc_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0xe14805c1),        //addd $r18 = $r1, 23 (0x17)
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xe9090b92),        //compd.gtu $r2 = $r18, 46 (0x2e)
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2855060c),        //so 24 (0x18)[$r12] = $r20r21r22r23;;
     _32(0x28650e0c),        //so 56 (0x38)[$r12] = $r24r25r26r27;;
     _32(0x88000982),        //cb.dnez $r2? 1dea4 <_malloc_r+0xbc>
     _32(0x2741160c),        //sd 88 (0x58)[$r12] = $r16;;
     _32(0xe9050801),        //compd.gtu $r1 = $r1, 32 (0x20)
     _32(0x60480020),        //make $r18 = 32 (0x20);;
     _32(0x08002ac1),        //cb.dnez $r1? 1e0c8 <_malloc_r+0x2e0>;;
     _32(0x18000258),        //call 1e780 <__malloc_lock>;;
     _32(0xe0000050),        //make $r0 = 80 (0x50)
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _96(0x80000116b8386600e1086400),        //addd $r2 = $r0, 285072 (0x45990)
     _96(0x180000009800011680000000),        //ld $r14 = 285080 (0x45998)[$r0];;
     _32(0x6104fc02),        //addd $r1 = $r2, -16 (0xfffffff0);;
     _32(0x7005a04e),        //compd.ne $r1 = $r14, $r1;;
     _32(0x08802a81),        //cb.deqz $r1? 1e0f4 <_malloc_r+0x30c>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x3804020e),        //ld $r1 = 8 (0x8)[$r14];;
     _32(0x3808060e),        //ld $r2 = 24 (0x18)[$r14];;
     _32(0x380c040e),        //ld $r3 = 16 (0x10)[$r14];;
     _32(0x6804ff01),        //andd $r1 = $r1, -4 (0xfffffffc);;
     _32(0xf105004e),        //addd $r1 = $r14, $r1
     _32(0x27090603),        //sd 24 (0x18)[$r3] = $r2;;
     _32(0x270d0402),        //sd 16 (0x10)[$r2] = $r3;;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x6a080042),        //ord $r2 = $r2, 1 (0x1);;
     _32(0x98000246),        //call 1e790 <__malloc_unlock>
     _32(0x27090201),        //sd 8 (0x8)[$r1] = $r2;;
     _32(0xe100040e),        //addd $r0 = $r14, 16 (0x10)
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0x6848fc12),        //andd $r18 = $r18, -16 (0xfffffff0);;
     _32(0xf905a481),        //compd.gtu $r1 = $r1, $r18
     _64(0x081fffffe909ffd2),        //compd.gtu $r2 = $r18, 2147483647 (0x7fffffff);;
     _32(0x7a051042),        //orw $r1 = $r2, $r1;;
     _32(0x0c002101),        //cb.wnez $r1? 1e0c8 <_malloc_r+0x2e0>;;
     _32(0x18000231),        //call 1e780 <__malloc_lock>;;
     _32(0xe9017dd2),        //compd.gtu $r0 = $r18, 503 (0x1f7)
     _32(0xe0100400),        //make $r4 = 1024 (0x400)
     _32(0xe0140040),        //make $r5 = 64 (0x40)
     _32(0x6018003f),        //make $r6 = 63 (0x3f);;
     _32(0x088065c0),        //cb.deqz $r0? 1e52c <_malloc_r+0x744>;;
     _32(0x7b022252),        //srld $r0 = $r18, 9 (0x9);;
     _32(0x08004700),        //cb.dnez $r0? 1e348 <_malloc_r+0x560>;;
     _96(0x80000116b8386604e1106004),        //addd $r4 = $r4, 285056 (0x45980)
     _96(0x180000009800011680000000),        //ld $r14 = 285080 (0x45998)[$r4];;
     _32(0x7101a384),        //compd.eq $r0 = $r4, $r14;;
     _32(0x08800180),        //cb.deqz $r0? 1df10 <_malloc_r+0x128>;;
     _32(0x1000000b),        //goto 1df28 <_malloc_r+0x140>;;
     _32(0x09804e02),        //cb.dgez $r2? 1e3e0 <_malloc_r+0x5f8>;;
     _32(0x3838060e),        //ld $r14 = 24 (0x18)[$r14];;
     _32(0x7005a384),        //compd.ne $r1 = $r4, $r14;;
     _32(0x088001c1),        //cb.deqz $r1? 1df28 <_malloc_r+0x140>;;
     _32(0x3804020e),        //ld $r1 = 8 (0x8)[$r14];;
     _32(0x6804ff01),        //andd $r1 = $r1, -4 (0xfffffffc);;
     _32(0x75090052),        //sbfd $r2 = $r18, $r1;;
     _32(0x650d07c2),        //compd.gt $r3 = $r2, 31 (0x1f);;
     _32(0x08fffe03),        //cb.deqz $r3? 1df00 <_malloc_r+0x118>;;
     _32(0x6a140006),        //copyd $r5 = $r6;;
     _96(0x0000000080000116e0506400),        //make $r20 = 285072 (0x45990);;
     _32(0xe1040414),        //addd $r1 = $r20, 16 (0x10)
     _32(0x38380814),        //ld $r14 = 32 (0x20)[$r20];;
     _32(0x7001a04e),        //compd.ne $r0 = $r14, $r1;;
     _32(0x08801e80),        //cb.deqz $r0? 1e128 <_malloc_r+0x340>;;
     _32(0x3808020e),        //ld $r2 = 8 (0x8)[$r14];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x750d0092),        //sbfd $r3 = $r18, $r2;;
     _32(0x640107c3),        //compd.le $r0 = $r3, 31 (0x1f);;
     _32(0x08805f40),        //cb.deqz $r0? 1e548 <_malloc_r+0x760>;;
     _32(0xe9017fc2),        //compd.gtu $r0 = $r2, 511 (0x1ff)
     _32(0x27050a14),        //sd 40 (0x28)[$r20] = $r1;;
     _32(0x89804103),        //cb.dgez $r3? 1e370 <_malloc_r+0x588>
     _32(0x27050814),        //sd 32 (0x20)[$r20] = $r1;;
     _32(0x08004c40),        //cb.dnez $r0? 1e42c <_malloc_r+0x644>;;
     _32(0xe60b20c2),        //extfz $r2 = $r2, 34 (0x22), 3 (0x3)
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x380c0214),        //ld $r3 = 8 (0x8)[$r20];;
     _32(0xf1040042),        //addw $r1 = $r2, 1 (0x1)
     _32(0x7a0a3082),        //sraw $r2 = $r2, 2 (0x2);;
     _32(0xf9063041),        //sllw $r1 = $r1, 1 (0x1)
     _32(0x790a6080),        //slld $r2 = $r0, $r2;;
     _32(0xe903f001),        //sxwd $r0 = $r1
     _32(0x7a0900c2),        //ord $r2 = $r2, $r3;;
     _32(0xf90220c0),        //slld $r0 = $r0, 3 (0x3)
     _32(0x27090214),        //sd 8 (0x8)[$r20] = $r2;;
     _96(0x80000116b8046400e10c6000),        //addd $r3 = $r0, 285056 (0x45980)
     _96(0x180000009800011680000000),        //ld $r1 = 285072 (0x45990)[$r0];;
     _32(0x270d060e),        //sd 24 (0x18)[$r14] = $r3;;
     _32(0x2705040e),        //sd 16 (0x10)[$r14] = $r1;;
     _96(0x1800000098000116a7396400),        //sd 285072 (0x45990)[$r0] = $r14;;
     _32(0x27390601),        //sd 24 (0x18)[$r1] = $r14;;
     _32(0xfa023085),        //sraw $r0 = $r5, 2 (0x2)
     _32(0x601c0001),        //make $r7 = 1 (0x1);;
     _32(0x791e6007),        //slld $r7 = $r7, $r0;;
     _32(0x7901a087),        //compd.gtu $r0 = $r7, $r2;;
     _32(0x08001680),        //cb.dnez $r0? 1e140 <_malloc_r+0x358>;;
     _32(0x78010087),        //andd $r0 = $r7, $r2;;
     _32(0x080002c0),        //cb.dnez $r0? 1e00c <_malloc_r+0x224>;;
     _32(0xf91e2047),        //slld $r7 = $r7, 1 (0x1)
     _32(0x7814ff05),        //andw $r5 = $r5, -4 (0xfffffffc);;
     _32(0xf8010087),        //andd $r0 = $r7, $r2
     _32(0x71140105),        //addw $r5 = $r5, 4 (0x4);;
     _32(0x7814ffc5),        //zxwd $r5 = $r5;;
     _32(0x08000140),        //cb.dnez $r0? 1e00c <_malloc_r+0x224>;;
     _32(0xf91e2047),        //slld $r7 = $r7, 1 (0x1)
     _32(0x71140105),        //addw $r5 = $r5, 4 (0x4);;
     _32(0x78010087),        //andd $r0 = $r7, $r2;;
     _32(0x08ffff40),        //cb.deqz $r0? 1dffc <_malloc_r+0x214>;;
     _96(0x0000000080000116e0286400),        //make $r10 = 285072 (0x45990);;
     _32(0xf1000045),        //addw $r0 = $r5, 1 (0x1)
     _32(0x6a240005),        //copyd $r9 = $r5;;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _64(0x07fffffff4018400),        //addx8wd $r0 = $r0, 4294967280 (0xfffffff0);;
     _96(0x0000000080000116e1006400),        //addd $r0 = $r0, 285072 (0x45990);;
     _32(0x6a200000),        //copyd $r8 = $r0;;
     _32(0x38040608),        //ld $r1 = 24 (0x18)[$r8];;
     _32(0x7109a048),        //compd.eq $r2 = $r8, $r1;;
     _32(0x08800102),        //cb.deqz $r2? 1e054 <_malloc_r+0x26c>;;
     _32(0x10000128),        //goto 1e4e8 <_malloc_r+0x700>;;
     _32(0x09804b43),        //cb.dgez $r3? 1e500 <_malloc_r+0x718>;;
     _32(0x08804986),        //cb.deqz $r6? 1e4e8 <_malloc_r+0x700>;;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x38040601),        //ld $r1 = 24 (0x18)[$r1];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0xf50d0092),        //sbfd $r3 = $r18, $r2
     _32(0x7019a048),        //compd.ne $r6 = $r8, $r1;;
     _32(0x641107c3),        //compd.le $r4 = $r3, 31 (0x1f);;
     _32(0x087ffdc4),        //cb.dnez $r4? 1e04c <_malloc_r+0x264>;;
     _32(0xea000052),        //ord $r0 = $r18, 1 (0x1)
     _32(0xf149048e),        //addd $r18 = $r14, $r18
     _96(0x90000116b818040ee0106400),        //make $r4 = 285072 (0x45990)
     _32(0x10000000),        //ld $r6 = 16 (0x10)[$r14];;
     _32(0xe1140404),        //addd $r5 = $r4, 16 (0x10)
     _32(0xea1c0043),        //ord $r7 = $r3, 1 (0x1)
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x2701020e),        //sd 8 (0x8)[$r14] = $r0;;
     _32(0x27050606),        //sd 24 (0x18)[$r6] = $r1;;
     _32(0x27190401),        //sd 16 (0x10)[$r1] = $r6;;
     _32(0x27490a04),        //sd 40 (0x28)[$r4] = $r18;;
     _32(0x27490804),        //sd 32 (0x20)[$r4] = $r18;;
     _32(0x27150612),        //sd 24 (0x18)[$r18] = $r5;;
     _32(0x27150412),        //sd 16 (0x10)[$r18] = $r5;;
     _32(0x271d0212),        //sd 8 (0x8)[$r18] = $r7;;
     _32(0x980001b6),        //call 1e790 <__malloc_unlock>
     _32(0x270fe08e),        //sd $r2[$r14] = $r3;;
     _32(0x90000005),        //goto 1e0d4 <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0xe004000c),        //make $r1 = 12 (0xc)
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26050013),        //sw 0 (0x0)[$r19] = $r1;;
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0xf1140085),        //addw $r5 = $r5, 2 (0x2)
     _96(0x88000116b8386a00e0506400),        //make $r20 = 285072 (0x45990)
     _96(0x180000009800011688000000),        //ld $r14 = 285096 (0x459a8)[$r0];;
     _32(0x61040414),        //addd $r1 = $r20, 16 (0x10);;
     _32(0x7109a382),        //compd.eq $r2 = $r2, $r14;;
     _32(0x08ffd382),        //cb.deqz $r2? 1de50 <_malloc_r+0x68>;;
     _32(0x38380814),        //ld $r14 = 32 (0x20)[$r20];;
     _32(0x7001a04e),        //compd.ne $r0 = $r14, $r1;;
     _32(0x087fe200),        //cb.dnez $r0? 1df44 <_malloc_r+0x15c>;;
     _32(0xfa023085),        //sraw $r0 = $r5, 2 (0x2)
     _32(0xe01c0001),        //make $r7 = 1 (0x1)
     _32(0x38080214),        //ld $r2 = 8 (0x8)[$r20];;
     _32(0x791e6007),        //slld $r7 = $r7, $r0;;
     _32(0x7901a087),        //compd.gtu $r0 = $r7, $r2;;
     _32(0x08ffea00),        //cb.deqz $r0? 1dfdc <_malloc_r+0x1f4>;;
     _96(0x80000116e06c6000e0646400),        //make $r25 = 285072 (0x45990)
     _96(0x080000008800011680000000),        //make $r27 = 285056 (0x45980);;
     _96(0x80000122b8380419e0687000),        //make $r26 = 297408 (0x489c0)
     _32(0x00000000),        //ld $r14 = 16 (0x10)[$r25];;
     _32(0x3858020e),        //ld $r22 = 8 (0x8)[$r14];;
     _32(0x6858ff16),        //andd $r22 = $r22, -4 (0xfffffffc);;
     _32(0xf5010592),        //sbfd $r0 = $r18, $r22
     _32(0xf909a592),        //compd.gtu $r2 = $r18, $r22
     _32(0x7161058e),        //addd $r24 = $r14, $r22;;
     _32(0x640507c0),        //compd.le $r1 = $r0, 31 (0x1f);;
     _32(0x7a051081),        //orw $r1 = $r1, $r2;;
     _32(0x0c8020c1),        //cb.weqz $r1? 1e390 <_malloc_r+0x5a8>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _96(0x88000122b808001be0047e00),        //make $r1 = 297464 (0x489f8)
     _32(0x08000000),        //ld $r2 = 0 (0x0)[$r27];;
     _32(0x38540001),        //ld $r21 = 0 (0x0)[$r1];;
     _32(0x6009ffc2),        //compd.ne $r2 = $r2, -1 (0xffffffff);;
     _32(0x71550552),        //addd $r21 = $r18, $r21;;
     _32(0xe1540815),        //addd $r21 = $r21, 32 (0x20)
     _64(0x08000004e10407d5),        //addd $r1 = $r21, 4127 (0x101f);;
     _64(0x07fffffce8040001),        //andd $r1 = $r1, -4096 (0xfffffffffffff000);;
     _32(0x70560042),        //cmoved.dnez $r2? $r21 = $r1;;
     _32(0x980001d0),        //call 1e900 <_sbrk_r>
     _32(0x6a040015),        //copyd $r1 = $r21;;
     _32(0xea5c0000),        //copyd $r23 = $r0
     _32(0x6001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff);;
     _32(0x7905a5d8),        //compd.gtu $r1 = $r24, $r23;;
     _32(0x08804640),        //cb.deqz $r0? 1e638 <_malloc_r+0x850>;;
     _96(0x0000000080000116e0006400),        //make $r0 = 285072 (0x45990);;
     _32(0x7001a00e),        //compd.ne $r0 = $r14, $r0;;
     _32(0xf8011040),        //andw $r0 = $r0, $r1
     _32(0x7005a5d8),        //compd.ne $r1 = $r24, $r23;;
     _32(0x0c004480),        //cb.wnez $r0? 1e638 <_malloc_r+0x850>;;
     _32(0x3000001a),        //lwz $r0 = 0 (0x0)[$r26];;
     _32(0xf1091540),        //addw $r2 = $r0, $r21
     _32(0x71011540),        //addw $r0 = $r0, $r21;;
     _32(0x88804101),        //cb.deqz $r1? 1e610 <_malloc_r+0x828>
     _32(0x2609001a),        //sw 0 (0x0)[$r26] = $r2;;
     _32(0x3800001b),        //ld $r0 = 0 (0x0)[$r27];;
     _32(0x6001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff);;
     _32(0x08804200),        //cb.deqz $r0? 1e630 <_malloc_r+0x848>;;
     _32(0x750105d8),        //sbfd $r0 = $r24, $r23;;
     _32(0x71011080),        //addw $r0 = $r0, $r2;;
     _32(0x2601001a),        //sw 0 (0x0)[$r26] = $r0;;
     _32(0xe80003d7),        //andd $r0 = $r23, 15 (0xf)
     _32(0x60601000),        //make $r24 = 4096 (0x1000);;
     _32(0x08800140),        //cb.deqz $r0? 1e23c <_malloc_r+0x454>;;
     _32(0xe5040400),        //sbfd $r1 = $r0, 16 (0x10)
     _64(0x08000004e5600400),        //sbfd $r24 = $r0, 4112 (0x1010);;
     _32(0x715d0057),        //addd $r23 = $r23, $r1;;
     _32(0xf1050557),        //addd $r1 = $r23, $r21
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x60540001),        //make $r21 = 1 (0x1);;
     _64(0x00000003e804ffc1),        //andd $r1 = $r1, 4095 (0xfff);;
     _32(0x75610601),        //sbfd $r24 = $r1, $r24;;
     _32(0x980001ab),        //call 1e900 <_sbrk_r>
     _32(0x6a040018),        //copyd $r1 = $r24;;
     _32(0xe109ffc0),        //compd.eq $r2 = $r0, -1 (0xffffffff)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x08000142),        //cb.dnez $r2? 1e278 <_malloc_r+0x490>;;
     _32(0xf5090017),        //sbfd $r2 = $r23, $r0
     _32(0x7804ffd8),        //zxwd $r1 = $r24;;
     _32(0x71550602),        //addd $r21 = $r2, $r24;;
     _32(0x6a540055),        //ord $r21 = $r21, 1 (0x1);;
     _32(0xf151a50e),        //compd.eq $r20 = $r14, $r20
     _32(0xe0100009),        //make $r4 = 9 (0x9)
     _96(0x90000116b000001ae0606400),        //make $r24 = 285072 (0x45990)
     _32(0x10000000),        //lwz $r0 = 0 (0x0)[$r26];;
     _32(0x275d0418),        //sd 16 (0x10)[$r24] = $r23;;
     _32(0x27550217),        //sd 8 (0x8)[$r23] = $r21;;
     _32(0xf1091040),        //addw $r2 = $r0, $r1
     _32(0xf1011040),        //addw $r0 = $r0, $r1
     _32(0x690507d6),        //compd.gtu $r1 = $r22, 31 (0x1f);;
     _32(0x88004154),        //cb.dnez $r20? 1e6b8 <_malloc_r+0x8d0>
     _32(0x2609001a),        //sw 0 (0x0)[$r26] = $r2;;
     _32(0x08804141),        //cb.deqz $r1? 1e6c0 <_malloc_r+0x8d8>;;
     _32(0xe104fa16),        //addd $r1 = $r22, -24 (0xffffffe8)
     _32(0x3808020e),        //ld $r2 = 8 (0x8)[$r14];;
     _32(0x6804fc01),        //andd $r1 = $r1, -16 (0xfffffff0);;
     _32(0xf10d004e),        //addd $r3 = $r14, $r1
     _32(0x691507c1),        //compd.gtu $r5 = $r1, 31 (0x1f);;
     _32(0x68080042),        //andd $r2 = $r2, 1 (0x1);;
     _32(0x7a050042),        //ord $r1 = $r2, $r1;;
     _32(0x2705020e),        //sd 8 (0x8)[$r14] = $r1;;
     _32(0x27110203),        //sd 8 (0x8)[$r3] = $r4;;
     _32(0x88004545),        //cb.dnez $r5? 1e728 <_malloc_r+0x940>
     _32(0x27110403),        //sd 16 (0x10)[$r3] = $r4;;
     _32(0xea380017),        //copyd $r14 = $r23
     _32(0x38540217),        //ld $r21 = 8 (0x8)[$r23];;
     _32(0xe903f000),        //sxwd $r0 = $r0
     _96(0x0800000088000122e0087c00),        //make $r2 = 297456 (0x489f0);;
     _32(0x38040002),        //ld $r1 = 0 (0x0)[$r2];;
     _32(0x7805a040),        //compd.leu $r1 = $r0, $r1;;
     _32(0x08000081),        //cb.dnez $r1? 1e304 <_malloc_r+0x51c>;;
     _32(0x27010002),        //sd 0 (0x0)[$r2] = $r0;;
     _96(0x0000000080000122e0087a00),        //make $r2 = 297448 (0x489e8);;
     _32(0x38040002),        //ld $r1 = 0 (0x0)[$r2];;
     _32(0x7805a040),        //compd.leu $r1 = $r0, $r1;;
     _32(0x08000081),        //cb.dnez $r1? 1e320 <_malloc_r+0x538>;;
     _32(0x27010002),        //sd 0 (0x0)[$r2] = $r0;;
     _32(0x6854ff15),        //andd $r21 = $r21, -4 (0xfffffffc);;
     _32(0xf5010552),        //sbfd $r0 = $r18, $r21
     _32(0x7955a552),        //compd.gtu $r21 = $r18, $r21;;
     _32(0x640507c0),        //compd.le $r1 = $r0, 31 (0x1f);;
     _32(0x7a551055),        //orw $r21 = $r21, $r1;;
     _32(0x0c8005d5),        //cb.weqz $r21? 1e390 <_malloc_r+0x5a8>;;
     _32(0x98000116),        //call 1e790 <__malloc_unlock>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x97ffff65),        //goto 1e0d4 <_malloc_r+0x2ec>
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x69050100),        //compd.gtu $r1 = $r0, 4 (0x4);;
     _32(0x080016c1),        //cb.dnez $r1? 1e4b8 <_malloc_r+0x6d0>;;
     _32(0x66175192),        //extfz $r5 = $r18, 37 (0x25), 6 (0x6);;
     _32(0xf1100e45),        //addw $r4 = $r5, 57 (0x39)
     _32(0xf1180e05),        //addw $r6 = $r5, 56 (0x38)
     _32(0x71140e45),        //addw $r5 = $r5, 57 (0x39);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffedd),        //goto 1dedc <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xf109008e),        //addd $r2 = $r14, $r2
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38040202),        //ld $r1 = 8 (0x8)[$r2];;
     _32(0x6a040041),        //ord $r1 = $r1, 1 (0x1);;
     _32(0x98000104),        //call 1e790 <__malloc_unlock>
     _32(0x27050202),        //sd 8 (0x8)[$r2] = $r1;;
     _32(0x97ffff53),        //goto 1e0d4 <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0xea0c0052),        //ord $r3 = $r18, 1 (0x1)
     _32(0xf149048e),        //addd $r18 = $r14, $r18
     _32(0xea040040),        //ord $r1 = $r0, 1 (0x1)
     _96(0x1800000098000116e0086400),        //make $r2 = 285072 (0x45990);;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x270d020e),        //sd 8 (0x8)[$r14] = $r3;;
     _32(0x27490402),        //sd 16 (0x10)[$r2] = $r18;;
     _32(0x980000f7),        //call 1e790 <__malloc_unlock>
     _32(0x27050212),        //sd 8 (0x8)[$r18] = $r1;;
     _32(0xe100040e),        //addd $r0 = $r14, 16 (0x10)
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0xf105004e),        //addd $r1 = $r14, $r1
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x380c060e),        //ld $r3 = 24 (0x18)[$r14];;
     _32(0x3810040e),        //ld $r4 = 16 (0x10)[$r14];;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x270d0604),        //sd 24 (0x18)[$r4] = $r3;;
     _32(0x27110403),        //sd 16 (0x10)[$r3] = $r4;;
     _32(0x6a080042),        //ord $r2 = $r2, 1 (0x1);;
     _32(0x980000e4),        //call 1e790 <__malloc_unlock>
     _32(0x27090201),        //sd 8 (0x8)[$r1] = $r2;;
     _32(0xe100040e),        //addd $r0 = $r14, 16 (0x10)
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0x7b062242),        //srld $r1 = $r2, 9 (0x9);;
     _32(0x69010101),        //compd.gtu $r0 = $r1, 4 (0x4);;
     _32(0x088014c0),        //cb.deqz $r0? 1e580 <_malloc_r+0x798>;;
     _32(0x69010501),        //compd.gtu $r0 = $r1, 20 (0x14);;
     _32(0x08002300),        //cb.dnez $r0? 1e66c <_malloc_r+0x884>;;
     _32(0xf1001701),        //addw $r0 = $r1, 92 (0x5c)
     _32(0x710416c1),        //addw $r1 = $r1, 91 (0x5b);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _96(0x80000116b80c6400e1006000),        //addd $r0 = $r0, 285056 (0x45980)
     _96(0x180000009800011680000000),        //ld $r3 = 285072 (0x45990)[$r0];;
     _32(0x7011a0c0),        //compd.ne $r4 = $r0, $r3;;
     _32(0x08801d44),        //cb.deqz $r4? 1e644 <_malloc_r+0x85c>;;
     _32(0x38040203),        //ld $r1 = 8 (0x8)[$r3];;
     _32(0x6804ff01),        //andd $r1 = $r1, -4 (0xfffffffc);;
     _32(0x7905a081),        //compd.gtu $r1 = $r1, $r2;;
     _32(0x08800101),        //cb.deqz $r1? 1e490 <_malloc_r+0x6a8>;;
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x7105a0c0),        //compd.eq $r1 = $r0, $r3;;
     _32(0x08fffe81),        //cb.deqz $r1? 1e474 <_malloc_r+0x68c>;;
     _96(0x80000116b8000603e0046400),        //make $r1 = 285072 (0x45990)
     _32(0x00000000),        //ld $r0 = 24 (0x18)[$r3];;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x2701060e),        //sd 24 (0x18)[$r14] = $r0;;
     _32(0x270d040e),        //sd 16 (0x10)[$r14] = $r3;;
     _32(0x27390400),        //sd 16 (0x10)[$r0] = $r14;;
     _32(0x97fffec6),        //goto 1dfc8 <_malloc_r+0x1e0>
     _32(0x27390603),        //sd 24 (0x18)[$r3] = $r14;;
     _32(0x69050500),        //compd.gtu $r1 = $r0, 20 (0x14);;
     _32(0x08800e01),        //cb.deqz $r1? 1e59c <_malloc_r+0x7b4>;;
     _32(0x69051500),        //compd.gtu $r1 = $r0, 84 (0x54);;
     _32(0x08001cc1),        //cb.dnez $r1? 1e690 <_malloc_r+0x8a8>;;
     _32(0x6617b312),        //extfz $r5 = $r18, 43 (0x2b), 12 (0xc);;
     _32(0xf1101bc5),        //addw $r4 = $r5, 111 (0x6f)
     _32(0xf1181b85),        //addw $r6 = $r5, 110 (0x6e)
     _32(0x71141bc5),        //addw $r5 = $r5, 111 (0x6f);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffe7f),        //goto 1dedc <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xf1240049),        //addw $r9 = $r9, 1 (0x1)
     _32(0x61200408),        //addd $r8 = $r8, 16 (0x10);;
     _32(0xf80400c9),        //andw $r1 = $r9, 3 (0x3)
     _32(0x7824ffc9),        //zxwd $r9 = $r9;;
     _32(0x0c7fb441),        //cb.wnez $r1? 1e03c <_malloc_r+0x254>;;
     _32(0x10000032),        //goto 1e5c4 <_malloc_r+0x7dc>;;
     _32(0xf109008e),        //addd $r2 = $r14, $r2
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x3810040e),        //ld $r4 = 16 (0x10)[$r14];;
     _32(0x380c0202),        //ld $r3 = 8 (0x8)[$r2];;
     _32(0x6a0c0043),        //ord $r3 = $r3, 1 (0x1);;
     _32(0x270d0202),        //sd 8 (0x8)[$r2] = $r3;;
     _32(0x27050604),        //sd 24 (0x18)[$r4] = $r1;;
     _32(0x9800009d),        //call 1e790 <__malloc_unlock>
     _32(0x27110401),        //sd 16 (0x10)[$r1] = $r4;;
     _32(0x97fffeec),        //goto 1e0d4 <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0x7b1620d2),        //srld $r5 = $r18, 3 (0x3);;
     _32(0xf1000045),        //addw $r0 = $r5, 1 (0x1)
     _32(0x7814ffc5),        //zxwd $r5 = $r5;;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97fffe3b),        //goto 1de2c <_malloc_r+0x44>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0xea140052),        //ord $r5 = $r18, 1 (0x1)
     _32(0xf149048e),        //addd $r18 = $r14, $r18
     _32(0xea100043),        //ord $r4 = $r3, 1 (0x1)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x2715020e),        //sd 8 (0x8)[$r14] = $r5;;
     _32(0x27490a14),        //sd 40 (0x28)[$r20] = $r18;;
     _32(0x27490814),        //sd 32 (0x20)[$r20] = $r18;;
     _32(0x27050612),        //sd 24 (0x18)[$r18] = $r1;;
     _32(0x27050412),        //sd 16 (0x10)[$r18] = $r1;;
     _32(0x27110212),        //sd 8 (0x8)[$r18] = $r4;;
     _32(0x98000088),        //call 1e790 <__malloc_unlock>
     _32(0x270fe08e),        //sd $r2[$r14] = $r3;;
     _32(0x97fffed7),        //goto 1e0d4 <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0x66075182),        //extfz $r1 = $r2, 37 (0x25), 6 (0x6);;
     _32(0xf1000e41),        //addw $r0 = $r1, 57 (0x39)
     _32(0x71040e01),        //addw $r1 = $r1, 56 (0x38);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffffb0),        //goto 1e454 <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0xf1101700),        //addw $r4 = $r0, 92 (0x5c)
     _32(0xf11816c0),        //addw $r6 = $r0, 91 (0x5b)
     _32(0x71141700),        //addw $r5 = $r0, 92 (0x5c);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffe4b),        //goto 1dedc <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x38040400),        //ld $r1 = 16 (0x10)[$r0];;
     _32(0x7105a001),        //compd.eq $r1 = $r1, $r0;;
     _32(0x08801b41),        //cb.deqz $r1? 1e774 <_malloc_r+0x98c>;;
     _32(0xf80400c5),        //andw $r1 = $r5, 3 (0x3)
     _32(0xe100fc00),        //addd $r0 = $r0, -16 (0xfffffff0)
     _32(0x7114ffc5),        //addw $r5 = $r5, -1 (0xffffffff);;
     _32(0x0c7ffe81),        //cb.wnez $r1? 1e5b8 <_malloc_r+0x7d0>;;
     _32(0x3800020a),        //ld $r0 = 8 (0x8)[$r10];;
     _32(0x7e010007),        //andnd $r0 = $r7, $r0;;
     _32(0x2701020a),        //sd 8 (0x8)[$r10] = $r0;;
     _32(0x791e2047),        //slld $r7 = $r7, 1 (0x1);;
     _32(0xe0050007),        //compd.ne $r1 = $r7, 0 (0x0)
     _32(0x7809a007),        //compd.leu $r2 = $r7, $r0;;
     _32(0x78051081),        //andw $r1 = $r1, $r2;;
     _32(0x0c000101),        //cb.wnez $r1? 1e600 <_malloc_r+0x818>;;
     _32(0x17fffed3),        //goto 1e140 <_malloc_r+0x358>;;
     _32(0xf91e2047),        //slld $r7 = $r7, 1 (0x1)
     _32(0x71240109),        //addw $r9 = $r9, 4 (0x4);;
     _32(0x78050007),        //andd $r1 = $r7, $r0;;
     _32(0x08ffff41),        //cb.deqz $r1? 1e5f8 <_malloc_r+0x810>;;
     _32(0x97fffe84),        //goto 1e018 <_malloc_r+0x230>
     _32(0x6a140009),        //copyd $r5 = $r9;;
     _64(0x00000003e804ffd8),        //andd $r1 = $r24, 4095 (0xfff);;
     _32(0x087fbf01),        //cb.dnez $r1? 1e208 <_malloc_r+0x420>;;
     _32(0xf1550556),        //addd $r21 = $r22, $r21
     _32(0x38380419),        //ld $r14 = 16 (0x10)[$r25];;
     _32(0x6a540055),        //ord $r21 = $r21, 1 (0x1);;
     _32(0x97ffff2f),        //goto 1e2e4 <_malloc_r+0x4fc>
     _32(0x2755020e),        //sd 8 (0x8)[$r14] = $r21;;
     _32(0x97fffefc),        //goto 1e220 <_malloc_r+0x438>
     _32(0x275d001b),        //sd 0 (0x0)[$r27] = $r23;;
     _32(0x38380419),        //ld $r14 = 16 (0x10)[$r25];;
     _32(0x97ffff39),        //goto 1e320 <_malloc_r+0x538>
     _32(0x3854020e),        //ld $r21 = 8 (0x8)[$r14];;
     _32(0xfa063081),        //sraw $r1 = $r1, 2 (0x2)
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _96(0x1000000090000116e0106400),        //make $r4 = 285072 (0x45990);;
     _32(0xf90a6042),        //slld $r2 = $r2, $r1
     _32(0x38180204),        //ld $r6 = 8 (0x8)[$r4];;
     _32(0x7a090182),        //ord $r2 = $r2, $r6;;
     _32(0x97ffff90),        //goto 1e4a4 <_malloc_r+0x6bc>
     _32(0x27090204),        //sd 8 (0x8)[$r4] = $r2;;
     _32(0x69011501),        //compd.gtu $r0 = $r1, 84 (0x54);;
     _32(0x080005c0),        //cb.dnez $r0? 1e6cc <_malloc_r+0x8e4>;;
     _32(0x6607b302),        //extfz $r1 = $r2, 43 (0x2b), 12 (0xc);;
     _32(0xf1001bc1),        //addw $r0 = $r1, 111 (0x6f)
     _32(0x71041b81),        //addw $r1 = $r1, 110 (0x6e);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffff73),        //goto 1e454 <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x69055500),        //compd.gtu $r1 = $r0, 340 (0x154);;
     _32(0x080005c1),        //cb.dnez $r1? 1e6f0 <_malloc_r+0x908>;;
     _32(0x6617e3d2),        //extfz $r5 = $r18, 46 (0x2e), 15 (0xf);;
     _32(0xf1101e05),        //addw $r4 = $r5, 120 (0x78)
     _32(0xf1181dc5),        //addw $r6 = $r5, 119 (0x77)
     _32(0x71141e05),        //addw $r5 = $r5, 120 (0x78);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffe0b),        //goto 1dedc <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x97ffff0b),        //goto 1e2e4 <_malloc_r+0x4fc>
     _32(0x6a380017),        //copyd $r14 = $r23;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x97ffff1d),        //goto 1e338 <_malloc_r+0x550>
     _32(0x27010217),        //sd 8 (0x8)[$r23] = $r0;;
     _32(0x69015501),        //compd.gtu $r0 = $r1, 340 (0x154);;
     _32(0x08000740),        //cb.dnez $r0? 1e744 <_malloc_r+0x95c>;;
     _32(0x6607e3c2),        //extfz $r1 = $r2, 46 (0x2e), 15 (0xf);;
     _32(0xf1001e01),        //addw $r0 = $r1, 120 (0x78)
     _32(0x71041dc1),        //addw $r1 = $r1, 119 (0x77);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffff5b),        //goto 1e454 <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0xe01007f0),        //make $r4 = 2032 (0x7f0)
     _32(0xe014007f),        //make $r5 = 127 (0x7f)
     _32(0xe018007e),        //make $r6 = 126 (0x7e)
     _64(0x18000001e9015500),        //compd.gtu $r0 = $r0, 1364 (0x554);;
     _32(0x087f7d80),        //cb.dnez $r0? 1dedc <_malloc_r+0xf4>;;
     _32(0x67171492),        //extfz $r5 = $r18, 49 (0x31), 18 (0x12);;
     _32(0xf1101f45),        //addw $r4 = $r5, 125 (0x7d)
     _32(0xf1181f05),        //addw $r6 = $r5, 124 (0x7c)
     _32(0x71141f45),        //addw $r5 = $r5, 125 (0x7d);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffdef),        //goto 1dedc <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x980000ea),        //call 1ead0 <_free_r>
     _32(0xe104040e),        //addd $r1 = $r14, 16 (0x10)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38380418),        //ld $r14 = 16 (0x10)[$r24];;
     _32(0x3000001a),        //lwz $r0 = 0 (0x0)[$r26];;
     _32(0x97fffeea),        //goto 1e2e4 <_malloc_r+0x4fc>
     _32(0x3854020e),        //ld $r21 = 8 (0x8)[$r14];;
     _32(0xe00007f0),        //make $r0 = 2032 (0x7f0)
     _32(0xe004007e),        //make $r1 = 126 (0x7e)
     _64(0x10000001e90d5501),        //compd.gtu $r3 = $r1, 1364 (0x554);;
     _32(0x087fd003),        //cb.dnez $r3? 1e454 <_malloc_r+0x66c>;;
     _32(0x67071482),        //extfz $r1 = $r2, 49 (0x31), 18 (0x12);;
     _32(0xf1001f41),        //addw $r0 = $r1, 125 (0x7d)
     _32(0x71041f01),        //addw $r1 = $r1, 124 (0x7c);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffff3a),        //goto 1e454 <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x97ffff9b),        //goto 1e5e0 <_malloc_r+0x7f8>
     _32(0x3800020a),        //ld $r0 = 8 (0x8)[$r10];;
     _32(0x00000000)        //errop ;;
 |];

let __malloc_lock: list_I = 
 [|
     _32(0x90000200),        //goto 1ef80 <__libc_lock_acquire>
     _96(0x0000000080000122e0008000)        //make $r0 = 297472 (0x48a00);;
 |];

let __malloc_unlock: list_I = 
 [|
     _32(0x90000240),        //goto 1f090 <__libc_lock_release>
     _96(0x0000000080000122e0008000)        //make $r0 = 297472 (0x48a00);;
 |];

let cleanup_glue: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x08800081),        //cb.deqz $r1? 1e7c8 <cleanup_glue+0x28>;;
     _32(0x1ffffff7),        //call 1e7a0 <cleanup_glue>;;
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x100000bb)        //goto 1ead0 <_free_r>;;
 |];

let _reclaim_reent: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x0800000088000114e0041000),        //make $r1 = 282688 (0x45040);;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0xe04c0000),        //make $r19 = 0 (0x0)
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x7005a001),        //compd.ne $r1 = $r1, $r0;;
     _32(0x08800d01),        //cb.deqz $r1? 1e8e8 <_reclaim_reent+0x100>;;
     _32(0x38041e00),        //ld $r1 = 120 (0x78)[$r0];;
     _32(0x088003c1),        //cb.deqz $r1? 1e85c <_reclaim_reent+0x74>;;
     _32(0x383ae4c1),        //ld $r14 = $r19[$r1];;
     _32(0x088001ce),        //cb.deqz $r14? 1e844 <_reclaim_reent+0x5c>;;
     _32(0x980000a9),        //call 1ead0 <_free_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3838000e),        //ld $r14 = 0 (0x0)[$r14];;
     _32(0x087fff0e),        //cb.dnez $r14? 1e82c <_reclaim_reent+0x44>;;
     _32(0x38041e12),        //ld $r1 = 120 (0x78)[$r18];;
     _32(0x614c0213),        //addd $r19 = $r19, 8 (0x8);;
     _64(0x00000000e0018013),        //compd.ne $r0 = $r19, 512 (0x200);;
     _32(0x087ffd40),        //cb.dnez $r0? 1e824 <_reclaim_reent+0x3c>;;
     _32(0x9800009f),        //call 1ead0 <_free_r>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38041812),        //ld $r1 = 96 (0x60)[$r18];;
     _32(0x08800081),        //cb.deqz $r1? 1e86c <_reclaim_reent+0x84>;;
     _32(0x1800009a),        //call 1ead0 <_free_r>;;
     _64(0xb8387e12e14c8012),        //addd $r19 = $r18, 512 (0x200)
     _32(0x00000000),        //ld $r14 = 504 (0x1f8)[$r18];;
     _32(0x7101a4ce),        //compd.eq $r0 = $r14, $r19;;
     _32(0x0880020e),        //cb.deqz $r14? 1e89c <_reclaim_reent+0xb4>;;
     _32(0x080001c0),        //cb.dnez $r0? 1e89c <_reclaim_reent+0xb4>;;
     _32(0x98000093),        //call 1ead0 <_free_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3838000e),        //ld $r14 = 0 (0x0)[$r14];;
     _32(0x7001a393),        //compd.ne $r0 = $r19, $r14;;
     _32(0x087ffec0),        //cb.dnez $r0? 1e884 <_reclaim_reent+0x9c>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38042212),        //ld $r1 = 136 (0x88)[$r18];;
     _32(0x08800081),        //cb.deqz $r1? 1e8ac <_reclaim_reent+0xc4>;;
     _32(0x1800008a),        //call 1ead0 <_free_r>;;
     _32(0x30001412),        //lwz $r0 = 80 (0x50)[$r18];;
     _32(0x0c800380),        //cb.weqz $r0? 1e8e8 <_reclaim_reent+0x100>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38041612),        //ld $r1 = 88 (0x58)[$r18];;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0xea000012),        //copyd $r0 = $r18
     _64(0x18000001b8044812),        //ld $r1 = 1312 (0x520)[$r18];;
     _32(0x088001c1),        //cb.deqz $r1? 1e8e8 <_reclaim_reent+0x100>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17ffffaf),        //goto 1e7a0 <cleanup_glue>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000)        //ret ;;
 |];

let _sbrk_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0xea000001),        //copyd $r0 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _96(0x80000133a749040ce0482e00),        //make $r18 = 314552 (0x4ccb8)
     _32(0x00000000),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000399),        //call 1f790 <_sbrk>
     _32(0x26090012),        //sw 0 (0x0)[$r18] = $r2;;
     _32(0x6005ffc0),        //compd.ne $r1 = $r0, -1 (0xffffffff);;
     _32(0x088001c1),        //cb.deqz $r1? 1e954 <_sbrk_r+0x54>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x30040012),        //lwz $r1 = 0 (0x0)[$r18];;
     _32(0x08fffe41),        //cb.deqz $r1? 1e93c <_sbrk_r+0x3c>;;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000)        //ret ;;
 |];

let _malloc_trim_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849080c),        //sq 32 (0x20)[$r12] = $r18r19;;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _64(0xa7410e0ce538f7ce),        //sbfd $r14 = $r14, 4063 (0xfdf)
     _32(0x00000003),        //sd 56 (0x38)[$r12] = $r16;;
     _32(0x9fffff79),        //call 1e780 <__malloc_lock>
     _96(0x80000116a7510c0ce0506400),        //make $r20 = 285072 (0x45990)
     _32(0x00000000),        //sd 48 (0x30)[$r12] = $r20;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x38000414),        //ld $r0 = 16 (0x10)[$r20];;
     _32(0x38480200),        //ld $r18 = 8 (0x8)[$r0];;
     _32(0x6848ff12),        //andd $r18 = $r18, -4 (0xfffffffc);;
     _32(0x7139048e),        //addd $r14 = $r14, $r18;;
     _32(0x7b3a230e),        //srld $r14 = $r14, 12 (0xc);;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x793a230e),        //slld $r14 = $r14, 12 (0xc);;
     _64(0x00000003e501ffce),        //compd.gt $r0 = $r14, 4095 (0xfff);;
     _32(0x088001c0),        //cb.deqz $r0? 1e9f4 <_malloc_trim_r+0x7c>;;
     _32(0x9fffffc9),        //call 1e900 <_sbrk_r>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38040414),        //ld $r1 = 16 (0x10)[$r20];;
     _32(0x71050481),        //addd $r1 = $r1, $r18;;
     _32(0x7001a040),        //compd.ne $r0 = $r0, $r1;;
     _32(0x088002c0),        //cb.deqz $r0? 1ea1c <_malloc_trim_r+0xa4>;;
     _32(0x9fffff67),        //call 1e790 <__malloc_unlock>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x9fffffb9),        //call 1e900 <_sbrk_r>
     _32(0xe504000e),        //negd $r1 = $r14
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xe001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff)
     _32(0xf549048e),        //sbfd $r18 = $r14, $r18
     _96(0x1000000090000122e0087000),        //make $r2 = 297408 (0x489c0);;
     _32(0x6a480052),        //ord $r18 = $r18, 1 (0x1);;
     _32(0x08800400),        //cb.deqz $r0? 1ea80 <_malloc_trim_r+0x108>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x30040002),        //lwz $r1 = 0 (0x0)[$r2];;
     _32(0x380c0414),        //ld $r3 = 16 (0x10)[$r20];;
     _32(0xf539104e),        //sbfw $r14 = $r14, $r1
     _32(0x27490203),        //sd 8 (0x8)[$r3] = $r18;;
     _32(0x9fffff4e),        //call 1e790 <__malloc_unlock>
     _32(0x26390002),        //sw 0 (0x0)[$r2] = $r14;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x9fffffa0),        //call 1e900 <_sbrk_r>
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38080414),        //ld $r2 = 16 (0x10)[$r20];;
     _32(0x75050002),        //sbfd $r1 = $r2, $r0;;
     _32(0x640d07c1),        //compd.le $r3 = $r1, 31 (0x1f);;
     _32(0x087ff5c3),        //cb.dnez $r3? 1e9f4 <_malloc_trim_r+0x7c>;;
     _32(0xea040041),        //ord $r1 = $r1, 1 (0x1)
     _96(0x88000116e00c7000e0106000),        //make $r4 = 285056 (0x45980)
     _96(0x100000009000012288000000),        //make $r3 = 297408 (0x489c0);;
     _32(0x38100004),        //ld $r4 = 0 (0x0)[$r4];;
     _32(0x27050202),        //sd 8 (0x8)[$r2] = $r1;;
     _32(0x75010004),        //sbfd $r0 = $r4, $r0;;
     _32(0x97ffffcc),        //goto 1e9f4 <_malloc_trim_r+0x7c>
     _32(0x26010003),        //sw 0 (0x0)[$r3] = $r0;;
     _32(0x7f03f000)        //nop ;;
 |];

let _free_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x888014c1),        //cb.deqz $r1? 1ec34 <_free_r+0x164>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x1fffff24),        //call 1e780 <__malloc_lock>;;
     _32(0xe11cfc0e),        //addd $r7 = $r14, -16 (0xfffffff0)
     _96(0x88000116b818fe0ee0146400),        //make $r5 = 285072 (0x45990)
     _32(0x08000000),        //ld $r6 = -8 (0xfffffff8)[$r14];;
     _32(0x38100405),        //ld $r4 = 16 (0x10)[$r5];;
     _32(0x6804ff86),        //andd $r1 = $r6, -2 (0xfffffffe);;
     _32(0x710d0047),        //addd $r3 = $r7, $r1;;
     _32(0xf011a0c4),        //compd.ne $r4 = $r4, $r3
     _32(0x38080203),        //ld $r2 = 8 (0x8)[$r3];;
     _32(0x88802144),        //cb.deqz $r4? 1ed30 <_free_r+0x260>
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x8b000d86),        //cb.odd $r6? 1ebfc <_free_r+0x12c>
     _32(0xf1010083),        //addd $r0 = $r3, $r2
     _32(0x27090203),        //sd 8 (0x8)[$r3] = $r2;;
     _32(0xe1140405),        //addd $r5 = $r5, 16 (0x10)
     _32(0x3810fc0e),        //ld $r4 = -16 (0xfffffff0)[$r14];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0xf51d01c4),        //sbfd $r7 = $r4, $r7
     _32(0x71050101),        //addd $r1 = $r1, $r4;;
     _32(0xe8000040),        //andd $r0 = $r0, 1 (0x1)
     _32(0x38100407),        //ld $r4 = 16 (0x10)[$r7];;
     _32(0x7119a144),        //compd.eq $r6 = $r4, $r5;;
     _32(0x08001a06),        //cb.dnez $r6? 1ecf0 <_free_r+0x220>;;
     _32(0x38180607),        //ld $r6 = 24 (0x18)[$r7];;
     _32(0x27190604),        //sd 24 (0x18)[$r4] = $r6;;
     _32(0x88802700),        //cb.deqz $r0? 1edcc <_free_r+0x2fc>
     _32(0x27110406),        //sd 16 (0x10)[$r6] = $r4;;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0x27010207),        //sd 8 (0x8)[$r7] = $r0;;
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x69017fc1),        //compd.gtu $r0 = $r1, 511 (0x1ff);;
     _32(0x08000ec0),        //cb.dnez $r0? 1ec60 <_free_r+0x190>;;
     _32(0xe60720c1),        //extfz $r1 = $r1, 34 (0x22), 3 (0x3)
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _96(0x1000000090000116e00c6400),        //make $r3 = 285072 (0x45990);;
     _32(0xf1000041),        //addw $r0 = $r1, 1 (0x1)
     _32(0xfa063081),        //sraw $r1 = $r1, 2 (0x2)
     _32(0x38100203),        //ld $r4 = 8 (0x8)[$r3];;
     _32(0xf9023040),        //sllw $r0 = $r0, 1 (0x1)
     _32(0x79066042),        //slld $r1 = $r2, $r1;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0xf90220c0),        //slld $r0 = $r0, 3 (0x3)
     _32(0x7a050101),        //ord $r1 = $r1, $r4;;
     _96(0x80000116b8086400e1106000),        //addd $r4 = $r0, 285056 (0x45980)
     _96(0x180000009800011680000000),        //ld $r2 = 285072 (0x45990)[$r0];;
     _32(0x27110607),        //sd 24 (0x18)[$r7] = $r4;;
     _32(0x27050203),        //sd 8 (0x8)[$r3] = $r1;;
     _32(0x27090407),        //sd 16 (0x10)[$r7] = $r2;;
     _96(0x1800000098000116a71d6400),        //sd 285072 (0x45990)[$r0] = $r7;;
     _32(0x271d0602),        //sd 24 (0x18)[$r2] = $r7;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17fffee6),        //goto 1e790 <__malloc_unlock>;;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x0b0004c0),        //cb.odd $r0? 1ec4c <_free_r+0x17c>;;
     _32(0xf1050081),        //addd $r1 = $r1, $r2
     _32(0x61140405),        //addd $r5 = $r5, 16 (0x10);;
     _32(0xea100041),        //ord $r4 = $r1, 1 (0x1)
     _32(0x38000403),        //ld $r0 = 16 (0x10)[$r3];;
     _32(0x7009a140),        //compd.ne $r2 = $r0, $r5;;
     _32(0x08801d42),        //cb.deqz $r2? 1edec <_free_r+0x31c>;;
     _32(0x38080603),        //ld $r2 = 24 (0x18)[$r3];;
     _32(0x27090600),        //sd 24 (0x18)[$r0] = $r2;;
     _32(0x27010402),        //sd 16 (0x10)[$r2] = $r0;;
     _32(0x27110207),        //sd 8 (0x8)[$r7] = $r4;;
     _32(0x97ffffd1),        //goto 1eb70 <_free_r+0xa0>
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0xe9017fc1),        //compd.gtu $r0 = $r1, 511 (0x1ff)
     _32(0x2701fe0e),        //sd -8 (0xfffffff8)[$r14] = $r0;;
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x08fff1c0),        //cb.deqz $r0? 1eb78 <_free_r+0xa8>;;
     _32(0x7b022241),        //srld $r0 = $r1, 9 (0x9);;
     _32(0x69090100),        //compd.gtu $r2 = $r0, 4 (0x4);;
     _32(0x08001382),        //cb.dnez $r2? 1eda0 <_free_r+0x2d0>;;
     _32(0x66035181),        //extfz $r0 = $r1, 37 (0x25), 6 (0x6);;
     _32(0xf1100e40),        //addw $r4 = $r0, 57 (0x39)
     _32(0x71000e00),        //addw $r0 = $r0, 56 (0x38);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _96(0x80000116b80c6404e1106004),        //addd $r4 = $r4, 285056 (0x45980)
     _96(0x180000009800011680000000),        //ld $r3 = 285072 (0x45990)[$r4];;
     _32(0x7009a0c4),        //compd.ne $r2 = $r4, $r3;;
     _32(0x08801702),        //cb.deqz $r2? 1ee10 <_free_r+0x340>;;
     _32(0x38080203),        //ld $r2 = 8 (0x8)[$r3];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x7909a042),        //compd.gtu $r2 = $r2, $r1;;
     _32(0x08800102),        //cb.deqz $r2? 1ecc0 <_free_r+0x1f0>;;
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x7101a0c4),        //compd.eq $r0 = $r4, $r3;;
     _32(0x08fffe80),        //cb.deqz $r0? 1eca4 <_free_r+0x1d4>;;
     _32(0x38100603),        //ld $r4 = 24 (0x18)[$r3];;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x27110607),        //sd 24 (0x18)[$r7] = $r4;;
     _32(0x270d0407),        //sd 16 (0x10)[$r7] = $r3;;
     _32(0x271d0404),        //sd 16 (0x10)[$r4] = $r7;;
     _32(0x271d0603),        //sd 24 (0x18)[$r3] = $r7;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17fffea9),        //goto 1e790 <__malloc_unlock>;;
     _32(0x080019c0),        //cb.dnez $r0? 1ee8c <_free_r+0x3bc>;;
     _32(0xf1050042),        //addd $r1 = $r2, $r1
     _32(0x38000603),        //ld $r0 = 24 (0x18)[$r3];;
     _32(0xea080041),        //ord $r2 = $r1, 1 (0x1)
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x27010603),        //sd 24 (0x18)[$r3] = $r0;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x270d0400),        //sd 16 (0x10)[$r0] = $r3;;
     _32(0x27090207),        //sd 8 (0x8)[$r7] = $r2;;
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17fffe99),        //goto 1e790 <__malloc_unlock>;;
     _32(0x8b000246),        //cb.odd $r6? 1ed54 <_free_r+0x284>
     _32(0x71050081),        //addd $r1 = $r1, $r2;;
     _32(0x3800fc0e),        //ld $r0 = -16 (0xfffffff0)[$r14];;
     _32(0xf51d01c0),        //sbfd $r7 = $r0, $r7
     _32(0x71050001),        //addd $r1 = $r1, $r0;;
     _32(0x38080407),        //ld $r2 = 16 (0x10)[$r7];;
     _32(0x38000607),        //ld $r0 = 24 (0x18)[$r7];;
     _32(0x27010602),        //sd 24 (0x18)[$r2] = $r0;;
     _32(0x27090400),        //sd 16 (0x10)[$r0] = $r2;;
     _32(0xea0c0041),        //ord $r3 = $r1, 1 (0x1)
     _96(0x88000116e0006400e0086200),        //make $r2 = 285064 (0x45988)
     _96(0x100000009000011688000000),        //make $r0 = 285072 (0x45990);;
     _32(0x38080002),        //ld $r2 = 0 (0x0)[$r2];;
     _32(0x270d0207),        //sd 8 (0x8)[$r7] = $r3;;
     _32(0x271d0400),        //sd 16 (0x10)[$r0] = $r7;;
     _32(0x7905a042),        //compd.gtu $r1 = $r2, $r1;;
     _32(0x087fe601),        //cb.dnez $r1? 1ebe0 <_free_r+0x110>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _96(0x0800000088000122e0047e00),        //make $r1 = 297464 (0x489f8);;
     _32(0x9ffffef9),        //call 1e978 <_malloc_trim_r>
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x17ffff91),        //goto 1ebe0 <_free_r+0x110>;;
     _32(0x69090500),        //compd.gtu $r2 = $r0, 20 (0x14);;
     _32(0x08800302),        //cb.deqz $r2? 1edd4 <_free_r+0x304>;;
     _32(0x69091500),        //compd.gtu $r2 = $r0, 84 (0x54);;
     _32(0x080008c2),        //cb.dnez $r2? 1ee38 <_free_r+0x368>;;
     _32(0x6603b301),        //extfz $r0 = $r1, 43 (0x2b), 12 (0xc);;
     _32(0xf1101bc0),        //addw $r4 = $r0, 111 (0x6f)
     _32(0x71001b80),        //addw $r0 = $r0, 110 (0x6e);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffffb0),        //goto 1ec84 <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x97ffff90),        //goto 1ec0c <_free_r+0x13c>
     _32(0x71050081),        //addd $r1 = $r1, $r2;;
     _32(0xf1101700),        //addw $r4 = $r0, 92 (0x5c)
     _32(0x710016c0),        //addw $r0 = $r0, 91 (0x5b);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffffa8),        //goto 1ec84 <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _96(0x0000000080000116e0006400),        //make $r0 = 285072 (0x45990);;
     _32(0x271d0a00),        //sd 40 (0x28)[$r0] = $r7;;
     _32(0x271d0800),        //sd 32 (0x20)[$r0] = $r7;;
     _32(0x27150607),        //sd 24 (0x18)[$r7] = $r5;;
     _32(0x28110207),        //sq 8 (0x8)[$r7] = $r4r5;;
     _32(0x97ffff76),        //goto 1ebe0 <_free_r+0x110>
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0xe0040001),        //make $r1 = 1 (0x1)
     _32(0xfa023080),        //sraw $r0 = $r0, 2 (0x2)
     _96(0x1000000090000116e0086400),        //make $r2 = 285072 (0x45990);;
     _32(0xf9026001),        //slld $r0 = $r1, $r0
     _32(0x38140202),        //ld $r5 = 8 (0x8)[$r2];;
     _32(0x7a010140),        //ord $r0 = $r0, $r5;;
     _32(0x97ffffa5),        //goto 1ecc4 <_free_r+0x1f4>
     _32(0x27010202),        //sd 8 (0x8)[$r2] = $r0;;
     _32(0x69095500),        //compd.gtu $r2 = $r0, 340 (0x154);;
     _32(0x08000202),        //cb.dnez $r2? 1ee5c <_free_r+0x38c>;;
     _32(0x6603e3c1),        //extfz $r0 = $r1, 46 (0x2e), 15 (0xf);;
     _32(0xf1101e00),        //addw $r4 = $r0, 120 (0x78)
     _32(0x71001dc0),        //addw $r0 = $r0, 119 (0x77);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffff8c),        //goto 1ec84 <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xe01007f0),        //make $r4 = 2032 (0x7f0)
     _32(0xe000007e),        //make $r0 = 126 (0x7e)
     _64(0x10000001e9095500),        //compd.gtu $r2 = $r0, 1364 (0x554);;
     _32(0x087fe182),        //cb.dnez $r2? 1ec84 <_free_r+0x1b4>;;
     _32(0x67031481),        //extfz $r0 = $r1, 49 (0x31), 18 (0x12);;
     _32(0xf1101f40),        //addw $r4 = $r0, 125 (0x7d)
     _32(0x71001f00),        //addw $r0 = $r0, 124 (0x7c);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffff80),        //goto 1ec84 <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0x27010207),        //sd 8 (0x8)[$r7] = $r0;;
     _32(0x97ffff53),        //goto 1ebe0 <_free_r+0x110>
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x00000000)        //errop ;;
 |];

let __libc_lock_init: list_I = 
 [|
     _32(0x08800080),        //cb.deqz $r0? 1eea8 <__libc_lock_init+0x8>;;
     _32(0x10003e63),        //goto 2e830 <__cos_recursive_initlock_base>;;
     _32(0x00000000),        //errop ;;
     _32(0x10003e61)        //goto 2e830 <__cos_recursive_initlock_base>;;
 |];

let __libc_lock_close: list_I = 
 [|
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __libc_lock_try_acquire: list_I = 
 [|
     _32(0x8fc40081),        //get $r1 = $pcr
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x8fc40082),        //get $r2 = $pcr
     _32(0x6407f201),        //extfz $r1 = $r1, 15 (0xf), 8 (0x8);;
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xf4055041),        //addx8w $r1 = $r1, $r1
     _32(0x78083fc2),        //zxbd $r2 = $r2;;
     _32(0xf0055081),        //addx2w $r1 = $r1, $r2
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x98003e59),        //call 2e840 <__cos_recursive_trylock_base>
     _32(0x71040041),        //addw $r1 = $r1, 1 (0x1);;
     _64(0x00000000f005b040),        //compw.ne $r1 = $r0, 1 (0x1);;
     _32(0x0c8001c1),        //cb.weqz $r1? 1ef08 <__libc_lock_try_acquire+0x50>;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _64(0xb840040cf101b000),        //compw.eq $r0 = $r0, 0 (0x0)
     _32(0x08000000),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _96(0x0000000080000000e0040000),        //make $r1 = 0 (0x0);;
     _32(0x08000201),        //cb.dnez $r1? 1ef34 <__libc_lock_try_acquire+0x7c>;;
     _32(0x3fcd0000),        //fence ;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _64(0xb840040cf101b000),        //compw.eq $r0 = $r0, 0 (0x0)
     _32(0x08000000),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _96(0x80000000e0080000e0040040),        //make $r1 = 1 (0x1)
     _96(0x080000008800000080000000),        //make $r2 = 0 (0x0);;
     _32(0xe0090002),        //compd.ne $r2 = $r2, 0 (0x0)
     _64(0x08000000f505b041),        //compw.gt $r1 = $r1, 1 (0x1);;
     _32(0x78051081),        //andw $r1 = $r1, $r2;;
     _32(0x0c000101),        //cb.wnez $r1? 1ef6c <__libc_lock_try_acquire+0xb4>;;
     _32(0x3f8d0000),        //dinval ;;
     _32(0x97ffffee),        //goto 1ef1c <__libc_lock_try_acquire+0x64>
     _32(0x3fcd0000),        //fence ;;
     _32(0x98003c61),        //call 2e0f0 <mppa_cos_l2_wb_inval>
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x97fffffb),        //goto 1ef64 <__libc_lock_try_acquire+0xac>
     _32(0x3f8d0000)        //dinval ;;
 |];

let __libc_lock_acquire: list_I = 
 [|
     _32(0x8fc40081),        //get $r1 = $pcr
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x8fc40082),        //get $r2 = $pcr
     _32(0xe407f201),        //extfz $r1 = $r1, 15 (0xf), 8 (0x8)
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xf4055041),        //addx8w $r1 = $r1, $r1
     _32(0x78383fc2),        //zxbd $r14 = $r2;;
     _32(0xf0395381),        //addx2w $r14 = $r1, $r14
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2849060c),        //sq 24 (0x18)[$r12] = $r18r19;;
     _32(0xf14c004e),        //addw $r19 = $r14, 1 (0x1)
     _32(0xe0500000),        //make $r20 = 0 (0x0)
     _32(0xf138004e),        //addw $r14 = $r14, 1 (0x1)
     _32(0x27510a0c),        //sd 40 (0x28)[$r12] = $r20;;
     _32(0x27410c0c),        //sd 48 (0x30)[$r12] = $r16;;
     _32(0x9fffffbe),        //call 1eeb8 <__libc_lock_try_acquire>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x0c800380),        //cb.weqz $r0? 1f000 <__libc_lock_acquire+0x80>;;
     _32(0x26510e0c),        //sw 56 (0x38)[$r12] = $r20;;
     _32(0x30040e0c),        //lwz $r1 = 56 (0x38)[$r12];;
     _32(0x7705b4c1),        //compw.geu $r1 = $r1, $r19;;
     _32(0x0c7ffe81),        //cb.wnez $r1? 1efc0 <__libc_lock_acquire+0x40>;;
     _32(0x30040e0c),        //lwz $r1 = 56 (0x38)[$r12];;
     _32(0x71040041),        //addw $r1 = $r1, 1 (0x1);;
     _32(0x26050e0c),        //sw 56 (0x38)[$r12] = $r1;;
     _32(0x30040e0c),        //lwz $r1 = 56 (0x38)[$r12];;
     _32(0x7605b381),        //compw.ltu $r1 = $r1, $r14;;
     _32(0x0c7ffec1),        //cb.wnez $r1? 1efdc <__libc_lock_acquire+0x5c>;;
     _32(0x9fffffb1),        //call 1eeb8 <__libc_lock_try_acquire>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x0c7ffd00),        //cb.wnez $r0? 1efcc <__libc_lock_acquire+0x4c>;;
     _96(0x0000000080000000e0000000),        //make $r0 = 0 (0x0);;
     _32(0x08000240),        //cb.dnez $r0? 1f030 <__libc_lock_acquire+0xb0>;;
     _32(0x3fcd0000),        //fence ;;
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500a0c),        //ld $r20 = 40 (0x28)[$r12];;
     _96(0x80000000e0040000e0000040),        //make $r0 = 1 (0x1)
     _96(0x080000008800000080000000),        //make $r1 = 0 (0x0);;
     _32(0xe0050001),        //compd.ne $r1 = $r1, 0 (0x0)
     _64(0x08000000f501b040),        //compw.gt $r0 = $r0, 1 (0x1);;
     _32(0x78011040),        //andw $r0 = $r0, $r1;;
     _32(0x0c000280),        //cb.wnez $r0? 1f080 <__libc_lock_acquire+0x100>;;
     _32(0x3f8d0000),        //dinval ;;
     _32(0x3fcd0000),        //fence ;;
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500a0c),        //ld $r20 = 40 (0x28)[$r12];;
     _32(0x18003c1c),        //call 2e0f0 <mppa_cos_l2_wb_inval>;;
     _32(0x97fffff7),        //goto 1f060 <__libc_lock_acquire+0xe0>
     _32(0x3f8d0000),        //dinval ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __libc_lock_release: list_I = 
 [|
     _32(0x8fc40081),        //get $r1 = $pcr
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x8fc40082),        //get $r2 = $pcr
     _32(0x6407f201),        //extfz $r1 = $r1, 15 (0xf), 8 (0x8);;
     _32(0xf4055041),        //addx8w $r1 = $r1, $r1
     _32(0xf80c3fc2),        //zxbd $r3 = $r2
     _96(0x1000000090000000e0080000),        //make $r2 = 0 (0x0);;
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x700550c1),        //addx2w $r1 = $r1, $r3;;
     _32(0xf1040041),        //addw $r1 = $r1, 1 (0x1)
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x880001c2),        //cb.dnez $r2? 1f0e0 <__libc_lock_release+0x50>
     _32(0x6907f001),        //sxwd $r1 = $r1;;
     _32(0x3fcd0000),        //fence ;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x10003e2b),        //goto 2e988 <__cos_recursive_unlock_base>;;
     _96(0x80000000e00c0000e0080040),        //make $r2 = 1 (0x1)
     _96(0x080000008800000080000000),        //make $r3 = 0 (0x0);;
     _32(0xe00d0003),        //compd.ne $r3 = $r3, 0 (0x0)
     _64(0x08000000f509b042),        //compw.gt $r2 = $r2, 1 (0x1);;
     _32(0x780910c2),        //andw $r2 = $r2, $r3;;
     _32(0x0c0001c2),        //cb.wnez $r2? 1f124 <__libc_lock_release+0x94>;;
     _32(0x3f8d0000),        //dinval ;;
     _32(0x3fcd0000),        //fence ;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x10003e1a),        //goto 2e988 <__cos_recursive_unlock_base>;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x98003bf2),        //call 2e0f0 <mppa_cos_l2_wb_inval>
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x97fffff6),        //goto 1f110 <__libc_lock_release+0x80>
     _32(0x3f8d0000)        //dinval ;;
 |];

let adr_start:bits(addr_bits) = 0b00011010000100010000; //0x1a110
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ret1, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ret2, 0b00010110100001000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ret3, 0b00010110100001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ret4, 0b00010110100010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ret5, 0b00010110100010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ret6, 0b00010110100011000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ret7, 0b00010110100011100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ret8, 0b00010110100011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(ret9, 0b00010110100100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_1, 0b00010110100100101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_1, 0b00010110100110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_1, 0b00010110100111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_1, 0b00010110101001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_1, 0b00010110101010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_1, 0b00010110101100011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_1, 0b00010110101101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_1, 0b00010110101111000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_1, 0b00010110110000001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_2, 0b00010110110001010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_2, 0b00010110110010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_2, 0b00010110110011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_2, 0b00010110110101010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_2, 0b00010110110110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_2, 0b00010110110111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_2, 0b00010110111001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_2, 0b00010110111010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_2, 0b00010110111011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_3, 0b00010110111100001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_3, 0b00010110111101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_3, 0b00010110111110110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_3, 0b00010111000000001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_3, 0b00010111000001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_3, 0b00010111000010101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_3, 0b00010111000100000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_3, 0b00010111000101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_3, 0b00010111000110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_4, 0b00010111000111000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_4, 0b00010111001000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_4, 0b00010111001010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_4, 0b00010111001011110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_4, 0b00010111001101010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_4, 0b00010111001110110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_4, 0b00010111010000010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_4, 0b00010111010001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_4, 0b00010111010010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_5, 0b00010111010011101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_5, 0b00010111010100111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_5, 0b00010111010110010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_5, 0b00010111010111101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_5, 0b00010111011000111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_5, 0b00010111011010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_5, 0b00010111011011100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_5, 0b00010111011100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_5, 0b00010111011101100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_6, 0b00010111011110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_6, 0b00010111011111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_6, 0b00010111100001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_6, 0b00010111100010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_6, 0b00010111100011110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_6, 0b00010111100101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_6, 0b00010111100110011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_6, 0b00010111100111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_6, 0b00010111101000011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_7, 0b00010111101001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_7, 0b00010111101010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_7, 0b00010111101100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_7, 0b00010111101110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_7, 0b00010111101111101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_7, 0b00010111110001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_7, 0b00010111110010101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_7, 0b00010111110011110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_7, 0b00010111110100111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_8, 0b00010111110110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_8, 0b00010111110111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_8, 0b00010111111001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_8, 0b00010111111010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_8, 0b00010111111100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_8, 0b00010111111101110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_8, 0b00010111111111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_8, 0b00011000000000011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_8, 0b00011000000001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_9, 0b00011000000010101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_9, 0b00011000000100001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_9, 0b00011000000101110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_9, 0b00011000000111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_9, 0b00011000001000111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_9, 0b00011000001010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_9, 0b00011000001011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_9, 0b00011000001101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_9, 0b00011000001110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_a, 0b00011000001111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_a, 0b00011000010001000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_a, 0b00011000010010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_a, 0b00011000010100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_a, 0b00011000010110010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_a, 0b00011000011000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_a, 0b00011000011001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_a, 0b00011000011011010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_a, 0b00011000011100101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_b, 0b00011000011110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_b, 0b00011000011111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_b, 0b00011000100001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_b, 0b00011000100011010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_b, 0b00011000100101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_b, 0b00011000100110110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_b, 0b00011000101000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_b, 0b00011000101010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_b, 0b00011000101011011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_c, 0b00011000101100110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_c, 0b00011000101110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_c, 0b00011000101111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_c, 0b00011000110000111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_c, 0b00011000110010010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_c, 0b00011000110011101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_c, 0b00011000110101001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_c, 0b00011000110110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_c, 0b00011000110111001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_d, 0b00011000111000001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_d, 0b00011000111001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_d, 0b00011000111010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_d, 0b00011000111100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_d, 0b00011000111101101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_d, 0b00011000111111000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_d, 0b00011001000000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_d, 0b00011001000001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_d, 0b00011001000010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_e, 0b00011001000011100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_e, 0b00011001000100110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_e, 0b00011001000110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_e, 0b00011001000111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_e, 0b00011001001000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_e, 0b00011001001001101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_e, 0b00011001001010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_e, 0b00011001001011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_e, 0b00011001001100111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_f, 0b00011001001101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_f, 0b00011001001111001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_f, 0b00011001010000011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_f, 0b00011001010001101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_f, 0b00011001010010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_f, 0b00011001010100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_f, 0b00011001010101100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_f, 0b00011001010110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_f, 0b00011001010111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_g, 0b00011001011000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_g, 0b00011001011001110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_g, 0b00011001011011000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_g, 0b00011001011100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_g, 0b00011001011101101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_g, 0b00011001011111000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_g, 0b00011001100000010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_g, 0b00011001100001010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_g, 0b00011001100010010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_h, 0b00011001100011010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_h, 0b00011001100101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_h, 0b00011001100110111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_h, 0b00011001101000110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_h, 0b00011001101010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_h, 0b00011001101100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_h, 0b00011001101110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_h, 0b00011001101111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_h, 0b00011001110000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn1_i, 0b00011001110001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn2_i, 0b00011001110100001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn3_i, 0b00011001110110011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn4_i, 0b00011001111000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn5_i, 0b00011001111010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn6_i, 0b00011001111101001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn7_i, 0b00011001111111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn8_i, 0b00011010000001000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fn9_i, 0b00011010000010101000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00011010000100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__udivdi3, 0b00011101010111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__umoddi3, 0b00011101011001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__udivmoddi4, 0b00011101011011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__divdi3, 0b00011101011101101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__moddi3, 0b00011101100000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00011101100001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_fini_array, 0b00011101100010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_init_array, 0b00011101100011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_init_signal_r_part_0, 0b00011101100110011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_init_signal_r, 0b00011101101000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_signal_r, 0b00011101101000011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_raise_r, 0b00011101101010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sigtramp_r, 0b00011101101110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(raise, 0b00011101110001010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(signal, 0b00011101110001101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_init_signal, 0b00011101110100011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sigtramp, 0b00011101110101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_kill_r, 0b00011101110101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_getpid_r, 0b00011101110111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_malloc_r, 0b00011101110111101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__malloc_lock, 0b00011110011110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__malloc_unlock, 0b00011110011110010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(cleanup_glue, 0b00011110011110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_reclaim_reent, 0b00011110011111101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_sbrk_r, 0b00011110100100000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_malloc_trim_r, 0b00011110100101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_free_r, 0b00011110101011010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_init, 0b00011110111010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_close, 0b00011110111010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_try_acquire, 0b00011110111010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_acquire, 0b00011110111110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_release, 0b00011111000010010000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x000000000001a110;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
