// executing pipeline pr42833.c.out.dumped test 
val k1_pipeline_pr42833: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_pr42833() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let helper_neon_rshl_s8: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x30000c0c),        //lwz $r0 = 48 (0x30)[$r12];;
     _32(0x2601120c),        //sw 72 (0x48)[$r12] = $r0;;
     _32(0x2000120c),        //lbz $r0 = 72 (0x48)[$r12];;
     _32(0x240117cc),        //sb 95 (0x5f)[$r12] = $r0;;
     _32(0x240017cc),        //lbs $r0 = 95 (0x5f)[$r12];;
     _64(0x00000000f401b1c0),        //compw.le $r0 = $r0, 7 (0x7);;
     _32(0x0c000100),        //cb.wnez $r0? 16870 <helper_neon_rshl_s8+0x50>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2401100c),        //sb 64 (0x40)[$r12] = $r0;;
     _32(0x10000047),        //goto 16988 <helper_neon_rshl_s8+0x168>;;
     _32(0x240017cc),        //lbs $r0 = 95 (0x5f)[$r12];;
     _64(0x07fffffff301b600),        //compw.ge $r0 = $r0, 4294967288 (0xfffffff8);;
     _32(0x0c0001c0),        //cb.wnez $r0? 16898 <helper_neon_rshl_s8+0x78>;;
     _32(0x2000140c),        //lbz $r0 = 80 (0x50)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7a0231c0),        //sraw $r0 = $r0, 7 (0x7);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401100c),        //sb 64 (0x40)[$r12] = $r0;;
     _32(0x1000003d),        //goto 16988 <helper_neon_rshl_s8+0x168>;;
     _32(0x240017cc),        //lbs $r0 = 95 (0x5f)[$r12];;
     _64(0x07fffffff001b600),        //compw.ne $r0 = $r0, 4294967288 (0xfffffff8);;
     _32(0x0c000640),        //cb.wnez $r0? 16908 <helper_neon_rshl_s8+0xe8>;;
     _32(0x2000140c),        //lbz $r0 = 80 (0x50)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x240017cc),        //lbs $r0 = 95 (0x5f)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401100c),        //sb 64 (0x40)[$r12] = $r0;;
     _32(0x2000100c),        //lbz $r0 = 64 (0x40)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401100c),        //sb 64 (0x40)[$r12] = $r0;;
     _32(0x2000100c),        //lbz $r0 = 64 (0x40)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7a023040),        //sraw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401100c),        //sb 64 (0x40)[$r12] = $r0;;
     _32(0x10000021),        //goto 16988 <helper_neon_rshl_s8+0x168>;;
     _32(0x240017cc),        //lbs $r0 = 95 (0x5f)[$r12];;
     _32(0x0d800580),        //cb.wgez $r0? 16964 <helper_neon_rshl_s8+0x144>;;
     _32(0x2000140c),        //lbz $r0 = 80 (0x50)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x240017cc),        //lbs $r0 = 95 (0x5f)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c00ffc0),        //notw $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x79027002),        //sllw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x240017cc),        //lbs $r0 = 95 (0x5f)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000000),        //negw $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401100c),        //sb 64 (0x40)[$r12] = $r0;;
     _32(0x1000000a),        //goto 16988 <helper_neon_rshl_s8+0x168>;;
     _32(0x2000140c),        //lbz $r0 = 80 (0x50)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x240017cc),        //lbs $r0 = 95 (0x5f)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79027001),        //sllw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401100c),        //sb 64 (0x40)[$r12] = $r0;;
     _32(0x2000124c),        //lbz $r0 = 73 (0x49)[$r12];;
     _32(0x2401178c),        //sb 94 (0x5e)[$r12] = $r0;;
     _32(0x2400178c),        //lbs $r0 = 94 (0x5e)[$r12];;
     _64(0x00000000f401b1c0),        //compw.le $r0 = $r0, 7 (0x7);;
     _32(0x0c000100),        //cb.wnez $r0? 169ac <helper_neon_rshl_s8+0x18c>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2401104c),        //sb 65 (0x41)[$r12] = $r0;;
     _32(0x10000047),        //goto 16ac4 <helper_neon_rshl_s8+0x2a4>;;
     _32(0x2400178c),        //lbs $r0 = 94 (0x5e)[$r12];;
     _64(0x07fffffff301b600),        //compw.ge $r0 = $r0, 4294967288 (0xfffffff8);;
     _32(0x0c0001c0),        //cb.wnez $r0? 169d4 <helper_neon_rshl_s8+0x1b4>;;
     _32(0x2000144c),        //lbz $r0 = 81 (0x51)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7a0231c0),        //sraw $r0 = $r0, 7 (0x7);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401104c),        //sb 65 (0x41)[$r12] = $r0;;
     _32(0x1000003d),        //goto 16ac4 <helper_neon_rshl_s8+0x2a4>;;
     _32(0x2400178c),        //lbs $r0 = 94 (0x5e)[$r12];;
     _64(0x07fffffff001b600),        //compw.ne $r0 = $r0, 4294967288 (0xfffffff8);;
     _32(0x0c000640),        //cb.wnez $r0? 16a44 <helper_neon_rshl_s8+0x224>;;
     _32(0x2000144c),        //lbz $r0 = 81 (0x51)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400178c),        //lbs $r0 = 94 (0x5e)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401104c),        //sb 65 (0x41)[$r12] = $r0;;
     _32(0x2000104c),        //lbz $r0 = 65 (0x41)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401104c),        //sb 65 (0x41)[$r12] = $r0;;
     _32(0x2000104c),        //lbz $r0 = 65 (0x41)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7a023040),        //sraw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401104c),        //sb 65 (0x41)[$r12] = $r0;;
     _32(0x10000021),        //goto 16ac4 <helper_neon_rshl_s8+0x2a4>;;
     _32(0x2400178c),        //lbs $r0 = 94 (0x5e)[$r12];;
     _32(0x0d800580),        //cb.wgez $r0? 16aa0 <helper_neon_rshl_s8+0x280>;;
     _32(0x2000144c),        //lbz $r0 = 81 (0x51)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400178c),        //lbs $r0 = 94 (0x5e)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c00ffc0),        //notw $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x79027002),        //sllw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400178c),        //lbs $r0 = 94 (0x5e)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000000),        //negw $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401104c),        //sb 65 (0x41)[$r12] = $r0;;
     _32(0x1000000a),        //goto 16ac4 <helper_neon_rshl_s8+0x2a4>;;
     _32(0x2000144c),        //lbz $r0 = 81 (0x51)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400178c),        //lbs $r0 = 94 (0x5e)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79027001),        //sllw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401104c),        //sb 65 (0x41)[$r12] = $r0;;
     _32(0x2000128c),        //lbz $r0 = 74 (0x4a)[$r12];;
     _32(0x2401174c),        //sb 93 (0x5d)[$r12] = $r0;;
     _32(0x2400174c),        //lbs $r0 = 93 (0x5d)[$r12];;
     _64(0x00000000f401b1c0),        //compw.le $r0 = $r0, 7 (0x7);;
     _32(0x0c000100),        //cb.wnez $r0? 16ae8 <helper_neon_rshl_s8+0x2c8>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2401108c),        //sb 66 (0x42)[$r12] = $r0;;
     _32(0x10000047),        //goto 16c00 <helper_neon_rshl_s8+0x3e0>;;
     _32(0x2400174c),        //lbs $r0 = 93 (0x5d)[$r12];;
     _64(0x07fffffff301b600),        //compw.ge $r0 = $r0, 4294967288 (0xfffffff8);;
     _32(0x0c0001c0),        //cb.wnez $r0? 16b10 <helper_neon_rshl_s8+0x2f0>;;
     _32(0x2000148c),        //lbz $r0 = 82 (0x52)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7a0231c0),        //sraw $r0 = $r0, 7 (0x7);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401108c),        //sb 66 (0x42)[$r12] = $r0;;
     _32(0x1000003d),        //goto 16c00 <helper_neon_rshl_s8+0x3e0>;;
     _32(0x2400174c),        //lbs $r0 = 93 (0x5d)[$r12];;
     _64(0x07fffffff001b600),        //compw.ne $r0 = $r0, 4294967288 (0xfffffff8);;
     _32(0x0c000640),        //cb.wnez $r0? 16b80 <helper_neon_rshl_s8+0x360>;;
     _32(0x2000148c),        //lbz $r0 = 82 (0x52)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400174c),        //lbs $r0 = 93 (0x5d)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401108c),        //sb 66 (0x42)[$r12] = $r0;;
     _32(0x2000108c),        //lbz $r0 = 66 (0x42)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401108c),        //sb 66 (0x42)[$r12] = $r0;;
     _32(0x2000108c),        //lbz $r0 = 66 (0x42)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7a023040),        //sraw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401108c),        //sb 66 (0x42)[$r12] = $r0;;
     _32(0x10000021),        //goto 16c00 <helper_neon_rshl_s8+0x3e0>;;
     _32(0x2400174c),        //lbs $r0 = 93 (0x5d)[$r12];;
     _32(0x0d800580),        //cb.wgez $r0? 16bdc <helper_neon_rshl_s8+0x3bc>;;
     _32(0x2000148c),        //lbz $r0 = 82 (0x52)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400174c),        //lbs $r0 = 93 (0x5d)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c00ffc0),        //notw $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x79027002),        //sllw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400174c),        //lbs $r0 = 93 (0x5d)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000000),        //negw $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401108c),        //sb 66 (0x42)[$r12] = $r0;;
     _32(0x1000000a),        //goto 16c00 <helper_neon_rshl_s8+0x3e0>;;
     _32(0x2000148c),        //lbz $r0 = 82 (0x52)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400174c),        //lbs $r0 = 93 (0x5d)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79027001),        //sllw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x2401108c),        //sb 66 (0x42)[$r12] = $r0;;
     _32(0x200012cc),        //lbz $r0 = 75 (0x4b)[$r12];;
     _32(0x2401170c),        //sb 92 (0x5c)[$r12] = $r0;;
     _32(0x2400170c),        //lbs $r0 = 92 (0x5c)[$r12];;
     _64(0x00000000f401b1c0),        //compw.le $r0 = $r0, 7 (0x7);;
     _32(0x0c000100),        //cb.wnez $r0? 16c24 <helper_neon_rshl_s8+0x404>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x240110cc),        //sb 67 (0x43)[$r12] = $r0;;
     _32(0x10000047),        //goto 16d3c <helper_neon_rshl_s8+0x51c>;;
     _32(0x2400170c),        //lbs $r0 = 92 (0x5c)[$r12];;
     _64(0x07fffffff301b600),        //compw.ge $r0 = $r0, 4294967288 (0xfffffff8);;
     _32(0x0c0001c0),        //cb.wnez $r0? 16c4c <helper_neon_rshl_s8+0x42c>;;
     _32(0x200014cc),        //lbz $r0 = 83 (0x53)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7a0231c0),        //sraw $r0 = $r0, 7 (0x7);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x240110cc),        //sb 67 (0x43)[$r12] = $r0;;
     _32(0x1000003d),        //goto 16d3c <helper_neon_rshl_s8+0x51c>;;
     _32(0x2400170c),        //lbs $r0 = 92 (0x5c)[$r12];;
     _64(0x07fffffff001b600),        //compw.ne $r0 = $r0, 4294967288 (0xfffffff8);;
     _32(0x0c000640),        //cb.wnez $r0? 16cbc <helper_neon_rshl_s8+0x49c>;;
     _32(0x200014cc),        //lbz $r0 = 83 (0x53)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400170c),        //lbs $r0 = 92 (0x5c)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x240110cc),        //sb 67 (0x43)[$r12] = $r0;;
     _32(0x200010cc),        //lbz $r0 = 67 (0x43)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x240110cc),        //sb 67 (0x43)[$r12] = $r0;;
     _32(0x200010cc),        //lbz $r0 = 67 (0x43)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7a023040),        //sraw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x240110cc),        //sb 67 (0x43)[$r12] = $r0;;
     _32(0x10000021),        //goto 16d3c <helper_neon_rshl_s8+0x51c>;;
     _32(0x2400170c),        //lbs $r0 = 92 (0x5c)[$r12];;
     _32(0x0d800580),        //cb.wgez $r0? 16d18 <helper_neon_rshl_s8+0x4f8>;;
     _32(0x200014cc),        //lbz $r0 = 83 (0x53)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400170c),        //lbs $r0 = 92 (0x5c)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7c00ffc0),        //notw $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x79027002),        //sllw $r0 = $r2, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400170c),        //lbs $r0 = 92 (0x5c)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x75000000),        //negw $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7a027001),        //sraw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x240110cc),        //sb 67 (0x43)[$r12] = $r0;;
     _32(0x1000000a),        //goto 16d3c <helper_neon_rshl_s8+0x51c>;;
     _32(0x200014cc),        //lbz $r0 = 83 (0x53)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x2400170c),        //lbs $r0 = 92 (0x5c)[$r12];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79027001),        //sllw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x240110cc),        //sb 67 (0x43)[$r12] = $r0;;
     _32(0x3000100c),        //lwz $r0 = 64 (0x40)[$r12];;
     _32(0x26010a0c),        //sw 40 (0x28)[$r12] = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x2601160c),        //sw 88 (0x58)[$r12] = $r0;;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x6130180c),        //addd $r12 = $r12, 96 (0x60);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _64(0x00004040e0044040),        //make $r1 = 16843009 (0x1010101);;
     _64(0x00014141e0004140),        //make $r0 = 84215045 (0x5050505);;
     _32(0x1ffffeab),        //call 16820 <helper_neon_rshl_s8>;;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00505050f101b280),        //compw.eq $r0 = $r0, 168430090 (0xa0a0a0a);;
     _32(0x0c000080),        //cb.wnez $r0? 16d90 <main+0x38>;;
     _32(0x18000007),        //call 16da8 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 17180 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 18cb0 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110110101011000; //0x16d58
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(helper_neon_rshl_s8, 0b00010110100000100000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110110101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110110110101000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016d58;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, rcount, wcount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, rcount, wcount, adr_end_main);
print_list_data(mD);
}
