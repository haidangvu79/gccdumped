// executing pipeline 20020506_1.c.out.dumped test 
val k1_pipeline_20020506_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_20020506_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let test1: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x0d000100),        //cb.wltz $r0? 16848 <test1+0x28>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16854 <test1+0x34>;;
     _32(0x180001c5),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16854 <test1+0x34>;;
     _32(0x180001c2),        //call 16f58 <abort>;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x0d800100),        //cb.wgez $r0? 16868 <test1+0x48>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16874 <test1+0x54>;;
     _32(0x180001bd),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16874 <test1+0x54>;;
     _32(0x180001ba),        //call 16f58 <abort>;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x0d800100),        //cb.wgez $r0? 16888 <test1+0x68>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16894 <test1+0x74>;;
     _32(0x180001b5),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16894 <test1+0x74>;;
     _32(0x180001b2),        //call 16f58 <abort>;;
     _32(0x2400060c),        //lbs $r0 = 24 (0x18)[$r12];;
     _32(0x0d000100),        //cb.wltz $r0? 168a8 <test1+0x88>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 168b4 <test1+0x94>;;
     _32(0x180001ad),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 168b4 <test1+0x94>;;
     _32(0x180001aa),        //call 16f58 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let test2: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x2401060c),        //sb 24 (0x18)[$r12] = $r0;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x0d000100),        //cb.wltz $r0? 168f4 <test2+0x2c>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16900 <test2+0x38>;;
     _32(0x1800019a),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16900 <test2+0x38>;;
     _32(0x18000197),        //call 16f58 <abort>;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x0d800100),        //cb.wgez $r0? 16918 <test2+0x50>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16924 <test2+0x5c>;;
     _32(0x18000191),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16924 <test2+0x5c>;;
     _32(0x1800018e),        //call 16f58 <abort>;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x0d800100),        //cb.wgez $r0? 1693c <test2+0x74>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16948 <test2+0x80>;;
     _32(0x18000188),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16948 <test2+0x80>;;
     _32(0x18000185),        //call 16f58 <abort>;;
     _32(0x2000060c),        //lbz $r0 = 24 (0x18)[$r12];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x0d000100),        //cb.wltz $r0? 16960 <test2+0x98>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 1696c <test2+0xa4>;;
     _32(0x1800017f),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 1696c <test2+0xa4>;;
     _32(0x1800017c),        //call 16f58 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let test3: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x0d000100),        //cb.wltz $r0? 169a8 <test3+0x28>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 169b4 <test3+0x34>;;
     _32(0x1800016d),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 169b4 <test3+0x34>;;
     _32(0x1800016a),        //call 16f58 <abort>;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x0d800100),        //cb.wgez $r0? 169c8 <test3+0x48>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 169d4 <test3+0x54>;;
     _32(0x18000165),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 169d4 <test3+0x54>;;
     _32(0x18000162),        //call 16f58 <abort>;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x0d800100),        //cb.wgez $r0? 169e8 <test3+0x68>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 169f4 <test3+0x74>;;
     _32(0x1800015d),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 169f4 <test3+0x74>;;
     _32(0x1800015a),        //call 16f58 <abort>;;
     _32(0x2c00060c),        //lhs $r0 = 24 (0x18)[$r12];;
     _32(0x0d000100),        //cb.wltz $r0? 16a08 <test3+0x88>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16a14 <test3+0x94>;;
     _32(0x18000155),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16a14 <test3+0x94>;;
     _32(0x18000152),        //call 16f58 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let test4: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x0d000100),        //cb.wltz $r0? 16a54 <test4+0x2c>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16a60 <test4+0x38>;;
     _32(0x18000142),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16a60 <test4+0x38>;;
     _32(0x1800013f),        //call 16f58 <abort>;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x0d800100),        //cb.wgez $r0? 16a78 <test4+0x50>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16a84 <test4+0x5c>;;
     _32(0x18000139),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16a84 <test4+0x5c>;;
     _32(0x18000136),        //call 16f58 <abort>;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x0d800100),        //cb.wgez $r0? 16a9c <test4+0x74>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16aa8 <test4+0x80>;;
     _32(0x18000130),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16aa8 <test4+0x80>;;
     _32(0x1800012d),        //call 16f58 <abort>;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x0d000100),        //cb.wltz $r0? 16ac0 <test4+0x98>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16acc <test4+0xa4>;;
     _32(0x18000127),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16acc <test4+0xa4>;;
     _32(0x18000124),        //call 16f58 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let test5: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0d000100),        //cb.wltz $r0? 16b08 <test5+0x28>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16b14 <test5+0x34>;;
     _32(0x18000115),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16b14 <test5+0x34>;;
     _32(0x18000112),        //call 16f58 <abort>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0d800100),        //cb.wgez $r0? 16b28 <test5+0x48>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16b34 <test5+0x54>;;
     _32(0x1800010d),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16b34 <test5+0x54>;;
     _32(0x1800010a),        //call 16f58 <abort>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0d800100),        //cb.wgez $r0? 16b48 <test5+0x68>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16b54 <test5+0x74>;;
     _32(0x18000105),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16b54 <test5+0x74>;;
     _32(0x18000102),        //call 16f58 <abort>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0d000100),        //cb.wltz $r0? 16b68 <test5+0x88>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16b74 <test5+0x94>;;
     _32(0x180000fd),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16b74 <test5+0x94>;;
     _32(0x180000fa),        //call 16f58 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let test6: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0d000100),        //cb.wltz $r0? 16bb0 <test6+0x28>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16bbc <test6+0x34>;;
     _32(0x180000eb),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16bbc <test6+0x34>;;
     _32(0x180000e8),        //call 16f58 <abort>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0d800100),        //cb.wgez $r0? 16bd0 <test6+0x48>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16bdc <test6+0x54>;;
     _32(0x180000e3),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16bdc <test6+0x54>;;
     _32(0x180000e0),        //call 16f58 <abort>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0d800100),        //cb.wgez $r0? 16bf0 <test6+0x68>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16bfc <test6+0x74>;;
     _32(0x180000db),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16bfc <test6+0x74>;;
     _32(0x180000d8),        //call 16f58 <abort>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0d000100),        //cb.wltz $r0? 16c10 <test6+0x88>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16c1c <test6+0x94>;;
     _32(0x180000d3),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16c1c <test6+0x94>;;
     _32(0x180000d0),        //call 16f58 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let test7: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x09000100),        //cb.dltz $r0? 16c58 <test7+0x28>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16c64 <test7+0x34>;;
     _32(0x180000c1),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16c64 <test7+0x34>;;
     _32(0x180000be),        //call 16f58 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x09800100),        //cb.dgez $r0? 16c78 <test7+0x48>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16c84 <test7+0x54>;;
     _32(0x180000b9),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16c84 <test7+0x54>;;
     _32(0x180000b6),        //call 16f58 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x09800100),        //cb.dgez $r0? 16c98 <test7+0x68>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16ca4 <test7+0x74>;;
     _32(0x180000b1),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16ca4 <test7+0x74>;;
     _32(0x180000ae),        //call 16f58 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x09000100),        //cb.dltz $r0? 16cb8 <test7+0x88>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16cc4 <test7+0x94>;;
     _32(0x180000a9),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16cc4 <test7+0x94>;;
     _32(0x180000a6),        //call 16f58 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let test8: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x09000100),        //cb.dltz $r0? 16d00 <test8+0x28>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16d0c <test8+0x34>;;
     _32(0x18000097),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16d0c <test8+0x34>;;
     _32(0x18000094),        //call 16f58 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x09800100),        //cb.dgez $r0? 16d20 <test8+0x48>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16d2c <test8+0x54>;;
     _32(0x1800008f),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16d2c <test8+0x54>;;
     _32(0x1800008c),        //call 16f58 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x09800100),        //cb.dgez $r0? 16d40 <test8+0x68>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000140),        //cb.wnez $r0? 16d4c <test8+0x74>;;
     _32(0x18000087),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800080),        //cb.weqz $r0? 16d4c <test8+0x74>;;
     _32(0x18000084),        //call 16f58 <abort>;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x09000100),        //cb.dltz $r0? 16d60 <test8+0x88>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c800140),        //cb.weqz $r0? 16d6c <test8+0x94>;;
     _32(0x1800007f),        //call 16f58 <abort>;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x0c000080),        //cb.wnez $r0? 16d6c <test8+0x94>;;
     _32(0x1800007c),        //call 16f58 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffea3),        //call 16820 <test1>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6000007f),        //make $r0 = 127 (0x7f);;
     _32(0x1ffffea0),        //call 16820 <test1>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x6000ff80),        //make $r0 = -128 (0xffffff80);;
     _32(0x1ffffe9d),        //call 16820 <test1>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffe9a),        //call 16820 <test1>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffec1),        //call 168c8 <test2>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6000007f),        //make $r0 = 127 (0x7f);;
     _32(0x1ffffebe),        //call 168c8 <test2>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000080),        //make $r0 = 128 (0x80);;
     _32(0x1ffffebb),        //call 168c8 <test2>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x600000ff),        //make $r0 = 255 (0xff);;
     _32(0x1ffffeb8),        //call 168c8 <test2>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffee3),        //call 16980 <test3>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60007fff),        //make $r0 = 32767 (0x7fff);;
     _32(0x1ffffee0),        //call 16980 <test3>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60008000),        //make $r0 = -32768 (0xffff8000);;
     _32(0x1ffffedd),        //call 16980 <test3>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffeda),        //call 16980 <test3>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffff01),        //call 16a28 <test4>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60007fff),        //make $r0 = 32767 (0x7fff);;
     _32(0x1ffffefe),        //call 16a28 <test4>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _64(0x00000020e0000000),        //make $r0 = 32768 (0x8000);;
     _32(0x1ffffefa),        //call 16a28 <test4>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _64(0x0000003fe000ffc0),        //make $r0 = 65535 (0xffff);;
     _32(0x1ffffef6),        //call 16a28 <test4>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffff21),        //call 16ae0 <test5>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _64(0x001fffffe000ffc0),        //make $r0 = 2147483647 (0x7fffffff);;
     _32(0x1fffff1d),        //call 16ae0 <test5>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _64(0x07e00000e000003f),        //make $r0 = -2147483648 (0xffffffff80000000);;
     _32(0x1fffff19),        //call 16ae0 <test5>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1fffff16),        //call 16ae0 <test5>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffff3d),        //call 16b88 <test6>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _64(0x001fffffe000ffc0),        //make $r0 = 2147483647 (0x7fffffff);;
     _32(0x1fffff39),        //call 16b88 <test6>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _64(0x07e00000e000003f),        //make $r0 = -2147483648 (0xffffffff80000000);;
     _32(0x1fffff35),        //call 16b88 <test6>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1fffff32),        //call 16b88 <test6>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffff59),        //call 16c30 <test7>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _96(0x03ffffff87ffffffe000ffc0),        //make $r0 = 9223372036854775807 (0x7fffffffffffffff);;
     _32(0x1fffff54),        //call 16c30 <test7>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _96(0x0400000080000000e0000000),        //make $r0 = 9223372036854775808 (0x8000000000000000);;
     _32(0x1fffff4f),        //call 16c30 <test7>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1fffff4c),        //call 16c30 <test7>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffff73),        //call 16cd8 <test8>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _96(0x03ffffff87ffffffe000ffc0),        //make $r0 = 9223372036854775807 (0x7fffffffffffffff);;
     _32(0x1fffff6e),        //call 16cd8 <test8>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _96(0x0400000080000000e0000000),        //make $r0 = 9223372036854775808 (0x8000000000000000);;
     _32(0x1fffff69),        //call 16cd8 <test8>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1fffff66),        //call 16cd8 <test8>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 17330 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 18e60 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110110110000000; //0x16d80
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(test1, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(test2, 0b00010110100011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(test3, 0b00010110100110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(test4, 0b00010110101000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(test5, 0b00010110101011100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(test6, 0b00010110101110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(test7, 0b00010110110000110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(test8, 0b00010110110011011000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110110110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110111101011000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016d80;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
