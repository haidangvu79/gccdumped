// executing pipeline va_arg_9 test 
val k1_pipeline_va_arg_9: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_va_arg_9() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let to_hex: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _64(0x00000000f801b3c0),        //compw.leu $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 16844 <to_hex+0x24>;;
     _32(0x18000368),        //call 175e0 <abort>;;
     _96(0x00000000800000fce0040200),        //make $r1 = 258056 (0x3f008);;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2002e001),        //lbz $r0 = $r0[$r1];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let fap: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741080c),        //sd 32 (0x20)[$r12] = $r16;;
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _32(0x27050c0c),        //sd 48 (0x30)[$r12] = $r1;;
     _32(0x27090a0c),        //sd 40 (0x28)[$r12] = $r2;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x180004c2),        //call 17b98 <strlen>;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x75000400),        //sbfw $r0 = $r0, 16 (0x10);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08000480),        //cb.dnez $r0? 168f4 <fap+0x84>;;
     _32(0x1800034c),        //call 175e0 <abort>;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x61040040),        //addd $r1 = $r0, 1 (0x1);;
     _32(0x27050c0c),        //sd 48 (0x30)[$r12] = $r1;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x61040200),        //addd $r1 = $r0, 8 (0x8);;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x1fffffd0),        //call 16820 <to_hex>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 168f4 <fap+0x84>;;
     _32(0x1800033c),        //call 175e0 <abort>;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x087ffb80),        //cb.dnez $r0? 168b4 <fap+0x44>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840080c),        //ld $r16 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f0: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffffc4),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f1: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x2705020c),        //sd 8 (0x8)[$r12] = $r1;;
     _32(0x61000c0c),        //addd $r0 = $r12, 48 (0x30);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffffae),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f2: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x270d160c),        //sd 88 (0x58)[$r12] = $r3;;
     _32(0x2811180c),        //sq 96 (0x60)[$r12] = $r4r5;;
     _32(0x28191c0c),        //sq 112 (0x70)[$r12] = $r6r7;;
     _32(0x2821200c),        //sq 128 (0x80)[$r12] = $r8r9;;
     _32(0x2829240c),        //sq 144 (0x90)[$r12] = $r10r11;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x26050a0c),        //sw 40 (0x28)[$r12] = $r1;;
     _32(0x2709080c),        //sd 32 (0x20)[$r12] = $r2;;
     _32(0x6100160c),        //addd $r0 = $r12, 88 (0x58);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804080c),        //ld $r1 = 32 (0x20)[$r12];;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1fffff97),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f3: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x26050a0c),        //sw 40 (0x28)[$r12] = $r1;;
     _32(0x2609080c),        //sw 32 (0x20)[$r12] = $r2;;
     _32(0x270d060c),        //sd 24 (0x18)[$r12] = $r3;;
     _32(0x6100100c),        //addd $r0 = $r12, 64 (0x40);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1fffff7f),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f4: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x2715120c),        //sd 72 (0x48)[$r12] = $r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x26050a0c),        //sw 40 (0x28)[$r12] = $r1;;
     _32(0x2609080c),        //sw 32 (0x20)[$r12] = $r2;;
     _32(0x260d060c),        //sw 24 (0x18)[$r12] = $r3;;
     _32(0x2711040c),        //sd 16 (0x10)[$r12] = $r4;;
     _32(0x6100120c),        //addd $r0 = $r12, 72 (0x48);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x60000004),        //make $r0 = 4 (0x4);;
     _32(0x1fffff66),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f5: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x26050a0c),        //sw 40 (0x28)[$r12] = $r1;;
     _32(0x2609080c),        //sw 32 (0x20)[$r12] = $r2;;
     _32(0x260d060c),        //sw 24 (0x18)[$r12] = $r3;;
     _32(0x2611040c),        //sw 16 (0x10)[$r12] = $r4;;
     _32(0x2715020c),        //sd 8 (0x8)[$r12] = $r5;;
     _32(0x6100140c),        //addd $r0 = $r12, 80 (0x50);;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x60000005),        //make $r0 = 5 (0x5);;
     _32(0x1fffff4e),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f6: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x271d1e0c),        //sd 120 (0x78)[$r12] = $r7;;
     _32(0x2821200c),        //sq 128 (0x80)[$r12] = $r8r9;;
     _32(0x2829240c),        //sq 144 (0x90)[$r12] = $r10r11;;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x2605120c),        //sw 72 (0x48)[$r12] = $r1;;
     _32(0x2609100c),        //sw 64 (0x40)[$r12] = $r2;;
     _32(0x260d0e0c),        //sw 56 (0x38)[$r12] = $r3;;
     _32(0x26110c0c),        //sw 48 (0x30)[$r12] = $r4;;
     _32(0x26150a0c),        //sw 40 (0x28)[$r12] = $r5;;
     _32(0x2719080c),        //sd 32 (0x20)[$r12] = $r6;;
     _32(0x61001e0c),        //addd $r0 = $r12, 120 (0x78);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804080c),        //ld $r1 = 32 (0x20)[$r12];;
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x1fffff35),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f7: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x2605120c),        //sw 72 (0x48)[$r12] = $r1;;
     _32(0x2609100c),        //sw 64 (0x40)[$r12] = $r2;;
     _32(0x260d0e0c),        //sw 56 (0x38)[$r12] = $r3;;
     _32(0x26110c0c),        //sw 48 (0x30)[$r12] = $r4;;
     _32(0x26150a0c),        //sw 40 (0x28)[$r12] = $r5;;
     _32(0x2619080c),        //sw 32 (0x20)[$r12] = $r6;;
     _32(0x271d060c),        //sd 24 (0x18)[$r12] = $r7;;
     _32(0x6100180c),        //addd $r0 = $r12, 96 (0x60);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x60000007),        //make $r0 = 7 (0x7);;
     _32(0x1fffff1b),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f8: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x27251a0c),        //sd 104 (0x68)[$r12] = $r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x2605120c),        //sw 72 (0x48)[$r12] = $r1;;
     _32(0x2609100c),        //sw 64 (0x40)[$r12] = $r2;;
     _32(0x260d0e0c),        //sw 56 (0x38)[$r12] = $r3;;
     _32(0x26110c0c),        //sw 48 (0x30)[$r12] = $r4;;
     _32(0x26150a0c),        //sw 40 (0x28)[$r12] = $r5;;
     _32(0x2619080c),        //sw 32 (0x20)[$r12] = $r6;;
     _32(0x261d060c),        //sw 24 (0x18)[$r12] = $r7;;
     _32(0x2721040c),        //sd 16 (0x10)[$r12] = $r8;;
     _32(0x61001a0c),        //addd $r0 = $r12, 104 (0x68);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x60000008),        //make $r0 = 8 (0x8);;
     _32(0x1fffff00),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f9: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x2605120c),        //sw 72 (0x48)[$r12] = $r1;;
     _32(0x2609100c),        //sw 64 (0x40)[$r12] = $r2;;
     _32(0x260d0e0c),        //sw 56 (0x38)[$r12] = $r3;;
     _32(0x26110c0c),        //sw 48 (0x30)[$r12] = $r4;;
     _32(0x26150a0c),        //sw 40 (0x28)[$r12] = $r5;;
     _32(0x2619080c),        //sw 32 (0x20)[$r12] = $r6;;
     _32(0x261d060c),        //sw 24 (0x18)[$r12] = $r7;;
     _32(0x2621040c),        //sw 16 (0x10)[$r12] = $r8;;
     _32(0x2725020c),        //sd 8 (0x8)[$r12] = $r9;;
     _32(0x61001c0c),        //addd $r0 = $r12, 112 (0x70);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x60000009),        //make $r0 = 9 (0x9);;
     _32(0x1ffffee6),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let f10: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x272d260c),        //sd 152 (0x98)[$r12] = $r11;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2729080c),        //sd 32 (0x20)[$r12] = $r10;;
     _32(0x6100260c),        //addd $r0 = $r12, 152 (0x98);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804080c),        //ld $r1 = 32 (0x20)[$r12];;
     _32(0x6000000a),        //make $r0 = 10 (0xa);;
     _32(0x1ffffecb),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f11: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x272d060c),        //sd 24 (0x18)[$r12] = $r11;;
     _32(0x6100200c),        //addd $r0 = $r12, 128 (0x80);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x6000000b),        //make $r0 = 11 (0xb);;
     _32(0x1ffffeaf),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f12: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x262d060c),        //sw 24 (0x18)[$r12] = $r11;;
     _32(0x6100220c),        //addd $r0 = $r12, 136 (0x88);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804200c),        //ld $r1 = 128 (0x80)[$r12];;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x1ffffe93),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f13: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x262d060c),        //sw 24 (0x18)[$r12] = $r11;;
     _32(0x6100240c),        //addd $r0 = $r12, 144 (0x90);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804220c),        //ld $r1 = 136 (0x88)[$r12];;
     _32(0x6000000d),        //make $r0 = 13 (0xd);;
     _32(0x1ffffe77),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f14: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x262d060c),        //sw 24 (0x18)[$r12] = $r11;;
     _32(0x6100260c),        //addd $r0 = $r12, 152 (0x98);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804240c),        //ld $r1 = 144 (0x90)[$r12];;
     _32(0x6000000e),        //make $r0 = 14 (0xe);;
     _32(0x1ffffe5b),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let f15: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x26011c0c),        //sw 112 (0x70)[$r12] = $r0;;
     _32(0x26051a0c),        //sw 104 (0x68)[$r12] = $r1;;
     _32(0x2609180c),        //sw 96 (0x60)[$r12] = $r2;;
     _32(0x260d160c),        //sw 88 (0x58)[$r12] = $r3;;
     _32(0x2611140c),        //sw 80 (0x50)[$r12] = $r4;;
     _32(0x2615120c),        //sw 72 (0x48)[$r12] = $r5;;
     _32(0x2619100c),        //sw 64 (0x40)[$r12] = $r6;;
     _32(0x261d0e0c),        //sw 56 (0x38)[$r12] = $r7;;
     _32(0x26210c0c),        //sw 48 (0x30)[$r12] = $r8;;
     _32(0x26250a0c),        //sw 40 (0x28)[$r12] = $r9;;
     _32(0x2629080c),        //sw 32 (0x20)[$r12] = $r10;;
     _32(0x262d060c),        //sw 24 (0x18)[$r12] = $r11;;
     _32(0x6100280c),        //addd $r0 = $r12, 160 (0xa0);;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3804260c),        //ld $r1 = 152 (0x98)[$r12];;
     _32(0x6000000f),        //make $r0 = 15 (0xf);;
     _32(0x1ffffe3f),        //call 16870 <fap>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741140c),        //sd 80 (0x50)[$r12] = $r16;;
     _96(0x0000000080000100e000f000),        //make $r0 = 263104 (0x403c0);;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x6000000f),        //make $r0 = 15 (0xf);;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _32(0x6000000e),        //make $r0 = 14 (0xe);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x6000000d),        //make $r0 = 13 (0xd);;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x6000000b),        //make $r0 = 11 (0xb);;
     _32(0x2601000c),        //sw 0 (0x0)[$r12] = $r0;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x60100003),        //make $r4 = 3 (0x3);;
     _32(0x600c0002),        //make $r3 = 2 (0x2);;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x1ffffe47),        //call 16920 <f0>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000040),        //addd $r0 = $r0, 1 (0x1);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x60100003),        //make $r4 = 3 (0x3);;
     _32(0x600c0002),        //make $r3 = 2 (0x2);;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe44),        //call 16978 <f1>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000080),        //addd $r0 = $r0, 2 (0x2);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x60100003),        //make $r4 = 3 (0x3);;
     _32(0x600c0002),        //make $r3 = 2 (0x2);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe41),        //call 169d0 <f2>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x610000c0),        //addd $r0 = $r0, 3 (0x3);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x60100003),        //make $r4 = 3 (0x3);;
     _32(0x6a0c0000),        //copyd $r3 = $r0;;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe40),        //call 16a30 <f3>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000100),        //addd $r0 = $r0, 4 (0x4);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _32(0x6a100000),        //copyd $r4 = $r0;;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe3f),        //call 16a90 <f4>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000140),        //addd $r0 = $r0, 5 (0x5);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x60180005),        //make $r6 = 5 (0x5);;
     _32(0x6a140000),        //copyd $r5 = $r0;;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe3e),        //call 16af0 <f5>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000180),        //addd $r0 = $r0, 6 (0x6);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x601c0006),        //make $r7 = 6 (0x6);;
     _32(0x6a180000),        //copyd $r6 = $r0;;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe3d),        //call 16b50 <f6>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x610001c0),        //addd $r0 = $r0, 7 (0x7);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x60200007),        //make $r8 = 7 (0x7);;
     _32(0x6a1c0000),        //copyd $r7 = $r0;;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe3e),        //call 16bb8 <f7>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000200),        //addd $r0 = $r0, 8 (0x8);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x60240008),        //make $r9 = 8 (0x8);;
     _32(0x6a200000),        //copyd $r8 = $r0;;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe3f),        //call 16c20 <f8>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000240),        //addd $r0 = $r0, 9 (0x9);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x60280009),        //make $r10 = 9 (0x9);;
     _32(0x6a240000),        //copyd $r9 = $r0;;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe40),        //call 16c88 <f9>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000280),        //addd $r0 = $r0, 10 (0xa);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x602c000a),        //make $r11 = 10 (0xa);;
     _32(0x6a280000),        //copyd $r10 = $r0;;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe41),        //call 16cf0 <f10>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x610002c0),        //addd $r0 = $r0, 11 (0xb);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x6004000b),        //make $r1 = 11 (0xb);;
     _32(0x2605000c),        //sw 0 (0x0)[$r12] = $r1;;
     _32(0x6a2c0000),        //copyd $r11 = $r0;;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe44),        //call 16d60 <f11>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000300),        //addd $r0 = $r0, 12 (0xc);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x6004000c),        //make $r1 = 12 (0xc);;
     _32(0x2605020c),        //sw 8 (0x8)[$r12] = $r1;;
     _32(0x2701000c),        //sd 0 (0x0)[$r12] = $r0;;
     _32(0x602c000b),        //make $r11 = 11 (0xb);;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe48),        //call 16dd0 <f12>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000340),        //addd $r0 = $r0, 13 (0xd);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x6004000d),        //make $r1 = 13 (0xd);;
     _32(0x2605040c),        //sw 16 (0x10)[$r12] = $r1;;
     _32(0x2701020c),        //sd 8 (0x8)[$r12] = $r0;;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x2601000c),        //sw 0 (0x0)[$r12] = $r0;;
     _32(0x602c000b),        //make $r11 = 11 (0xb);;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe4c),        //call 16e40 <f13>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x61000380),        //addd $r0 = $r0, 14 (0xe);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x6004000e),        //make $r1 = 14 (0xe);;
     _32(0x2605060c),        //sw 24 (0x18)[$r12] = $r1;;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x6000000d),        //make $r0 = 13 (0xd);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x2601000c),        //sw 0 (0x0)[$r12] = $r0;;
     _32(0x602c000b),        //make $r11 = 11 (0xb);;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe50),        //call 16eb0 <f14>;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x610003c0),        //addd $r0 = $r0, 15 (0xf);;
     _32(0x6004000f),        //make $r1 = 15 (0xf);;
     _32(0x2605080c),        //sw 32 (0x20)[$r12] = $r1;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x6000000e),        //make $r0 = 14 (0xe);;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x6000000d),        //make $r0 = 13 (0xd);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x2601000c),        //sw 0 (0x0)[$r12] = $r0;;
     _32(0x602c000b),        //make $r11 = 11 (0xb);;
     _32(0x6028000a),        //make $r10 = 10 (0xa);;
     _32(0x60240009),        //make $r9 = 9 (0x9);;
     _32(0x60200008),        //make $r8 = 8 (0x8);;
     _32(0x601c0007),        //make $r7 = 7 (0x7);;
     _32(0x60180006),        //make $r6 = 6 (0x6);;
     _32(0x60140005),        //make $r5 = 5 (0x5);;
     _32(0x60100004),        //make $r4 = 4 (0x4);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe54),        //call 16f20 <f15>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1800000a),        //call 17600 <exit>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000105),        //call 17a00 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x9800085f),        //call 19770 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit_: list_I = 
 [|
 |];

let adr_start:bits(addr_bits) = 0b00010110111110010000; //0x16f90
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(to_hex, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fap, 0b00010110100001110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f0, 0b00010110100100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f1, 0b00010110100101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f2, 0b00010110100111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f3, 0b00010110101000110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f4, 0b00010110101010010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f5, 0b00010110101011110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f6, 0b00010110101101010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f7, 0b00010110101110111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f8, 0b00010110110000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f9, 0b00010110110010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f10, 0b00010110110011110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f11, 0b00010110110101100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f12, 0b00010110110111010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f13, 0b00010110111001000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f14, 0b00010110111010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f15, 0b00010110111100100000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110111110010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111010111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit_, 0b00010111011000000000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016f90;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
