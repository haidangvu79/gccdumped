// executing pipeline comp_goto_1 test 
val k1_pipeline_comp_goto_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_comp_goto_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let f: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x18000149)        //call 16d50 <abort>;;
 |];

let simulator_kernel: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x2849060c),        //sq 24 (0x18)[$r12] = $r18r19;;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741100c),        //sd 64 (0x40)[$r12] = $r16;;
     _32(0x28510a0c),        //sq 40 (0x28)[$r12] = $r20r21;;
     _32(0x27590e0c),        //sd 56 (0x38)[$r12] = $r22;;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x2705120c),        //sd 72 (0x48)[$r12] = $r1;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x38500000),        //ld $r20 = 0 (0x0)[$r0];;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x61380200),        //addd $r14 = $r0, 8 (0x8);;
     _96(0x000000008000005ae0484600),        //make $r18 = 92440 (0x16918);;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _64(0x00000001e1580400),        //addd $r22 = $r0, 1040 (0x410);;
     _32(0x3000140c),        //lwz $r0 = 80 (0x50)[$r12];;
     _32(0x0c800980),        //cb.weqz $r0? 16918 <simulator_kernel+0xe8>;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _64(0x18000001b8000200),        //ld $r0 = 1032 (0x408)[$r0];;
     _32(0x27011c0c),        //sd 112 (0x70)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x1000001b),        //goto 16908 <simulator_kernel+0xd8>;;
     _32(0x34001f0c),        //lws $r0 = 124 (0x7c)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x38041c0c),        //ld $r1 = 112 (0x70)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x69031000),        //extfs $r0 = $r0, 17 (0x11), 0 (0x0);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _96(0x00000000800000f8e0040200),        //make $r1 = 253960 (0x3e008);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x75010012),        //sbfd $r0 = $r18, $r0;;
     _32(0x34041f0c),        //lws $r1 = 124 (0x7c)[$r12];;
     _32(0x790620c1),        //slld $r1 = $r1, 3 (0x3);;
     _32(0x38081c0c),        //ld $r2 = 112 (0x70)[$r12];;
     _32(0x71050042),        //addd $r1 = $r2, $r1;;
     _32(0x79023380),        //sllw $r0 = $r0, 14 (0xe);;
     _32(0x7a023380),        //sraw $r0 = $r0, 14 (0xe);;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _32(0x30000001),        //lwz $r0 = 0 (0x0)[$r1];;
     _32(0x61031002),        //insf $r0 = $r2, 17 (0x11), 0 (0x0);;
     _32(0x26010001),        //sw 0 (0x0)[$r1] = $r0;;
     _32(0x30001f0c),        //lwz $r0 = 124 (0x7c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26011f0c),        //sw 124 (0x7c)[$r12] = $r0;;
     _32(0x30041f0c),        //lwz $r1 = 124 (0x7c)[$r12];;
     _32(0x3000140c),        //lwz $r0 = 80 (0x50)[$r12];;
     _32(0x7201b001),        //compw.lt $r0 = $r1, $r0;;
     _32(0x0c7ff8c0),        //cb.wnez $r0? 168a0 <simulator_kernel+0x70>;;
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0x61500200),        //addd $r20 = $r0, 8 (0x8);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _32(0x6503d580),        //extfz $r0 = $r0, 29 (0x1d), 22 (0x16);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x7101000e),        //addd $r0 = $r14, $r0;;
     _32(0x30540000),        //lwz $r21 = 0 (0x0)[$r0];;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x6503d580),        //extfz $r0 = $r0, 29 (0x1d), 22 (0x16);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x784cffc0),        //zxwd $r19 = $r0;;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x69031000),        //extfs $r0 = $r0, 17 (0x11), 0 (0x0);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x71010012),        //addd $r0 = $r18, $r0;;
     _32(0x7f03f000),        //nop ;;
     _32(0x0fd80000),        //igoto $r0;;
     _32(0x7a000015),        //copyw $r0 = $r21;;
     _32(0x7b023300),        //srlw $r0 = $r0, 12 (0xc);;
     _32(0x26011b0c),        //sw 108 (0x6c)[$r12] = $r0;;
     _32(0x30001b0c),        //lwz $r0 = 108 (0x6c)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0x61500200),        //addd $r20 = $r0, 8 (0x8);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x2701160c),        //sd 88 (0x58)[$r12] = $r0;;
     _32(0x30001e0c),        //lwz $r0 = 120 (0x78)[$r12];;
     _32(0x79022100),        //slld $r0 = $r0, 4 (0x4);;
     _32(0x71010016),        //addd $r0 = $r22, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x26011a0c),        //sw 104 (0x68)[$r12] = $r0;;
     _32(0x30001e0c),        //lwz $r0 = 120 (0x78)[$r12];;
     _32(0x79022100),        //slld $r0 = $r0, 4 (0x4);;
     _32(0x71010016),        //addd $r0 = $r22, $r0;;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x2701180c),        //sd 96 (0x60)[$r12] = $r0;;
     _32(0x30041a0c),        //lwz $r1 = 104 (0x68)[$r12];;
     _32(0x30001b0c),        //lwz $r0 = 108 (0x6c)[$r12];;
     _32(0x7001b001),        //compw.ne $r0 = $r1, $r0;;
     _32(0x0c000780),        //cb.wnez $r0? 16a54 <simulator_kernel+0x224>;;
     _32(0x6a040015),        //copyd $r1 = $r21;;
     _32(0x3800180c),        //ld $r0 = 96 (0x60)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x6903f013),        //sxwd $r0 = $r19;;
     _32(0x7101000e),        //addd $r0 = $r14, $r0;;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _32(0x6503d580),        //extfz $r0 = $r0, 29 (0x1d), 22 (0x16);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x7101000e),        //addd $r0 = $r14, $r0;;
     _32(0x30540000),        //lwz $r21 = 0 (0x0)[$r0];;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x6503d580),        //extfz $r0 = $r0, 29 (0x1d), 22 (0x16);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x784cffc0),        //zxwd $r19 = $r0;;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x69031000),        //extfs $r0 = $r0, 17 (0x11), 0 (0x0);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x71010012),        //addd $r0 = $r18, $r0;;
     _32(0x17ffffcb),        //goto 1697c <simulator_kernel+0x14c>;;
     _32(0x30001a0c),        //lwz $r0 = 104 (0x68)[$r12];;
     _32(0x0d800700),        //cb.wgez $r0? 16ac8 <simulator_kernel+0x298>;;
     _32(0x1fffff71),        //call 16820 <f>;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x6903f013),        //sxwd $r0 = $r19;;
     _32(0x7101000e),        //addd $r0 = $r14, $r0;;
     _32(0x30040001),        //lwz $r1 = 0 (0x0)[$r1];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _32(0x6503d580),        //extfz $r0 = $r0, 29 (0x1d), 22 (0x16);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x7101000e),        //addd $r0 = $r14, $r0;;
     _32(0x30540000),        //lwz $r21 = 0 (0x0)[$r0];;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x6503d580),        //extfz $r0 = $r0, 29 (0x1d), 22 (0x16);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x79023080),        //sllw $r0 = $r0, 2 (0x2);;
     _32(0x784cffc0),        //zxwd $r19 = $r0;;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x69031000),        //extfs $r0 = $r0, 17 (0x11), 0 (0x0);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x71010012),        //addd $r0 = $r18, $r0;;
     _32(0x17ffffae),        //goto 1697c <simulator_kernel+0x14c>;;
     _32(0x30001e0c),        //lwz $r0 = 120 (0x78)[$r12];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x26011e0c),        //sw 120 (0x78)[$r12] = $r0;;
     _32(0x17ffffb3),        //goto 169a8 <simulator_kernel+0x178>;;
     _32(0x6903f013),        //sxwd $r0 = $r19;;
     _32(0x7101000e),        //addd $r0 = $r14, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x3840100c),        //ld $r16 = 64 (0x40)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c500a0c),        //lq $r20r21 = 40 (0x28)[$r12];;
     _32(0x38580e0c),        //ld $r22 = 56 (0x38)[$r12];;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _64(0x07fffffae130f00c),        //addd $r12 = $r12, -5184 (0xffffffffffffebc0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x60002000),        //make $r0 = 8192 (0x2000);;
     _32(0x180000e5),        //call 16eb8 <malloc>;;
     _64(0x18000005a7010c0c),        //sd 5168 (0x1430)[$r12] = $r0;;
     _64(0x0000048de0001400),        //make $r0 = 1193040 (0x123450);;
     _64(0x18000005a6010b0c),        //sw 5164 (0x142c)[$r12] = $r0;;
     _64(0x18000005b0000b0c),        //lwz $r0 = 5164 (0x142c)[$r12];;
     _32(0x7b023300),        //srlw $r0 = $r0, 12 (0xc);;
     _64(0x18000005a6010a0c),        //sw 5160 (0x1428)[$r12] = $r0;;
     _64(0x18000005b8000c0c),        //ld $r0 = 5168 (0x1430)[$r12];;
     _64(0x00000003e100ffc0),        //addd $r0 = $r0, 4095 (0xfff);;
     _64(0x07fffffce8000000),        //andd $r0 = $r0, -4096 (0xfffffffffffff000);;
     _64(0x18000005a7010c0c),        //sd 5168 (0x1430)[$r12] = $r0;;
     _64(0x18000005b0000a0c),        //lwz $r0 = 5160 (0x1428)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x61001000),        //addd $r0 = $r0, 64 (0x40);;
     _32(0x79022100),        //slld $r0 = $r0, 4 (0x4);;
     _64(0x00000005e104100c),        //addd $r1 = $r12, 5184 (0x1440);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _64(0x07fffffae100f800),        //addd $r0 = $r0, -5152 (0xffffffffffffebe0);;
     _64(0x18000005b0040a0c),        //lwz $r1 = 5160 (0x1428)[$r12];;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _64(0x18000005b0000a0c),        //lwz $r0 = 5160 (0x1428)[$r12];;
     _32(0x79023300),        //sllw $r0 = $r0, 12 (0xc);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _64(0x18000005b0000a0c),        //lwz $r0 = 5160 (0x1428)[$r12];;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x18000005b8040c0c),        //ld $r1 = 5168 (0x1430)[$r12];;
     _32(0x75050042),        //sbfd $r1 = $r2, $r1;;
     _32(0x61001000),        //addd $r0 = $r0, 64 (0x40);;
     _32(0x79022100),        //slld $r0 = $r0, 4 (0x4);;
     _64(0x00000005e108100c),        //addd $r2 = $r12, 5184 (0x1440);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _64(0x07fffffae100fa00),        //addd $r0 = $r0, -5144 (0xffffffffffffebe8);;
     _32(0x27050000),        //sd 0 (0x0)[$r0] = $r1;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x61031001),        //insf $r0 = $r1, 17 (0x11), 0 (0x0);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _64(0x18000005b0000b0c),        //lwz $r0 = 5164 (0x142c)[$r12];;
     _32(0x2601080c),        //sw 32 (0x20)[$r12] = $r0;;
     _64(0x18000005b0000b0c),        //lwz $r0 = 5164 (0x142c)[$r12];;
     _64(0x00000003e804ffc0),        //andd $r1 = $r0, 4095 (0xfff);;
     _64(0x18000005b8000c0c),        //ld $r0 = 5168 (0x1430)[$r12];;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x60040058),        //make $r1 = 88 (0x58);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6103d581),        //insf $r0 = $r1, 29 (0x1d), 22 (0x16);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x3000030c),        //lwz $r0 = 12 (0xc)[$r12];;
     _32(0x60040002),        //make $r1 = 2 (0x2);;
     _32(0x6103d581),        //insf $r0 = $r1, 29 (0x1d), 22 (0x16);;
     _32(0x2601030c),        //sw 12 (0xc)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _64(0x18000005a6010f0c),        //sw 5180 (0x143c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16ca4 <main+0x194>;;
     _96(0x0000000080000117e0082200),        //make $r2 = 285832 (0x45c88);;
     _64(0x18000005b4000f0c),        //lws $r0 = 5180 (0x143c)[$r12];;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x2707f002),        //sd.xs $r0[$r2] = $r1;;
     _64(0x18000005b0000f0c),        //lwz $r0 = 5180 (0x143c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _64(0x18000005a6010f0c),        //sw 5180 (0x143c)[$r12] = $r0;;
     _64(0x18000005b0000f0c),        //lwz $r0 = 5180 (0x143c)[$r12];;
     _64(0x00000000f401b040),        //compw.le $r0 = $r0, 1 (0x1);;
     _32(0x0c7ffc00),        //cb.wnez $r0? 16c74 <main+0x164>;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x61031001),        //insf $r0 = $r1, 17 (0x11), 0 (0x0);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6103d581),        //insf $r0 = $r1, 29 (0x1d), 22 (0x16);;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _96(0x0000000080000117e0042200),        //make $r1 = 285832 (0x45c88);;
     _32(0x3800020c),        //ld $r0 = 8 (0x8)[$r12];;
     _32(0x27010401),        //sd 16 (0x10)[$r1] = $r0;;
     _96(0x0000000080000117e0002200),        //make $r0 = 285832 (0x45c88);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _96(0x0000000080000117e0002200),        //make $r0 = 285832 (0x45c88);;
     _64(0x18000001a701060c),        //sd 1048 (0x418)[$r12] = $r0;;
     _32(0x6100040c),        //addd $r0 = $r12, 16 (0x10);;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffffec5),        //call 16830 <simulator_kernel>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x18000005a601090c),        //sw 5156 (0x1424)[$r12] = $r0;;
     _64(0x18000005b000090c),        //lwz $r0 = 5156 (0x1424)[$r12];;
     _64(0x00000002f101b600),        //compw.eq $r0 = $r0, 88 (0x58);;
     _32(0x0c000080),        //cb.wnez $r0? 16d44 <main+0x234>;;
     _32(0x18000004),        //call 16d50 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1800000a),        //call 16d70 <exit>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x9800039d),        //call 17bd0 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000845),        //call 18e78 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit_: list_I = 
 [|
 |];

let adr_start:bits(addr_bits) = 0b00010110101100010000; //0x16b10
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(f, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(simulator_kernel, 0b00010110100000110000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110101100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110110101010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit_, 0b00010110110101110000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016b10;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
