// executing pipeline scal_to_vec2.c.out.dumped test 
val k1_pipeline_scal_to_vec2: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_scal_to_vec2() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let vlng: list_I = 
 [|
     _32(0x6000002a),        //make $r0 = 42 (0x2a);;
     _32(0x0fd00000)        //ret ;;
 |];

let vint: list_I = 
 [|
     _32(0x6000002b),        //make $r0 = 43 (0x2b);;
     _32(0x0fd00000)        //ret ;;
 |];

let vsrt: list_I = 
 [|
     _32(0x6000002a),        //make $r0 = 42 (0x2a);;
     _32(0x0fd00000)        //ret ;;
 |];

let vchr: list_I = 
 [|
     _32(0x6000002a),        //make $r0 = 42 (0x2a);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130c80c),        //addd $r12 = $r12, -224 (0xffffff20);;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x26010a0c),        //sw 40 (0x28)[$r12] = $r0;;
     _32(0x2705080c),        //sd 32 (0x20)[$r12] = $r1;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x780c3fc0),        //zxbd $r3 = $r0;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60037003),        //insf $r0 = $r3, 7 (0x7), 0 (0x0);;
     _32(0x600c0001),        //make $r3 = 1 (0x1);;
     _32(0x6003f203),        //insf $r0 = $r3, 15 (0xf), 8 (0x8);;
     _32(0x600c0002),        //make $r3 = 2 (0x2);;
     _32(0x61037403),        //insf $r0 = $r3, 23 (0x17), 16 (0x10);;
     _32(0x600c0003),        //make $r3 = 3 (0x3);;
     _32(0x6103f603),        //insf $r0 = $r3, 31 (0x1f), 24 (0x18);;
     _32(0x600c0004),        //make $r3 = 4 (0x4);;
     _32(0x62037803),        //insf $r0 = $r3, 39 (0x27), 32 (0x20);;
     _32(0x600c0005),        //make $r3 = 5 (0x5);;
     _32(0x6203fa03),        //insf $r0 = $r3, 47 (0x2f), 40 (0x28);;
     _32(0x600c0006),        //make $r3 = 6 (0x6);;
     _32(0x63037c03),        //insf $r0 = $r3, 55 (0x37), 48 (0x30);;
     _32(0x600c0007),        //make $r3 = 7 (0x7);;
     _32(0x6303fe03),        //insf $r0 = $r3, 63 (0x3f), 56 (0x38);;
     _32(0x60077002),        //insf $r1 = $r2, 7 (0x7), 0 (0x0);;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x6007f202),        //insf $r1 = $r2, 15 (0xf), 8 (0x8);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x61077402),        //insf $r1 = $r2, 23 (0x17), 16 (0x10);;
     _32(0x60080003),        //make $r2 = 3 (0x3);;
     _32(0x6107f602),        //insf $r1 = $r2, 31 (0x1f), 24 (0x18);;
     _32(0x60080004),        //make $r2 = 4 (0x4);;
     _32(0x62077802),        //insf $r1 = $r2, 39 (0x27), 32 (0x20);;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x6207fa02),        //insf $r1 = $r2, 47 (0x2f), 40 (0x28);;
     _32(0x60080006),        //make $r2 = 6 (0x6);;
     _32(0x63077c02),        //insf $r1 = $r2, 55 (0x37), 48 (0x30);;
     _32(0x60080007),        //make $r2 = 7 (0x7);;
     _32(0x6307fe02),        //insf $r1 = $r2, 63 (0x3f), 56 (0x38);;
     _32(0x2801280c),        //sq 160 (0xa0)[$r12] = $r0r1;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6003f002),        //insf $r0 = $r2, 15 (0xf), 0 (0x0);;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x6103f402),        //insf $r0 = $r2, 31 (0x1f), 16 (0x10);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x6203f802),        //insf $r0 = $r2, 47 (0x2f), 32 (0x20);;
     _32(0x60080003),        //make $r2 = 3 (0x3);;
     _32(0x6303fc02),        //insf $r0 = $r2, 63 (0x3f), 48 (0x30);;
     _32(0x60080004),        //make $r2 = 4 (0x4);;
     _32(0x6007f002),        //insf $r1 = $r2, 15 (0xf), 0 (0x0);;
     _32(0x60080005),        //make $r2 = 5 (0x5);;
     _32(0x6107f402),        //insf $r1 = $r2, 31 (0x1f), 16 (0x10);;
     _32(0x60080006),        //make $r2 = 6 (0x6);;
     _32(0x6207f802),        //insf $r1 = $r2, 47 (0x2f), 32 (0x20);;
     _32(0x60080007),        //make $r2 = 7 (0x7);;
     _32(0x6307fc02),        //insf $r1 = $r2, 63 (0x3f), 48 (0x30);;
     _32(0x2801200c),        //sq 128 (0x80)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x30080a0c),        //lwz $r2 = 40 (0x28)[$r12];;
     _32(0x6103f002),        //insf $r0 = $r2, 31 (0x1f), 0 (0x0);;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x6303f802),        //insf $r0 = $r2, 63 (0x3f), 32 (0x20);;
     _32(0x60080002),        //make $r2 = 2 (0x2);;
     _32(0x6107f002),        //insf $r1 = $r2, 31 (0x1f), 0 (0x0);;
     _32(0x60080003),        //make $r2 = 3 (0x3);;
     _32(0x6307f802),        //insf $r1 = $r2, 63 (0x3f), 32 (0x20);;
     _32(0x2801180c),        //sq 96 (0x60)[$r12] = $r0r1;;
     _32(0x34080a0c),        //lws $r2 = 40 (0x28)[$r12];;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6a000002),        //copyd $r0 = $r2;;
     _32(0x60080001),        //make $r2 = 1 (0x1);;
     _32(0x6a040002),        //copyd $r1 = $r2;;
     _32(0x2801100c),        //sq 64 (0x40)[$r12] = $r0r1;;
     _32(0x1fffffac),        //call 16838 <vchr>;;
     _32(0x78083fc0),        //zxbd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60037002),        //insf $r0 = $r2, 7 (0x7), 0 (0x0);;
     _32(0x6003f202),        //insf $r0 = $r2, 15 (0xf), 8 (0x8);;
     _32(0x61037402),        //insf $r0 = $r2, 23 (0x17), 16 (0x10);;
     _32(0x6103f602),        //insf $r0 = $r2, 31 (0x1f), 24 (0x18);;
     _32(0x62037802),        //insf $r0 = $r2, 39 (0x27), 32 (0x20);;
     _32(0x6203fa02),        //insf $r0 = $r2, 47 (0x2f), 40 (0x28);;
     _32(0x63037c02),        //insf $r0 = $r2, 55 (0x37), 48 (0x30);;
     _32(0x6303fe02),        //insf $r0 = $r2, 63 (0x3f), 56 (0x38);;
     _32(0x60077002),        //insf $r1 = $r2, 7 (0x7), 0 (0x0);;
     _32(0x6007f202),        //insf $r1 = $r2, 15 (0xf), 8 (0x8);;
     _32(0x61077402),        //insf $r1 = $r2, 23 (0x17), 16 (0x10);;
     _32(0x6107f602),        //insf $r1 = $r2, 31 (0x1f), 24 (0x18);;
     _32(0x62077802),        //insf $r1 = $r2, 39 (0x27), 32 (0x20);;
     _32(0x6207fa02),        //insf $r1 = $r2, 47 (0x2f), 40 (0x28);;
     _32(0x63077c02),        //insf $r1 = $r2, 55 (0x37), 48 (0x30);;
     _32(0x6307fe02),        //insf $r1 = $r2, 63 (0x3f), 56 (0x38);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00280c),        //lq $r0r1 = 160 (0xa0)[$r12];;
     _96(0x07f807f8803fc03fe010c000),        //make $r4 = 18374966859414961920 (0xff00ff00ff00ff00);;
     _32(0x78190100),        //andd $r6 = $r0, $r4;;
     _32(0x79165200),        //sllhqs $r5 = $r0, 8 (0x8);;
     _32(0x78210102),        //andd $r8 = $r2, $r4;;
     _32(0x791e5202),        //sllhqs $r7 = $r2, 8 (0x8);;
     _32(0x71193188),        //addhq $r6 = $r8, $r6;;
     _32(0x71153147),        //addhq $r5 = $r7, $r5;;
     _32(0x7b165205),        //srlhqs $r5 = $r5, 8 (0x8);;
     _32(0x7a490146),        //ord $r18 = $r6, $r5;;
     _32(0x78150101),        //andd $r5 = $r1, $r4;;
     _32(0x79025201),        //sllhqs $r0 = $r1, 8 (0x8);;
     _32(0x78050103),        //andd $r1 = $r3, $r4;;
     _32(0x790a5203),        //sllhqs $r2 = $r3, 8 (0x8);;
     _32(0x71053141),        //addhq $r1 = $r1, $r5;;
     _32(0x71013002),        //addhq $r0 = $r2, $r0;;
     _32(0x7b025200),        //srlhqs $r0 = $r0, 8 (0x8);;
     _32(0x7a4d0001),        //ord $r19 = $r1, $r0;;
     _32(0x2849240c),        //sq 144 (0x90)[$r12] = $r18r19;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601370c),        //sw 220 (0xdc)[$r12] = $r0;;
     _32(0x10000019),        //goto 16aa0 <main+0x260>;;
     _32(0x3400370c),        //lws $r0 = 220 (0xdc)[$r12];;
     _32(0x6104240c),        //addd $r1 = $r12, 144 (0x90);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x1fffff78),        //call 16838 <vchr>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3400370c),        //lws $r0 = 220 (0xdc)[$r12];;
     _32(0x6108280c),        //addd $r2 = $r12, 160 (0xa0);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x20000000),        //lbz $r0 = 0 (0x0)[$r0];;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16a94 <main+0x254>;;
     _32(0x180001b2),        //call 17158 <abort>;;
     _32(0x3000370c),        //lwz $r0 = 220 (0xdc)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601370c),        //sw 220 (0xdc)[$r12] = $r0;;
     _32(0x3000370c),        //lwz $r0 = 220 (0xdc)[$r12];;
     _64(0x00000000f401b3c0),        //compw.le $r0 = $r0, 15 (0xf);;
     _32(0x0c7ff940),        //cb.wnez $r0? 16a40 <main+0x200>;;
     _32(0x1fffff60),        //call 16830 <vsrt>;;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6003f002),        //insf $r0 = $r2, 15 (0xf), 0 (0x0);;
     _32(0x6103f402),        //insf $r0 = $r2, 31 (0x1f), 16 (0x10);;
     _32(0x6203f802),        //insf $r0 = $r2, 47 (0x2f), 32 (0x20);;
     _32(0x6303fc02),        //insf $r0 = $r2, 63 (0x3f), 48 (0x30);;
     _32(0x6007f002),        //insf $r1 = $r2, 15 (0xf), 0 (0x0);;
     _32(0x6107f402),        //insf $r1 = $r2, 31 (0x1f), 16 (0x10);;
     _32(0x6207f802),        //insf $r1 = $r2, 47 (0x2f), 32 (0x20);;
     _32(0x6307fc02),        //insf $r1 = $r2, 63 (0x3f), 48 (0x30);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00200c),        //lq $r0r1 = 128 (0x80)[$r12];;
     _32(0xf1013002),        //addhq $r0 = $r2, $r0
     _32(0x71053043),        //addhq $r1 = $r3, $r1;;
     _32(0x28011c0c),        //sq 112 (0x70)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601360c),        //sw 216 (0xd8)[$r12] = $r0;;
     _32(0x1000001b),        //goto 16b6c <main+0x32c>;;
     _32(0x3400360c),        //lws $r0 = 216 (0xd8)[$r12];;
     _32(0x79022040),        //slld $r0 = $r0, 1 (0x1);;
     _32(0x61041c0c),        //addd $r1 = $r12, 112 (0x70);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x1fffff44),        //call 16830 <vsrt>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3400360c),        //lws $r0 = 216 (0xd8)[$r12];;
     _32(0x79022040),        //slld $r0 = $r0, 1 (0x1);;
     _32(0x6108200c),        //addd $r2 = $r12, 128 (0x80);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16b60 <main+0x320>;;
     _32(0x1800017f),        //call 17158 <abort>;;
     _32(0x3000360c),        //lwz $r0 = 216 (0xd8)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601360c),        //sw 216 (0xd8)[$r12] = $r0;;
     _32(0x3000360c),        //lwz $r0 = 216 (0xd8)[$r12];;
     _64(0x00000000f401b1c0),        //compw.le $r0 = $r0, 7 (0x7);;
     _32(0x0c7ff8c0),        //cb.wnez $r0? 16b04 <main+0x2c4>;;
     _32(0x1fffff2f),        //call 16838 <vchr>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x6427f001),        //zxhd $r9 = $r1;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x6423f001),        //zxhd $r8 = $r1;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x641ff001),        //zxhd $r7 = $r1;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x641bf001),        //zxhd $r6 = $r1;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x6417f001),        //zxhd $r5 = $r1;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x6413f001),        //zxhd $r4 = $r1;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x640ff001),        //zxhd $r3 = $r1;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x640bf000),        //zxhd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6003f009),        //insf $r0 = $r9, 15 (0xf), 0 (0x0);;
     _32(0x6103f408),        //insf $r0 = $r8, 31 (0x1f), 16 (0x10);;
     _32(0x6203f807),        //insf $r0 = $r7, 47 (0x2f), 32 (0x20);;
     _32(0x6303fc06),        //insf $r0 = $r6, 63 (0x3f), 48 (0x30);;
     _32(0x6007f005),        //insf $r1 = $r5, 15 (0xf), 0 (0x0);;
     _32(0x6107f404),        //insf $r1 = $r4, 31 (0x1f), 16 (0x10);;
     _32(0x6207f803),        //insf $r1 = $r3, 47 (0x2f), 32 (0x20);;
     _32(0x6307fc02),        //insf $r1 = $r2, 63 (0x3f), 48 (0x30);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00200c),        //lq $r0r1 = 128 (0x80)[$r12];;
     _32(0xf1013002),        //addhq $r0 = $r2, $r0
     _32(0x71053043),        //addhq $r1 = $r3, $r1;;
     _32(0x28011c0c),        //sq 112 (0x70)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601350c),        //sw 212 (0xd4)[$r12] = $r0;;
     _32(0x1000001b),        //goto 16c78 <main+0x438>;;
     _32(0x3400350c),        //lws $r0 = 212 (0xd4)[$r12];;
     _32(0x79022040),        //slld $r0 = $r0, 1 (0x1);;
     _32(0x61041c0c),        //addd $r1 = $r12, 112 (0x70);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _32(0x1fffff03),        //call 16838 <vchr>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3400350c),        //lws $r0 = 212 (0xd4)[$r12];;
     _32(0x79022040),        //slld $r0 = $r0, 1 (0x1);;
     _32(0x6108200c),        //addd $r2 = $r12, 128 (0x80);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x28000000),        //lhz $r0 = 0 (0x0)[$r0];;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71011001),        //addw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16c6c <main+0x42c>;;
     _32(0x1800013c),        //call 17158 <abort>;;
     _32(0x3000350c),        //lwz $r0 = 212 (0xd4)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601350c),        //sw 212 (0xd4)[$r12] = $r0;;
     _32(0x3000350c),        //lwz $r0 = 212 (0xd4)[$r12];;
     _64(0x00000000f401b1c0),        //compw.le $r0 = $r0, 7 (0x7);;
     _32(0x0c7ff8c0),        //cb.wnez $r0? 16c10 <main+0x3d0>;;
     _32(0x1ffffee8),        //call 16828 <vint>;;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6103f002),        //insf $r0 = $r2, 31 (0x1f), 0 (0x0);;
     _32(0x6303f802),        //insf $r0 = $r2, 63 (0x3f), 32 (0x20);;
     _32(0x6107f002),        //insf $r1 = $r2, 31 (0x1f), 0 (0x0);;
     _32(0x6307f802),        //insf $r1 = $r2, 63 (0x3f), 32 (0x20);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00180c),        //lq $r0r1 = 96 (0x60)[$r12];;
     _32(0x54002002),        //mulwq $r0r1 = $r2r3, $r0r1;;
     _32(0x2801140c),        //sq 80 (0x50)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601340c),        //sw 208 (0xd0)[$r12] = $r0;;
     _32(0x10000015),        //goto 16d18 <main+0x4d8>;;
     _32(0x3400340c),        //lws $r0 = 208 (0xd0)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6104140c),        //addd $r1 = $r12, 80 (0x50);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30380000),        //lwz $r14 = 0 (0x0)[$r0];;
     _32(0x1ffffed3),        //call 16828 <vint>;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3400340c),        //lws $r0 = 208 (0xd0)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108180c),        //addd $r2 = $r12, 96 (0x60);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x5b003001),        //mulw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16d0c <main+0x4cc>;;
     _32(0x18000114),        //call 17158 <abort>;;
     _32(0x3000340c),        //lwz $r0 = 208 (0xd0)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601340c),        //sw 208 (0xd0)[$r12] = $r0;;
     _32(0x3000340c),        //lwz $r0 = 208 (0xd0)[$r12];;
     _64(0x00000000f401b0c0),        //compw.le $r0 = $r0, 3 (0x3);;
     _32(0x0c7ffa40),        //cb.wnez $r0? 16cc8 <main+0x488>;;
     _32(0x1ffffec2),        //call 16830 <vsrt>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6807f000),        //sxhd $r1 = $r0;;
     _32(0x7814ffc1),        //zxwd $r5 = $r1;;
     _32(0x6807f000),        //sxhd $r1 = $r0;;
     _32(0x7810ffc1),        //zxwd $r4 = $r1;;
     _32(0x6807f000),        //sxhd $r1 = $r0;;
     _32(0x780cffc1),        //zxwd $r3 = $r1;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6103f005),        //insf $r0 = $r5, 31 (0x1f), 0 (0x0);;
     _32(0x6303f804),        //insf $r0 = $r4, 63 (0x3f), 32 (0x20);;
     _32(0x6107f003),        //insf $r1 = $r3, 31 (0x1f), 0 (0x0);;
     _32(0x6307f802),        //insf $r1 = $r2, 63 (0x3f), 32 (0x20);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00180c),        //lq $r0r1 = 96 (0x60)[$r12];;
     _32(0x54002002),        //mulwq $r0r1 = $r2r3, $r0r1;;
     _32(0x2801140c),        //sq 80 (0x50)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601330c),        //sw 204 (0xcc)[$r12] = $r0;;
     _32(0x10000017),        //goto 16de0 <main+0x5a0>;;
     _32(0x3400330c),        //lws $r0 = 204 (0xcc)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6104140c),        //addd $r1 = $r12, 80 (0x50);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30380000),        //lwz $r14 = 0 (0x0)[$r0];;
     _32(0x1ffffea5),        //call 16830 <vsrt>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6803f000),        //sxhd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3400330c),        //lws $r0 = 204 (0xcc)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108180c),        //addd $r2 = $r12, 96 (0x60);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x5b003001),        //mulw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16dd4 <main+0x594>;;
     _32(0x180000e2),        //call 17158 <abort>;;
     _32(0x3000330c),        //lwz $r0 = 204 (0xcc)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601330c),        //sw 204 (0xcc)[$r12] = $r0;;
     _32(0x3000330c),        //lwz $r0 = 204 (0xcc)[$r12];;
     _64(0x00000000f401b0c0),        //compw.le $r0 = $r0, 3 (0x3);;
     _32(0x0c7ff9c0),        //cb.wnez $r0? 16d88 <main+0x548>;;
     _32(0x1ffffe92),        //call 16838 <vchr>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x7814ffc1),        //zxwd $r5 = $r1;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x7810ffc1),        //zxwd $r4 = $r1;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x780cffc1),        //zxwd $r3 = $r1;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7808ffc0),        //zxwd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6103f005),        //insf $r0 = $r5, 31 (0x1f), 0 (0x0);;
     _32(0x6303f804),        //insf $r0 = $r4, 63 (0x3f), 32 (0x20);;
     _32(0x6107f003),        //insf $r1 = $r3, 31 (0x1f), 0 (0x0);;
     _32(0x6307f802),        //insf $r1 = $r2, 63 (0x3f), 32 (0x20);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00180c),        //lq $r0r1 = 96 (0x60)[$r12];;
     _32(0x54002002),        //mulwq $r0r1 = $r2r3, $r0r1;;
     _32(0x2801140c),        //sq 80 (0x50)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601320c),        //sw 200 (0xc8)[$r12] = $r0;;
     _32(0x10000017),        //goto 16ea8 <main+0x668>;;
     _32(0x3400320c),        //lws $r0 = 200 (0xc8)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6104140c),        //addd $r1 = $r12, 80 (0x50);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x30380000),        //lwz $r14 = 0 (0x0)[$r0];;
     _32(0x1ffffe75),        //call 16838 <vchr>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68037000),        //sxbd $r0 = $r0;;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3400320c),        //lws $r0 = 200 (0xc8)[$r12];;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x6108180c),        //addd $r2 = $r12, 96 (0x60);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x5b003001),        //mulw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 16e9c <main+0x65c>;;
     _32(0x180000b0),        //call 17158 <abort>;;
     _32(0x3000320c),        //lwz $r0 = 200 (0xc8)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601320c),        //sw 200 (0xc8)[$r12] = $r0;;
     _32(0x3000320c),        //lwz $r0 = 200 (0xc8)[$r12];;
     _64(0x00000000f401b0c0),        //compw.le $r0 = $r0, 3 (0x3);;
     _32(0x0c7ff9c0),        //cb.wnez $r0? 16e50 <main+0x610>;;
     _32(0x1ffffe5a),        //call 16820 <vlng>;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6a000002),        //copyd $r0 = $r2;;
     _32(0x6a040002),        //copyd $r1 = $r2;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00100c),        //lq $r0r1 = 64 (0x40)[$r12];;
     _32(0x54001002),        //muld $r0 = $r2, $r0;;
     _32(0x54041043),        //muld $r1 = $r3, $r1;;
     _32(0x28010c0c),        //sq 48 (0x30)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601310c),        //sw 196 (0xc4)[$r12] = $r0;;
     _32(0x10000014),        //goto 16f40 <main+0x700>;;
     _32(0x3400310c),        //lws $r0 = 196 (0xc4)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x61040c0c),        //addd $r1 = $r12, 48 (0x30);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _32(0x1ffffe46),        //call 16820 <vlng>;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3400310c),        //lws $r0 = 196 (0xc4)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x6104100c),        //addd $r1 = $r12, 64 (0x40);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x54001002),        //muld $r0 = $r2, $r0;;
     _32(0x7101a00e),        //compd.eq $r0 = $r14, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16f34 <main+0x6f4>;;
     _32(0x1800008a),        //call 17158 <abort>;;
     _32(0x3000310c),        //lwz $r0 = 196 (0xc4)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601310c),        //sw 196 (0xc4)[$r12] = $r0;;
     _32(0x3000310c),        //lwz $r0 = 196 (0xc4)[$r12];;
     _64(0x00000000f401b040),        //compw.le $r0 = $r0, 1 (0x1);;
     _32(0x0c7ffa80),        //cb.wnez $r0? 16ef4 <main+0x6b4>;;
     _32(0x1ffffe36),        //call 16828 <vint>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x690ff000),        //sxwd $r3 = $r0;;
     _32(0x690bf000),        //sxwd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6a000003),        //copyd $r0 = $r3;;
     _32(0x6a040002),        //copyd $r1 = $r2;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00100c),        //lq $r0r1 = 64 (0x40)[$r12];;
     _32(0x54001002),        //muld $r0 = $r2, $r0;;
     _32(0x54041043),        //muld $r1 = $r3, $r1;;
     _32(0x28010c0c),        //sq 48 (0x30)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601300c),        //sw 192 (0xc0)[$r12] = $r0;;
     _32(0x10000015),        //goto 16fe4 <main+0x7a4>;;
     _32(0x3400300c),        //lws $r0 = 192 (0xc0)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x61040c0c),        //addd $r1 = $r12, 48 (0x30);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _32(0x1ffffe20),        //call 16828 <vint>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6907f000),        //sxwd $r1 = $r0;;
     _32(0x3400300c),        //lws $r0 = 192 (0xc0)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x6108100c),        //addd $r2 = $r12, 64 (0x40);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x54001001),        //muld $r0 = $r1, $r0;;
     _32(0x7101a00e),        //compd.eq $r0 = $r14, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16fd8 <main+0x798>;;
     _32(0x18000061),        //call 17158 <abort>;;
     _32(0x3000300c),        //lwz $r0 = 192 (0xc0)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601300c),        //sw 192 (0xc0)[$r12] = $r0;;
     _32(0x3000300c),        //lwz $r0 = 192 (0xc0)[$r12];;
     _64(0x00000000f401b040),        //compw.le $r0 = $r0, 1 (0x1);;
     _32(0x0c7ffa40),        //cb.wnez $r0? 16f94 <main+0x754>;;
     _32(0x1ffffe0f),        //call 16830 <vsrt>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x680ff000),        //sxhd $r3 = $r0;;
     _32(0x680bf000),        //sxhd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6a000003),        //copyd $r0 = $r3;;
     _32(0x6a040002),        //copyd $r1 = $r2;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00100c),        //lq $r0r1 = 64 (0x40)[$r12];;
     _32(0x54001002),        //muld $r0 = $r2, $r0;;
     _32(0x54041043),        //muld $r1 = $r3, $r1;;
     _32(0x28010c0c),        //sq 48 (0x30)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26012f0c),        //sw 188 (0xbc)[$r12] = $r0;;
     _32(0x10000015),        //goto 17088 <main+0x848>;;
     _32(0x34002f0c),        //lws $r0 = 188 (0xbc)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x61040c0c),        //addd $r1 = $r12, 48 (0x30);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _32(0x1ffffdf9),        //call 16830 <vsrt>;;
     _32(0x6403f000),        //zxhd $r0 = $r0;;
     _32(0x6807f000),        //sxhd $r1 = $r0;;
     _32(0x34002f0c),        //lws $r0 = 188 (0xbc)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x6108100c),        //addd $r2 = $r12, 64 (0x40);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x54001001),        //muld $r0 = $r1, $r0;;
     _32(0x7101a00e),        //compd.eq $r0 = $r14, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 1707c <main+0x83c>;;
     _32(0x18000038),        //call 17158 <abort>;;
     _32(0x30002f0c),        //lwz $r0 = 188 (0xbc)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26012f0c),        //sw 188 (0xbc)[$r12] = $r0;;
     _32(0x30002f0c),        //lwz $r0 = 188 (0xbc)[$r12];;
     _64(0x00000000f401b040),        //compw.le $r0 = $r0, 1 (0x1);;
     _32(0x0c7ffa40),        //cb.wnez $r0? 17038 <main+0x7f8>;;
     _32(0x1ffffde8),        //call 16838 <vchr>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x680f7000),        //sxbd $r3 = $r0;;
     _32(0x680b7000),        //sxbd $r2 = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6a000003),        //copyd $r0 = $r3;;
     _32(0x6a040002),        //copyd $r1 = $r2;;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x6a0c0001),        //copyd $r3 = $r1;;
     _32(0x3c00100c),        //lq $r0r1 = 64 (0x40)[$r12];;
     _32(0x54001002),        //muld $r0 = $r2, $r0;;
     _32(0x54041043),        //muld $r1 = $r3, $r1;;
     _32(0x28010c0c),        //sq 48 (0x30)[$r12] = $r0r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26012e0c),        //sw 184 (0xb8)[$r12] = $r0;;
     _32(0x10000015),        //goto 1712c <main+0x8ec>;;
     _32(0x34002e0c),        //lws $r0 = 184 (0xb8)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x61040c0c),        //addd $r1 = $r12, 48 (0x30);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _32(0x1ffffdd2),        //call 16838 <vchr>;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x68077000),        //sxbd $r1 = $r0;;
     _32(0x34002e0c),        //lws $r0 = 184 (0xb8)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x6108100c),        //addd $r2 = $r12, 64 (0x40);;
     _32(0x71010002),        //addd $r0 = $r2, $r0;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x54001001),        //muld $r0 = $r1, $r0;;
     _32(0x7101a00e),        //compd.eq $r0 = $r14, $r0;;
     _32(0x08000080),        //cb.dnez $r0? 17120 <main+0x8e0>;;
     _32(0x1800000f),        //call 17158 <abort>;;
     _32(0x30002e0c),        //lwz $r0 = 184 (0xb8)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x26012e0c),        //sw 184 (0xb8)[$r12] = $r0;;
     _32(0x30002e0c),        //lwz $r0 = 184 (0xb8)[$r12];;
     _64(0x00000000f401b040),        //compw.le $r0 = $r0, 1 (0x1);;
     _32(0x0c7ffa40),        //cb.wnez $r0? 170dc <main+0x89c>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130380c),        //addd $r12 = $r12, 224 (0xe0);;
     _32(0x0fd00000)        //ret ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980000f3),        //call 17530 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980007bd),        //call 19060 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110100001000000; //0x16840
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(vlng, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(vint, 0b00010110100000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(vsrt, 0b00010110100000110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(vchr, 0b00010110100000111000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110100001000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111000101011000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016840;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, rcount, wcount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, rcount, wcount, adr_end_main);
print_list_data(mD);
}
