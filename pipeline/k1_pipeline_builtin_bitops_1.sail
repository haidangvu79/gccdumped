// executing pipeline builtin_bitops_1.c.out.dumped test 
val k1_pipeline_builtin_bitops_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_builtin_bitops_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let my_ffs: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x0c0000c0),        //cb.wnez $r0? 16838 <my_ffs+0x18>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x10000017),        //goto 16890 <my_ffs+0x70>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000b),        //goto 1686c <my_ffs+0x4c>;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b027001),        //srlw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000240),        //cb.dnez $r0? 16880 <my_ffs+0x60>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f801b7c0),        //compw.leu $r0 = $r0, 31 (0x1f);;
     _32(0x0c7ffcc0),        //cb.wnez $r0? 16844 <my_ffs+0x24>;;
     _32(0x10000002),        //goto 16884 <my_ffs+0x64>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let my_ctz: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000b),        //goto 168d4 <my_ctz+0x3c>;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b027001),        //srlw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000240),        //cb.dnez $r0? 168e8 <my_ctz+0x50>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f801b7c0),        //compw.leu $r0 = $r0, 31 (0x1f);;
     _32(0x0c7ffcc0),        //cb.wnez $r0? 168ac <my_ctz+0x14>;;
     _32(0x10000002),        //goto 168ec <my_ctz+0x54>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let my_clz: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 1693c <my_clz+0x44>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x07e00000e004003f),        //make $r1 = -2147483648 (0xffffffff80000000);;
     _32(0x7b027001),        //srlw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004060c),        //lwz $r1 = 24 (0x18)[$r12];;
     _32(0x78011001),        //andw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000240),        //cb.dnez $r0? 16950 <my_clz+0x58>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f801b7c0),        //compw.leu $r0 = $r0, 31 (0x1f);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 1690c <my_clz+0x14>;;
     _32(0x10000002),        //goto 16954 <my_clz+0x5c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let my_clrsb: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x7b0237c0),        //srlw $r0 = $r0, 31 (0x1f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000f),        //goto 169bc <my_clrsb+0x5c>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x750007c0),        //sbfw $r0 = $r0, 31 (0x1f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3004040c),        //lwz $r1 = 16 (0x10)[$r12];;
     _32(0x7b027001),        //srlw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x7101b001),        //compw.eq $r0 = $r1, $r0;;
     _32(0x0c800240),        //cb.weqz $r0? 169d0 <my_clrsb+0x70>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f801b7c0),        //compw.leu $r0 = $r0, 31 (0x1f);;
     _32(0x0c7ffbc0),        //cb.wnez $r0? 16984 <my_clrsb+0x24>;;
     _32(0x10000002),        //goto 169d4 <my_clrsb+0x74>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let my_popcount: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000e),        //goto 16a38 <my_popcount+0x50>;;
     _32(0x3004040c),        //lwz $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b027001),        //srlw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800100),        //cb.deqz $r0? 16a2c <my_popcount+0x44>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f801b7c0),        //compw.leu $r0 = $r0, 31 (0x1f);;
     _32(0x0c7ffc00),        //cb.wnez $r0? 16a04 <my_popcount+0x1c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let my_parity: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2601040c),        //sw 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000e),        //goto 16aa8 <my_parity+0x50>;;
     _32(0x3004040c),        //lwz $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b027001),        //srlw $r0 = $r1, $r0;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800100),        //cb.deqz $r0? 16a9c <my_parity+0x44>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f801b7c0),        //compw.leu $r0 = $r0, 31 (0x1f);;
     _32(0x0c7ffc00),        //cb.wnez $r0? 16a74 <my_parity+0x1c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let my_ffsl: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x080000c0),        //cb.dnez $r0? 16ae8 <my_ffsl+0x18>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x10000015),        //goto 16b38 <my_ffsl+0x68>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000009),        //goto 16b14 <my_ffsl+0x44>;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08000240),        //cb.dnez $r0? 16b28 <my_ffsl+0x58>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffd40),        //cb.wnez $r0? 16af4 <my_ffsl+0x24>;;
     _32(0x10000002),        //goto 16b2c <my_ffsl+0x5c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let my_ctzl: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000009),        //goto 16b74 <my_ctzl+0x34>;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08000240),        //cb.dnez $r0? 16b88 <my_ctzl+0x48>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffd40),        //cb.wnez $r0? 16b54 <my_ctzl+0x14>;;
     _32(0x10000002),        //goto 16b8c <my_ctzl+0x4c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let my_clzl: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000c),        //goto 16bd8 <my_clzl+0x40>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _96(0x0400000080000000e0040000),        //make $r1 = 9223372036854775808 (0x8000000000000000);;
     _32(0x7b066001),        //srld $r1 = $r1, $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x78010001),        //andd $r0 = $r1, $r0;;
     _32(0x08000240),        //cb.dnez $r0? 16bec <my_clzl+0x54>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffc80),        //cb.wnez $r0? 16bac <my_clzl+0x14>;;
     _32(0x10000002),        //goto 16bf0 <my_clzl+0x58>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let my_clrsbl: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x7b022fc0),        //srld $r0 = $r0, 63 (0x3f);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16c50 <my_clrsbl+0x50>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x75000fc0),        //sbfw $r0 = $r0, 63 (0x3f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68040040),        //andd $r1 = $r0, 1 (0x1);;
     _32(0x3400060c),        //lws $r0 = 24 (0x18)[$r12];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08800240),        //cb.deqz $r0? 16c64 <my_clrsbl+0x64>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 16c20 <my_clrsbl+0x20>;;
     _32(0x10000002),        //goto 16c68 <my_clrsbl+0x68>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let my_popcountl: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000c),        //goto 16cc8 <my_popcountl+0x48>;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08800100),        //cb.deqz $r0? 16cbc <my_popcountl+0x3c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffc80),        //cb.wnez $r0? 16c9c <my_popcountl+0x1c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let my_parityl: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000c),        //goto 16d30 <my_parityl+0x48>;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08800100),        //cb.deqz $r0? 16d24 <my_parityl+0x3c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffc80),        //cb.wnez $r0? 16d04 <my_parityl+0x1c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let my_ffsll: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x080000c0),        //cb.dnez $r0? 16d70 <my_ffsll+0x18>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x10000015),        //goto 16dc0 <my_ffsll+0x68>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000009),        //goto 16d9c <my_ffsll+0x44>;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08000240),        //cb.dnez $r0? 16db0 <my_ffsll+0x58>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffd40),        //cb.wnez $r0? 16d7c <my_ffsll+0x24>;;
     _32(0x10000002),        //goto 16db4 <my_ffsll+0x5c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let my_ctzll: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x10000009),        //goto 16dfc <my_ctzll+0x34>;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08000240),        //cb.dnez $r0? 16e10 <my_ctzll+0x48>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffd40),        //cb.wnez $r0? 16ddc <my_ctzll+0x14>;;
     _32(0x10000002),        //goto 16e14 <my_ctzll+0x4c>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let my_clzll: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000c),        //goto 16e60 <my_clzll+0x40>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _96(0x0400000080000000e0040000),        //make $r1 = 9223372036854775808 (0x8000000000000000);;
     _32(0x7b066001),        //srld $r1 = $r1, $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x78010001),        //andd $r0 = $r1, $r0;;
     _32(0x08000240),        //cb.dnez $r0? 16e74 <my_clzll+0x54>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffc80),        //cb.wnez $r0? 16e34 <my_clzll+0x14>;;
     _32(0x10000002),        //goto 16e78 <my_clzll+0x58>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let my_clrsbll: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x7b022fc0),        //srld $r0 = $r0, 63 (0x3f);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000d),        //goto 16ed8 <my_clrsbll+0x50>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x75000fc0),        //sbfw $r0 = $r0, 63 (0x3f);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68040040),        //andd $r1 = $r0, 1 (0x1);;
     _32(0x3400060c),        //lws $r0 = 24 (0x18)[$r12];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08800240),        //cb.deqz $r0? 16eec <my_clrsbll+0x64>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 16ea8 <my_clrsbll+0x20>;;
     _32(0x10000002),        //goto 16ef0 <my_clrsbll+0x68>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let my_popcountll: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000c),        //goto 16f50 <my_popcountll+0x48>;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08800100),        //cb.deqz $r0? 16f44 <my_popcountll+0x3c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffc80),        //cb.wnez $r0? 16f24 <my_popcountll+0x1c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let my_parityll: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000000c),        //goto 16fb8 <my_parityll+0x48>;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x7b026001),        //srld $r0 = $r1, $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x08800100),        //cb.deqz $r0? 16fac <my_parityll+0x3c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000001f801b7c0),        //compw.leu $r0 = $r0, 63 (0x3f);;
     _32(0x0c7ffc80),        //cb.wnez $r0? 16f8c <my_parityll+0x1c>;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000007c),        //goto 171e8 <main+0x208>;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x73063000),        //ctzw $r1 = $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17020 <main+0x40>;;
     _32(0x6004ffff),        //make $r1 = -1 (0xffffffff);;
     _32(0x71000041),        //addw $r0 = $r1, 1 (0x1);;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x1ffffdf9),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17050 <main+0x70>;;
     _32(0x180005b1),        //call 18710 <abort>;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x08800480),        //cb.deqz $r0? 170ac <main+0xcc>;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x70023000),        //clzw $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x1ffffe18),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 170ac <main+0xcc>;;
     _32(0x1800059a),        //call 18710 <abort>;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x08800480),        //cb.deqz $r0? 17108 <main+0x128>;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x73023000),        //ctzw $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x1ffffde9),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17108 <main+0x128>;;
     _32(0x18000583),        //call 18710 <abort>;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x71023000),        //clsw $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x1ffffe09),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17150 <main+0x170>;;
     _32(0x18000571),        //call 18710 <abort>;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x72023000),        //cbsw $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x1ffffe1a),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17194 <main+0x1b4>;;
     _32(0x18000560),        //call 18710 <abort>;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x72023000),        //cbsw $r0 = $r0;;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0040200),        //make $r1 = 262152 (0x40008);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3002f001),        //lwz.xs $r0 = $r0[$r1];;
     _32(0x1ffffe24),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 171dc <main+0x1fc>;;
     _32(0x1800054e),        //call 18710 <abort>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f801b300),        //compw.leu $r0 = $r0, 12 (0xc);;
     _32(0x0c7fe080),        //cb.wnez $r0? 16ffc <main+0x1c>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000007a),        //goto 173e8 <main+0x408>;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x73062000),        //ctzd $r1 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 17224 <main+0x244>;;
     _32(0x6004ffff),        //make $r1 = -1 (0xffffffff);;
     _32(0x61000041),        //addd $r0 = $r1, 1 (0x1);;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe24),        //call 16ad0 <my_ffsl>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17254 <main+0x274>;;
     _32(0x18000530),        //call 18710 <abort>;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x08800480),        //cb.deqz $r0? 172b0 <main+0x2d0>;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x70022000),        //clzd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe3f),        //call 16b98 <my_clzl>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 172b0 <main+0x2d0>;;
     _32(0x18000519),        //call 18710 <abort>;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x08800480),        //cb.deqz $r0? 1730c <main+0x32c>;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x73022000),        //ctzd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe12),        //call 16b40 <my_ctzl>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 1730c <main+0x32c>;;
     _32(0x18000502),        //call 18710 <abort>;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x71022000),        //clsd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe31),        //call 16c00 <my_clrsbl>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17350 <main+0x370>;;
     _32(0x180004f1),        //call 18710 <abort>;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x72022000),        //cbsd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe40),        //call 16c80 <my_popcountl>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17394 <main+0x3b4>;;
     _32(0x180004e0),        //call 18710 <abort>;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x72022000),        //cbsd $r0 = $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0041000),        //make $r1 = 262208 (0x40040);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe48),        //call 16ce8 <my_parityl>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 173dc <main+0x3fc>;;
     _32(0x180004ce),        //call 18710 <abort>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f801b300),        //compw.leu $r0 = $r0, 12 (0xc);;
     _32(0x0c7fe100),        //cb.wnez $r0? 17204 <main+0x224>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x1000007a),        //goto 175e8 <main+0x608>;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x73062000),        //ctzd $r1 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 17424 <main+0x444>;;
     _32(0x6004ffff),        //make $r1 = -1 (0xffffffff);;
     _32(0x61000041),        //addd $r0 = $r1, 1 (0x1);;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe46),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17454 <main+0x474>;;
     _32(0x180004b0),        //call 18710 <abort>;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x08800480),        //cb.deqz $r0? 174b0 <main+0x4d0>;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x70022000),        //clzd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe61),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 174b0 <main+0x4d0>;;
     _32(0x18000499),        //call 18710 <abort>;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x08800480),        //cb.deqz $r0? 1750c <main+0x52c>;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x73022000),        //ctzd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe34),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 1750c <main+0x52c>;;
     _32(0x18000482),        //call 18710 <abort>;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x71022000),        //clsd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe53),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17550 <main+0x570>;;
     _32(0x18000471),        //call 18710 <abort>;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x72022000),        //cbsd $r0 = $r0;;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe62),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 17594 <main+0x5b4>;;
     _32(0x18000460),        //call 18710 <abort>;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x72022000),        //cbsd $r0 = $r0;;
     _32(0x68000040),        //andd $r0 = $r0, 1 (0x1);;
     _32(0x7838ffc0),        //zxwd $r14 = $r0;;
     _96(0x0000000080000100e0042a00),        //make $r1 = 262312 (0x400a8);;
     _32(0x3400070c),        //lws $r0 = 28 (0x1c)[$r12];;
     _32(0x3802f001),        //ld.xs $r0 = $r0[$r1];;
     _32(0x1ffffe6a),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x7101b00e),        //compw.eq $r0 = $r14, $r0;;
     _32(0x0c000080),        //cb.wnez $r0? 175dc <main+0x5fc>;;
     _32(0x1800044e),        //call 18710 <abort>;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601070c),        //sw 28 (0x1c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _64(0x00000000f801b300),        //compw.leu $r0 = $r0, 12 (0xc);;
     _32(0x0c7fe100),        //cb.wnez $r0? 17404 <main+0x424>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffc89),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1760c <main+0x62c>;;
     _32(0x18000442),        //call 18710 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffcd4),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 17628 <main+0x648>;;
     _32(0x1800043b),        //call 18710 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffcef),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1763c <main+0x65c>;;
     _32(0x18000436),        //call 18710 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffd06),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17650 <main+0x670>;;
     _32(0x18000431),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffc73),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 1766c <main+0x68c>;;
     _32(0x1800042a),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffca2),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 17688 <main+0x6a8>;;
     _32(0x18000423),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffc83),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 1769c <main+0x6bc>;;
     _32(0x1800041e),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffcb0),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b780),        //compw.eq $r0 = $r0, 30 (0x1e);;
     _32(0x0c000080),        //cb.wnez $r0? 176b8 <main+0x6d8>;;
     _32(0x18000417),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffccb),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 176d4 <main+0x6f4>;;
     _32(0x18000410),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffce0),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 176f0 <main+0x710>;;
     _32(0x18000409),        //call 18710 <abort>;;
     _64(0x07e00000e000003f),        //make $r0 = -2147483648 (0xffffffff80000000);;
     _32(0x1ffffc4a),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b000),        //compw.eq $r0 = $r0, 32 (0x20);;
     _32(0x0c000080),        //cb.wnez $r0? 17710 <main+0x730>;;
     _32(0x18000401),        //call 18710 <abort>;;
     _64(0x07e00000e000003f),        //make $r0 = -2147483648 (0xffffffff80000000);;
     _32(0x1ffffc78),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17728 <main+0x748>;;
     _32(0x180003fb),        //call 18710 <abort>;;
     _64(0x07e00000e000003f),        //make $r0 = -2147483648 (0xffffffff80000000);;
     _32(0x1ffffc5a),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 17748 <main+0x768>;;
     _32(0x180003f3),        //call 18710 <abort>;;
     _64(0x07e00000e000003f),        //make $r0 = -2147483648 (0xffffffff80000000);;
     _32(0x1ffffc84),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17760 <main+0x780>;;
     _32(0x180003ed),        //call 18710 <abort>;;
     _64(0x07e00000e000003f),        //make $r0 = -2147483648 (0xffffffff80000000);;
     _32(0x1ffffca0),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17780 <main+0x7a0>;;
     _32(0x180003e5),        //call 18710 <abort>;;
     _64(0x07e00000e000003f),        //make $r0 = -2147483648 (0xffffffff80000000);;
     _32(0x1ffffcb4),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 177a0 <main+0x7c0>;;
     _32(0x180003dd),        //call 18710 <abort>;;
     _64(0x00100000e0000000),        //make $r0 = 1073741824 (0x40000000);;
     _32(0x1ffffc1e),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 177c0 <main+0x7e0>;;
     _32(0x180003d5),        //call 18710 <abort>;;
     _64(0x00100000e0000000),        //make $r0 = 1073741824 (0x40000000);;
     _32(0x1ffffc4c),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 177e0 <main+0x800>;;
     _32(0x180003cd),        //call 18710 <abort>;;
     _64(0x00100000e0000000),        //make $r0 = 1073741824 (0x40000000);;
     _32(0x1ffffc2c),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b780),        //compw.eq $r0 = $r0, 30 (0x1e);;
     _32(0x0c000080),        //cb.wnez $r0? 17800 <main+0x820>;;
     _32(0x180003c5),        //call 18710 <abort>;;
     _64(0x00100000e0000000),        //make $r0 = 1073741824 (0x40000000);;
     _32(0x1ffffc56),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17818 <main+0x838>;;
     _32(0x180003bf),        //call 18710 <abort>;;
     _64(0x00100000e0000000),        //make $r0 = 1073741824 (0x40000000);;
     _32(0x1ffffc72),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17838 <main+0x858>;;
     _32(0x180003b7),        //call 18710 <abort>;;
     _64(0x00100000e0000000),        //make $r0 = 1073741824 (0x40000000);;
     _32(0x1ffffc86),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17858 <main+0x878>;;
     _32(0x180003af),        //call 18710 <abort>;;
     _64(0x00000040e0000000),        //make $r0 = 65536 (0x10000);;
     _32(0x1ffffbf0),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b440),        //compw.eq $r0 = $r0, 17 (0x11);;
     _32(0x0c000080),        //cb.wnez $r0? 17878 <main+0x898>;;
     _32(0x180003a7),        //call 18710 <abort>;;
     _64(0x00000040e0000000),        //make $r0 = 65536 (0x10000);;
     _32(0x1ffffc1e),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b3c0),        //compw.eq $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 17898 <main+0x8b8>;;
     _32(0x1800039f),        //call 18710 <abort>;;
     _64(0x00000040e0000000),        //make $r0 = 65536 (0x10000);;
     _32(0x1ffffbfe),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 178b8 <main+0x8d8>;;
     _32(0x18000397),        //call 18710 <abort>;;
     _64(0x00000040e0000000),        //make $r0 = 65536 (0x10000);;
     _32(0x1ffffc28),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b380),        //compw.eq $r0 = $r0, 14 (0xe);;
     _32(0x0c000080),        //cb.wnez $r0? 178d8 <main+0x8f8>;;
     _32(0x1800038f),        //call 18710 <abort>;;
     _64(0x00000040e0000000),        //make $r0 = 65536 (0x10000);;
     _32(0x1ffffc42),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 178f8 <main+0x918>;;
     _32(0x18000387),        //call 18710 <abort>;;
     _64(0x00000040e0000000),        //make $r0 = 65536 (0x10000);;
     _32(0x1ffffc56),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17918 <main+0x938>;;
     _32(0x1800037f),        //call 18710 <abort>;;
     _64(0x00000020e0000000),        //make $r0 = 32768 (0x8000);;
     _32(0x1ffffbc0),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 17938 <main+0x958>;;
     _32(0x18000377),        //call 18710 <abort>;;
     _64(0x00000020e0000000),        //make $r0 = 32768 (0x8000);;
     _32(0x1ffffbee),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 17958 <main+0x978>;;
     _32(0x1800036f),        //call 18710 <abort>;;
     _64(0x00000020e0000000),        //make $r0 = 32768 (0x8000);;
     _32(0x1ffffbce),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b3c0),        //compw.eq $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 17978 <main+0x998>;;
     _32(0x18000367),        //call 18710 <abort>;;
     _64(0x00000020e0000000),        //make $r0 = 32768 (0x8000);;
     _32(0x1ffffbf8),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b3c0),        //compw.eq $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 17998 <main+0x9b8>;;
     _32(0x1800035f),        //call 18710 <abort>;;
     _64(0x00000020e0000000),        //make $r0 = 32768 (0x8000);;
     _32(0x1ffffc12),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 179b8 <main+0x9d8>;;
     _32(0x18000357),        //call 18710 <abort>;;
     _64(0x00000020e0000000),        //make $r0 = 32768 (0x8000);;
     _32(0x1ffffc26),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 179d8 <main+0x9f8>;;
     _32(0x1800034f),        //call 18710 <abort>;;
     _64(0x07e96969e000697f),        //make $r0 = -1515870811 (0xffffffffa5a5a5a5);;
     _32(0x1ffffb90),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 179f8 <main+0xa18>;;
     _32(0x18000347),        //call 18710 <abort>;;
     _64(0x07e96969e000697f),        //make $r0 = -1515870811 (0xffffffffa5a5a5a5);;
     _32(0x1ffffbbe),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17a10 <main+0xa30>;;
     _32(0x18000341),        //call 18710 <abort>;;
     _64(0x07e96969e000697f),        //make $r0 = -1515870811 (0xffffffffa5a5a5a5);;
     _32(0x1ffffba0),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17a28 <main+0xa48>;;
     _32(0x1800033b),        //call 18710 <abort>;;
     _64(0x07e96969e000697f),        //make $r0 = -1515870811 (0xffffffffa5a5a5a5);;
     _32(0x1ffffbcc),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17a40 <main+0xa60>;;
     _32(0x18000335),        //call 18710 <abort>;;
     _64(0x07e96969e000697f),        //make $r0 = -1515870811 (0xffffffffa5a5a5a5);;
     _32(0x1ffffbe8),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 17a60 <main+0xa80>;;
     _32(0x1800032d),        //call 18710 <abort>;;
     _64(0x07e96969e000697f),        //make $r0 = -1515870811 (0xffffffffa5a5a5a5);;
     _32(0x1ffffbfc),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17a78 <main+0xa98>;;
     _32(0x18000327),        //call 18710 <abort>;;
     _64(0x00169696e0009680),        //make $r0 = 1515870810 (0x5a5a5a5a);;
     _32(0x1ffffb68),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 17a98 <main+0xab8>;;
     _32(0x1800031f),        //call 18710 <abort>;;
     _64(0x00169696e0009680),        //make $r0 = 1515870810 (0x5a5a5a5a);;
     _32(0x1ffffb96),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17ab8 <main+0xad8>;;
     _32(0x18000317),        //call 18710 <abort>;;
     _64(0x00169696e0009680),        //make $r0 = 1515870810 (0x5a5a5a5a);;
     _32(0x1ffffb76),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17ad8 <main+0xaf8>;;
     _32(0x1800030f),        //call 18710 <abort>;;
     _64(0x00169696e0009680),        //make $r0 = 1515870810 (0x5a5a5a5a);;
     _32(0x1ffffba0),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17af0 <main+0xb10>;;
     _32(0x18000309),        //call 18710 <abort>;;
     _64(0x00169696e0009680),        //make $r0 = 1515870810 (0x5a5a5a5a);;
     _32(0x1ffffbbc),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 17b10 <main+0xb30>;;
     _32(0x18000301),        //call 18710 <abort>;;
     _64(0x00169696e0009680),        //make $r0 = 1515870810 (0x5a5a5a5a);;
     _32(0x1ffffbd0),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17b28 <main+0xb48>;;
     _32(0x180002fb),        //call 18710 <abort>;;
     _64(0x07f2bf80e000003f),        //make $r0 = -889323520 (0xffffffffcafe0000);;
     _32(0x1ffffb3c),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b480),        //compw.eq $r0 = $r0, 18 (0x12);;
     _32(0x0c000080),        //cb.wnez $r0? 17b48 <main+0xb68>;;
     _32(0x180002f3),        //call 18710 <abort>;;
     _64(0x07f2bf80e000003f),        //make $r0 = -889323520 (0xffffffffcafe0000);;
     _32(0x1ffffb6a),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17b60 <main+0xb80>;;
     _32(0x180002ed),        //call 18710 <abort>;;
     _64(0x07f2bf80e000003f),        //make $r0 = -889323520 (0xffffffffcafe0000);;
     _32(0x1ffffb4c),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b440),        //compw.eq $r0 = $r0, 17 (0x11);;
     _32(0x0c000080),        //cb.wnez $r0? 17b80 <main+0xba0>;;
     _32(0x180002e5),        //call 18710 <abort>;;
     _64(0x07f2bf80e000003f),        //make $r0 = -889323520 (0xffffffffcafe0000);;
     _32(0x1ffffb76),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17ba0 <main+0xbc0>;;
     _32(0x180002dd),        //call 18710 <abort>;;
     _64(0x07f2bf80e000003f),        //make $r0 = -889323520 (0xffffffffcafe0000);;
     _32(0x1ffffb90),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b2c0),        //compw.eq $r0 = $r0, 11 (0xb);;
     _32(0x0c000080),        //cb.wnez $r0? 17bc0 <main+0xbe0>;;
     _32(0x180002d5),        //call 18710 <abort>;;
     _64(0x07f2bf80e000003f),        //make $r0 = -889323520 (0xffffffffcafe0000);;
     _32(0x1ffffba4),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17be0 <main+0xc00>;;
     _32(0x180002cd),        //call 18710 <abort>;;
     _64(0x000032bfe0008000),        //make $r0 = 13303296 (0xcafe00);;
     _32(0x1ffffb0e),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b280),        //compw.eq $r0 = $r0, 10 (0xa);;
     _32(0x0c000080),        //cb.wnez $r0? 17c00 <main+0xc20>;;
     _32(0x180002c5),        //call 18710 <abort>;;
     _64(0x000032bfe0008000),        //make $r0 = 13303296 (0xcafe00);;
     _32(0x1ffffb3c),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b200),        //compw.eq $r0 = $r0, 8 (0x8);;
     _32(0x0c000080),        //cb.wnez $r0? 17c20 <main+0xc40>;;
     _32(0x180002bd),        //call 18710 <abort>;;
     _64(0x000032bfe0008000),        //make $r0 = 13303296 (0xcafe00);;
     _32(0x1ffffb1c),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b240),        //compw.eq $r0 = $r0, 9 (0x9);;
     _32(0x0c000080),        //cb.wnez $r0? 17c40 <main+0xc60>;;
     _32(0x180002b5),        //call 18710 <abort>;;
     _64(0x000032bfe0008000),        //make $r0 = 13303296 (0xcafe00);;
     _32(0x1ffffb46),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b1c0),        //compw.eq $r0 = $r0, 7 (0x7);;
     _32(0x0c000080),        //cb.wnez $r0? 17c60 <main+0xc80>;;
     _32(0x180002ad),        //call 18710 <abort>;;
     _64(0x000032bfe0008000),        //make $r0 = 13303296 (0xcafe00);;
     _32(0x1ffffb60),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b2c0),        //compw.eq $r0 = $r0, 11 (0xb);;
     _32(0x0c000080),        //cb.wnez $r0? 17c80 <main+0xca0>;;
     _32(0x180002a5),        //call 18710 <abort>;;
     _64(0x000032bfe0008000),        //make $r0 = 13303296 (0xcafe00);;
     _32(0x1ffffb74),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17ca0 <main+0xcc0>;;
     _32(0x1800029d),        //call 18710 <abort>;;
     _64(0x00000032e000bf80),        //make $r0 = 51966 (0xcafe);;
     _32(0x1ffffade),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 17cc0 <main+0xce0>;;
     _32(0x18000295),        //call 18710 <abort>;;
     _64(0x00000032e000bf80),        //make $r0 = 51966 (0xcafe);;
     _32(0x1ffffb0c),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 17ce0 <main+0xd00>;;
     _32(0x1800028d),        //call 18710 <abort>;;
     _64(0x00000032e000bf80),        //make $r0 = 51966 (0xcafe);;
     _32(0x1ffffaec),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17d00 <main+0xd20>;;
     _32(0x18000285),        //call 18710 <abort>;;
     _64(0x00000032e000bf80),        //make $r0 = 51966 (0xcafe);;
     _32(0x1ffffb16),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b3c0),        //compw.eq $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 17d20 <main+0xd40>;;
     _32(0x1800027d),        //call 18710 <abort>;;
     _64(0x00000032e000bf80),        //make $r0 = 51966 (0xcafe);;
     _32(0x1ffffb30),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b2c0),        //compw.eq $r0 = $r0, 11 (0xb);;
     _32(0x0c000080),        //cb.wnez $r0? 17d40 <main+0xd60>;;
     _32(0x18000275),        //call 18710 <abort>;;
     _64(0x00000032e000bf80),        //make $r0 = 51966 (0xcafe);;
     _32(0x1ffffb44),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17d60 <main+0xd80>;;
     _32(0x1800026d),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaaf),        //call 16820 <my_ffs>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17d7c <main+0xd9c>;;
     _32(0x18000266),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffade),        //call 168f8 <my_clz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17d90 <main+0xdb0>;;
     _32(0x18000261),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffac1),        //call 16898 <my_ctz>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17da4 <main+0xdc4>;;
     _32(0x1800025c),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffaee),        //call 16960 <my_clrsb>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 17dc0 <main+0xde0>;;
     _32(0x18000255),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffb09),        //call 169e8 <my_popcount>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b000),        //compw.eq $r0 = $r0, 32 (0x20);;
     _32(0x0c000080),        //cb.wnez $r0? 17ddc <main+0xdfc>;;
     _32(0x1800024e),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffb1e),        //call 16a58 <my_parity>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17df0 <main+0xe10>;;
     _32(0x18000249),        //call 18710 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffbd9),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17e04 <main+0xe24>;;
     _32(0x18000244),        //call 18710 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffc20),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b7c0),        //compw.eq $r0 = $r0, 63 (0x3f);;
     _32(0x0c000080),        //cb.wnez $r0? 17e20 <main+0xe40>;;
     _32(0x1800023d),        //call 18710 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffc39),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17e34 <main+0xe54>;;
     _32(0x18000238),        //call 18710 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffc4e),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17e48 <main+0xe68>;;
     _32(0x18000233),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffbc3),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17e64 <main+0xe84>;;
     _32(0x1800022c),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffbee),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b7c0),        //compw.eq $r0 = $r0, 63 (0x3f);;
     _32(0x0c000080),        //cb.wnez $r0? 17e80 <main+0xea0>;;
     _32(0x18000225),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffbd1),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17e94 <main+0xeb4>;;
     _32(0x18000220),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffbfc),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b780),        //compw.eq $r0 = $r0, 62 (0x3e);;
     _32(0x0c000080),        //cb.wnez $r0? 17eb0 <main+0xed0>;;
     _32(0x18000219),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffc15),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17ecc <main+0xeec>;;
     _32(0x18000212),        //call 18710 <abort>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffc28),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17ee8 <main+0xf08>;;
     _32(0x1800020b),        //call 18710 <abort>;;
     _96(0x0400000080000000e0000000),        //make $r0 = 9223372036854775808 (0x8000000000000000);;
     _32(0x1ffffb99),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000002f101b000),        //compw.eq $r0 = $r0, 64 (0x40);;
     _32(0x0c000080),        //cb.wnez $r0? 17f0c <main+0xf2c>;;
     _32(0x18000202),        //call 18710 <abort>;;
     _96(0x0400000080000000e0000000),        //make $r0 = 9223372036854775808 (0x8000000000000000);;
     _32(0x1ffffbc2),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17f28 <main+0xf48>;;
     _32(0x180001fb),        //call 18710 <abort>;;
     _96(0x0400000080000000e0000000),        //make $r0 = 9223372036854775808 (0x8000000000000000);;
     _32(0x1ffffba5),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b7c0),        //compw.eq $r0 = $r0, 63 (0x3f);;
     _32(0x0c000080),        //cb.wnez $r0? 17f4c <main+0xf6c>;;
     _32(0x180001f2),        //call 18710 <abort>;;
     _96(0x0400000080000000e0000000),        //make $r0 = 9223372036854775808 (0x8000000000000000);;
     _32(0x1ffffbcc),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 17f68 <main+0xf88>;;
     _32(0x180001eb),        //call 18710 <abort>;;
     _96(0x0400000080000000e0000000),        //make $r0 = 9223372036854775808 (0x8000000000000000);;
     _32(0x1ffffbe5),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17f8c <main+0xfac>;;
     _32(0x180001e2),        //call 18710 <abort>;;
     _96(0x0400000080000000e0000000),        //make $r0 = 9223372036854775808 (0x8000000000000000);;
     _32(0x1ffffbf6),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 17fb0 <main+0xfd0>;;
     _32(0x180001d9),        //call 18710 <abort>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffb69),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 17fcc <main+0xfec>;;
     _32(0x180001d2),        //call 18710 <abort>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffb94),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b780),        //compw.eq $r0 = $r0, 62 (0x3e);;
     _32(0x0c000080),        //cb.wnez $r0? 17fe8 <main+0x1008>;;
     _32(0x180001cb),        //call 18710 <abort>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffb77),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 18004 <main+0x1024>;;
     _32(0x180001c4),        //call 18710 <abort>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffba0),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b740),        //compw.eq $r0 = $r0, 61 (0x3d);;
     _32(0x0c000080),        //cb.wnez $r0? 18020 <main+0x1040>;;
     _32(0x180001bd),        //call 18710 <abort>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffbb9),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 1803c <main+0x105c>;;
     _32(0x180001b6),        //call 18710 <abort>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffbcc),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 18058 <main+0x1078>;;
     _32(0x180001af),        //call 18710 <abort>;;
     _96(0x0200000080000000e0000000),        //make $r0 = 4611686018427387904 (0x4000000000000000);;
     _32(0x1ffffb3d),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b7c0),        //compw.eq $r0 = $r0, 63 (0x3f);;
     _32(0x0c000080),        //cb.wnez $r0? 1807c <main+0x109c>;;
     _32(0x180001a6),        //call 18710 <abort>;;
     _96(0x0200000080000000e0000000),        //make $r0 = 4611686018427387904 (0x4000000000000000);;
     _32(0x1ffffb66),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 180a0 <main+0x10c0>;;
     _32(0x1800019d),        //call 18710 <abort>;;
     _96(0x0200000080000000e0000000),        //make $r0 = 4611686018427387904 (0x4000000000000000);;
     _32(0x1ffffb47),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b780),        //compw.eq $r0 = $r0, 62 (0x3e);;
     _32(0x0c000080),        //cb.wnez $r0? 180c4 <main+0x10e4>;;
     _32(0x18000194),        //call 18710 <abort>;;
     _96(0x0200000080000000e0000000),        //make $r0 = 4611686018427387904 (0x4000000000000000);;
     _32(0x1ffffb6e),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 180e0 <main+0x1100>;;
     _32(0x1800018d),        //call 18710 <abort>;;
     _96(0x0200000080000000e0000000),        //make $r0 = 4611686018427387904 (0x4000000000000000);;
     _32(0x1ffffb87),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 18104 <main+0x1124>;;
     _32(0x18000184),        //call 18710 <abort>;;
     _96(0x0200000080000000e0000000),        //make $r0 = 4611686018427387904 (0x4000000000000000);;
     _32(0x1ffffb98),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 18128 <main+0x1148>;;
     _32(0x1800017b),        //call 18710 <abort>;;
     _64(0x00400000e0000000),        //make $r0 = 4294967296 (0x100000000);;
     _32(0x1ffffb0a),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b040),        //compw.eq $r0 = $r0, 33 (0x21);;
     _32(0x0c000080),        //cb.wnez $r0? 18148 <main+0x1168>;;
     _32(0x18000173),        //call 18710 <abort>;;
     _64(0x00400000e0000000),        //make $r0 = 4294967296 (0x100000000);;
     _32(0x1ffffb34),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 18168 <main+0x1188>;;
     _32(0x1800016b),        //call 18710 <abort>;;
     _64(0x00400000e0000000),        //make $r0 = 4294967296 (0x100000000);;
     _32(0x1ffffb16),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b000),        //compw.eq $r0 = $r0, 32 (0x20);;
     _32(0x0c000080),        //cb.wnez $r0? 18188 <main+0x11a8>;;
     _32(0x18000163),        //call 18710 <abort>;;
     _64(0x00400000e0000000),        //make $r0 = 4294967296 (0x100000000);;
     _32(0x1ffffb3e),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b780),        //compw.eq $r0 = $r0, 30 (0x1e);;
     _32(0x0c000080),        //cb.wnez $r0? 181a8 <main+0x11c8>;;
     _32(0x1800015b),        //call 18710 <abort>;;
     _64(0x00400000e0000000),        //make $r0 = 4294967296 (0x100000000);;
     _32(0x1ffffb56),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 181c8 <main+0x11e8>;;
     _32(0x18000153),        //call 18710 <abort>;;
     _64(0x00400000e0000000),        //make $r0 = 4294967296 (0x100000000);;
     _32(0x1ffffb68),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 181e8 <main+0x1208>;;
     _32(0x1800014b),        //call 18710 <abort>;;
     _64(0x00200000e0000000),        //make $r0 = 2147483648 (0x80000000);;
     _32(0x1ffffada),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b000),        //compw.eq $r0 = $r0, 32 (0x20);;
     _32(0x0c000080),        //cb.wnez $r0? 18208 <main+0x1228>;;
     _32(0x18000143),        //call 18710 <abort>;;
     _64(0x00200000e0000000),        //make $r0 = 2147483648 (0x80000000);;
     _32(0x1ffffb04),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b000),        //compw.eq $r0 = $r0, 32 (0x20);;
     _32(0x0c000080),        //cb.wnez $r0? 18228 <main+0x1248>;;
     _32(0x1800013b),        //call 18710 <abort>;;
     _64(0x00200000e0000000),        //make $r0 = 2147483648 (0x80000000);;
     _32(0x1ffffae6),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 18248 <main+0x1268>;;
     _32(0x18000133),        //call 18710 <abort>;;
     _64(0x00200000e0000000),        //make $r0 = 2147483648 (0x80000000);;
     _32(0x1ffffb0e),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 18268 <main+0x1288>;;
     _32(0x1800012b),        //call 18710 <abort>;;
     _64(0x00200000e0000000),        //make $r0 = 2147483648 (0x80000000);;
     _32(0x1ffffb26),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 18288 <main+0x12a8>;;
     _32(0x18000123),        //call 18710 <abort>;;
     _64(0x00200000e0000000),        //make $r0 = 2147483648 (0x80000000);;
     _32(0x1ffffb38),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 182a8 <main+0x12c8>;;
     _32(0x1800011b),        //call 18710 <abort>;;
     _96(0x052d2d2d81696969e0006940),        //make $r0 = 11936128518282651045 (0xa5a5a5a5a5a5a5a5);;
     _32(0x1ffffaa9),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 182cc <main+0x12ec>;;
     _32(0x18000112),        //call 18710 <abort>;;
     _96(0x052d2d2d81696969e0006940),        //make $r0 = 11936128518282651045 (0xa5a5a5a5a5a5a5a5);;
     _32(0x1ffffad2),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 182e8 <main+0x1308>;;
     _32(0x1800010b),        //call 18710 <abort>;;
     _96(0x052d2d2d81696969e0006940),        //make $r0 = 11936128518282651045 (0xa5a5a5a5a5a5a5a5);;
     _32(0x1ffffab5),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18304 <main+0x1324>;;
     _32(0x18000104),        //call 18710 <abort>;;
     _96(0x052d2d2d81696969e0006940),        //make $r0 = 11936128518282651045 (0xa5a5a5a5a5a5a5a5);;
     _32(0x1ffffade),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18320 <main+0x1340>;;
     _32(0x180000fd),        //call 18710 <abort>;;
     _96(0x052d2d2d81696969e0006940),        //make $r0 = 11936128518282651045 (0xa5a5a5a5a5a5a5a5);;
     _32(0x1ffffaf7),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b000),        //compw.eq $r0 = $r0, 32 (0x20);;
     _32(0x0c000080),        //cb.wnez $r0? 18344 <main+0x1364>;;
     _32(0x180000f4),        //call 18710 <abort>;;
     _96(0x052d2d2d81696969e0006940),        //make $r0 = 11936128518282651045 (0xa5a5a5a5a5a5a5a5);;
     _32(0x1ffffb08),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18360 <main+0x1380>;;
     _32(0x180000ed),        //call 18710 <abort>;;
     _96(0x02d2d2d286969696e0009680),        //make $r0 = 6510615555426900570 (0x5a5a5a5a5a5a5a5a);;
     _32(0x1ffffa7b),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 18384 <main+0x13a4>;;
     _32(0x180000e4),        //call 18710 <abort>;;
     _96(0x02d2d2d286969696e0009680),        //make $r0 = 6510615555426900570 (0x5a5a5a5a5a5a5a5a);;
     _32(0x1ffffaa4),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 183a8 <main+0x13c8>;;
     _32(0x180000db),        //call 18710 <abort>;;
     _96(0x02d2d2d286969696e0009680),        //make $r0 = 6510615555426900570 (0x5a5a5a5a5a5a5a5a);;
     _32(0x1ffffa85),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 183cc <main+0x13ec>;;
     _32(0x180000d2),        //call 18710 <abort>;;
     _96(0x02d2d2d286969696e0009680),        //make $r0 = 6510615555426900570 (0x5a5a5a5a5a5a5a5a);;
     _32(0x1ffffaac),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 183e8 <main+0x1408>;;
     _32(0x180000cb),        //call 18710 <abort>;;
     _96(0x02d2d2d286969696e0009680),        //make $r0 = 6510615555426900570 (0x5a5a5a5a5a5a5a5a);;
     _32(0x1ffffac5),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b000),        //compw.eq $r0 = $r0, 32 (0x20);;
     _32(0x0c000080),        //cb.wnez $r0? 1840c <main+0x142c>;;
     _32(0x180000c2),        //call 18710 <abort>;;
     _96(0x02d2d2d286969696e0009680),        //make $r0 = 6510615555426900570 (0x5a5a5a5a5a5a5a5a);;
     _32(0x1ffffad6),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18428 <main+0x1448>;;
     _32(0x180000bb),        //call 18710 <abort>;;
     _96(0x0657f65787800000e0000000),        //make $r0 = 14627351832016453632 (0xcafecafe00000000);;
     _32(0x1ffffa49),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b080),        //compw.eq $r0 = $r0, 34 (0x22);;
     _32(0x0c000080),        //cb.wnez $r0? 1844c <main+0x146c>;;
     _32(0x180000b2),        //call 18710 <abort>;;
     _96(0x0657f65787800000e0000000),        //make $r0 = 14627351832016453632 (0xcafecafe00000000);;
     _32(0x1ffffa72),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18468 <main+0x1488>;;
     _32(0x180000ab),        //call 18710 <abort>;;
     _96(0x0657f65787800000e0000000),        //make $r0 = 14627351832016453632 (0xcafecafe00000000);;
     _32(0x1ffffa55),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b040),        //compw.eq $r0 = $r0, 33 (0x21);;
     _32(0x0c000080),        //cb.wnez $r0? 1848c <main+0x14ac>;;
     _32(0x180000a2),        //call 18710 <abort>;;
     _96(0x0657f65787800000e0000000),        //make $r0 = 14627351832016453632 (0xcafecafe00000000);;
     _32(0x1ffffa7c),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 184b0 <main+0x14d0>;;
     _32(0x18000099),        //call 18710 <abort>;;
     _96(0x0657f65787800000e0000000),        //make $r0 = 14627351832016453632 (0xcafecafe00000000);;
     _32(0x1ffffa93),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b580),        //compw.eq $r0 = $r0, 22 (0x16);;
     _32(0x0c000080),        //cb.wnez $r0? 184d4 <main+0x14f4>;;
     _32(0x18000090),        //call 18710 <abort>;;
     _96(0x0657f65787800000e0000000),        //make $r0 = 14627351832016453632 (0xcafecafe00000000);;
     _32(0x1ffffaa4),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 184f0 <main+0x1510>;;
     _32(0x18000089),        //call 18710 <abort>;;
     _96(0x0000065787b2bf80e0000000),        //make $r0 = 223195676147712 (0xcafecafe0000);;
     _32(0x1ffffa17),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b480),        //compw.eq $r0 = $r0, 18 (0x12);;
     _32(0x0c000080),        //cb.wnez $r0? 18514 <main+0x1534>;;
     _32(0x18000080),        //call 18710 <abort>;;
     _96(0x0000065787b2bf80e0000000),        //make $r0 = 223195676147712 (0xcafecafe0000);;
     _32(0x1ffffa40),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b400),        //compw.eq $r0 = $r0, 16 (0x10);;
     _32(0x0c000080),        //cb.wnez $r0? 18538 <main+0x1558>;;
     _32(0x18000077),        //call 18710 <abort>;;
     _96(0x0000065787b2bf80e0000000),        //make $r0 = 223195676147712 (0xcafecafe0000);;
     _32(0x1ffffa21),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b440),        //compw.eq $r0 = $r0, 17 (0x11);;
     _32(0x0c000080),        //cb.wnez $r0? 1855c <main+0x157c>;;
     _32(0x1800006e),        //call 18710 <abort>;;
     _96(0x0000065787b2bf80e0000000),        //make $r0 = 223195676147712 (0xcafecafe0000);;
     _32(0x1ffffa48),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b3c0),        //compw.eq $r0 = $r0, 15 (0xf);;
     _32(0x0c000080),        //cb.wnez $r0? 18580 <main+0x15a0>;;
     _32(0x18000065),        //call 18710 <abort>;;
     _96(0x0000065787b2bf80e0000000),        //make $r0 = 223195676147712 (0xcafecafe0000);;
     _32(0x1ffffa5f),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b580),        //compw.eq $r0 = $r0, 22 (0x16);;
     _32(0x0c000080),        //cb.wnez $r0? 185a4 <main+0x15c4>;;
     _32(0x1800005c),        //call 18710 <abort>;;
     _96(0x0000065787b2bf80e0000000),        //make $r0 = 223195676147712 (0xcafecafe0000);;
     _32(0x1ffffa70),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 185c0 <main+0x15e0>;;
     _32(0x18000055),        //call 18710 <abort>;;
     _64(0x0032bfb2e000bf80),        //make $r0 = 3405695742 (0xcafecafe);;
     _32(0x1ffff9e4),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 185e0 <main+0x1600>;;
     _32(0x1800004d),        //call 18710 <abort>;;
     _64(0x0032bfb2e000bf80),        //make $r0 = 3405695742 (0xcafecafe);;
     _32(0x1ffffa0e),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b000),        //compw.eq $r0 = $r0, 32 (0x20);;
     _32(0x0c000080),        //cb.wnez $r0? 18600 <main+0x1620>;;
     _32(0x18000045),        //call 18710 <abort>;;
     _64(0x0032bfb2e000bf80),        //make $r0 = 3405695742 (0xcafecafe);;
     _32(0x1ffff9f0),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 18620 <main+0x1640>;;
     _32(0x1800003d),        //call 18710 <abort>;;
     _64(0x0032bfb2e000bf80),        //make $r0 = 3405695742 (0xcafecafe);;
     _32(0x1ffffa18),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b7c0),        //compw.eq $r0 = $r0, 31 (0x1f);;
     _32(0x0c000080),        //cb.wnez $r0? 18640 <main+0x1660>;;
     _32(0x18000035),        //call 18710 <abort>;;
     _64(0x0032bfb2e000bf80),        //make $r0 = 3405695742 (0xcafecafe);;
     _32(0x1ffffa30),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b580),        //compw.eq $r0 = $r0, 22 (0x16);;
     _32(0x0c000080),        //cb.wnez $r0? 18660 <main+0x1680>;;
     _32(0x1800002d),        //call 18710 <abort>;;
     _64(0x0032bfb2e000bf80),        //make $r0 = 3405695742 (0xcafecafe);;
     _32(0x1ffffa42),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18678 <main+0x1698>;;
     _32(0x18000027),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffff9b7),        //call 16d58 <my_ffsll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 18694 <main+0x16b4>;;
     _32(0x18000020),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffff9e2),        //call 16e20 <my_clzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 186a8 <main+0x16c8>;;
     _32(0x1800001b),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffff9c7),        //call 16dc8 <my_ctzll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 186bc <main+0x16dc>;;
     _32(0x18000016),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffff9f2),        //call 16e88 <my_clrsbll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000001f101b7c0),        //compw.eq $r0 = $r0, 63 (0x3f);;
     _32(0x0c000080),        //cb.wnez $r0? 186d8 <main+0x16f8>;;
     _32(0x1800000f),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa0b),        //call 16f08 <my_popcountll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000002f101b000),        //compw.eq $r0 = $r0, 64 (0x40);;
     _32(0x0c000080),        //cb.wnez $r0? 186f4 <main+0x1714>;;
     _32(0x18000008),        //call 18710 <abort>;;
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x1ffffa1e),        //call 16f70 <my_parityll>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 18708 <main+0x1728>;;
     _32(0x18000003),        //call 18710 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x18000009)        //call 18730 <exit>;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000105),        //call 18b30 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000839),        //call 1a808 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000161),        //call 18cc8 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x0000000080000105e0003000),        //make $r0 = 267456 (0x414c0);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 1876c <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x98000827),        //call 1a808 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let __libc_fini_array: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _96(0x800000e0a749040ce0480000),        //make $r18 = 229376 (0x38000)
     _32(0x00000000),        //sd 16 (0x10)[$r12] = $r18;;
     _96(0x800000e0a739020ce5380012),        //sbfd $r14 = $r18, 229376 (0x38000)
     _32(0x00000000),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa3a20ce),        //srad $r14 = $r14, 3 (0x3)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x0880014e),        //cb.deqz $r14? 187bc <__libc_fini_array+0x44>;;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x3802f392),        //ld.xs $r0 = $r14[$r18];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x087fff4e),        //cb.dnez $r14? 187ac <__libc_fini_array+0x34>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let __libc_init_array: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _96(0x800000e0a849020ce04c0000),        //make $r19 = 229376 (0x38000)
     _32(0x00000000),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xe0380000),        //make $r14 = 0 (0x0)
     _96(0x880000e0a739000ce5480013),        //sbfd $r18 = $r19, 229376 (0x38000)
     _32(0x08000000),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xfa4a20d2),        //srad $r18 = $r18, 3 (0x3)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x08800192),        //cb.deqz $r18? 18824 <__libc_init_array+0x4c>;;
     _32(0xe138004e),        //addd $r14 = $r14, 1 (0x1)
     _32(0x3802f393),        //ld.xs $r0 = $r14[$r19];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x7001a392),        //compd.ne $r0 = $r18, $r14;;
     _32(0x087fff00),        //cb.dnez $r0? 18810 <__libc_init_array+0x38>;;
     _32(0xe0380000),        //make $r14 = 0 (0x0)
     _96(0x08000000880000e0e04c0000),        //make $r19 = 229376 (0x38000);;
     _96(0x00000000800000e0e5480013),        //sbfd $r18 = $r19, 229376 (0x38000);;
     _32(0x7a4a20d2),        //srad $r18 = $r18, 3 (0x3);;
     _32(0x08800192),        //cb.deqz $r18? 1885c <__libc_init_array+0x84>;;
     _32(0xe138004e),        //addd $r14 = $r14, 1 (0x1)
     _32(0x3802f393),        //ld.xs $r0 = $r14[$r19];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x7001a392),        //compd.ne $r0 = $r18, $r14;;
     _32(0x087fff00),        //cb.dnez $r0? 18848 <__libc_init_array+0x70>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let _init_signal_r_part_0: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040100),        //make $r1 = 256 (0x100);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000221),        //call 19110 <_malloc_r>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x888003c0),        //cb.deqz $r0? 188d0 <_init_signal_r.part.0+0x58>
     _64(0x18000001a701460e),        //sd 1304 (0x518)[$r14] = $r0;;
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _32(0x60040020),        //make $r1 = 32 (0x20);;
     _32(0x0f0000c1),        //loopdo $r1, 188b8 <_init_signal_r.part.0+0x40>;;
     _32(0xe1080042),        //addd $r2 = $r2, 1 (0x1)
     _32(0x270ff080),        //sd.xs $r2[$r0] = $r3;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x97fffffb),        //goto 188bc <_init_signal_r.part.0+0x44>
     _64(0x003fffffe000ffc0),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0x7f03f000)        //nop ;;
 |];

let _init_signal_r: list_I = 
 [|
     _64(0x18000001b8044600),        //ld $r1 = 1304 (0x518)[$r0];;
     _32(0x088000c1),        //cb.deqz $r1? 188f4 <_init_signal_r+0x14>;;
     _32(0x8fd00000),        //ret 
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x17ffffe1)        //goto 18878 <_init_signal_r.part.0>;;
 |];

let _signal_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _64(0x08000000f80db7c1),        //compw.leu $r3 = $r1, 31 (0x1f);;
     _32(0xea480002),        //copyd $r18 = $r2
     _32(0xf84cffc1),        //zxwd $r19 = $r1
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x8c800383),        //cb.weqz $r3? 18954 <_signal_r+0x5c>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _64(0x18000001b8084600),        //ld $r2 = 1304 (0x518)[$r0];;
     _32(0x088004c2),        //cb.deqz $r2? 18978 <_signal_r+0x80>;;
     _32(0x6907f013),        //sxwd $r1 = $r19;;
     _32(0x3802f042),        //ld.xs $r0 = $r1[$r2];;
     _32(0x274bf042),        //sd.xs $r1[$r2] = $r18;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0xe0040016),        //make $r1 = 22 (0x16)
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x1fffffc0),        //call 18878 <_init_signal_r.part.0>;;
     _32(0xfa040000),        //copyw $r1 = $r0
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x0c7ffb81),        //cb.wnez $r1? 1893c <_signal_r+0x44>;;
     _32(0x97ffffea),        //goto 18930 <_signal_r+0x38>
     _64(0x18000001b808460e),        //ld $r2 = 1304 (0x518)[$r14];;
     _32(0x7f03f000)        //nop ;;
 |];

let _raise_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _64(0x08000000f809b7c1),        //compw.leu $r2 = $r1, 31 (0x1f);;
     _32(0xf848ffc1),        //zxwd $r18 = $r1
     _32(0xe04c0000),        //make $r19 = 0 (0x0)
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xe907f012),        //sxwd $r1 = $r18
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x8c800a82),        //cb.weqz $r2? 18a68 <_raise_r+0xd0>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _64(0x18000001b8004600),        //ld $r0 = 1304 (0x518)[$r0];;
     _32(0x08800440),        //cb.deqz $r0? 18a14 <_raise_r+0x7c>;;
     _32(0x380ef040),        //ld.xs $r3 = $r1[$r0];;
     _32(0xe1110043),        //compd.eq $r4 = $r3, 1 (0x1)
     _32(0x6009ffc3),        //compd.ne $r2 = $r3, -1 (0xffffffff);;
     _32(0x08800343),        //cb.deqz $r3? 18a14 <_raise_r+0x7c>;;
     _32(0x08000144),        //cb.dnez $r4? 189f8 <_raise_r+0x60>;;
     _32(0x08800582),        //cb.deqz $r2? 18a40 <_raise_r+0xa8>;;
     _32(0x8fdc0003),        //icall $r3
     _32(0xfa000012),        //copyw $r0 = $r18
     _32(0x274ff040),        //sd.xs $r1[$r0] = $r19;;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x980000ab),        //call 18cc0 <_getpid_r>
     _32(0x6a00000e),        //copyd $r0 = $r14;;
     _32(0xfa080012),        //copyw $r2 = $r18
     _32(0xfa040000),        //copyw $r1 = $r0
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x1000007f),        //goto 18c38 <_kill_r>;;
     _32(0xe0000016),        //make $r0 = 22 (0x16)
     _32(0x604c0001),        //make $r19 = 1 (0x1);;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x2601000e),        //sw 0 (0x0)[$r14] = $r0;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0xe0000016),        //make $r0 = 22 (0x16)
     _64(0x083fffffe04cffc0),        //make $r19 = 4294967295 (0xffffffff);;
     _32(0x97ffffe1),        //goto 189f8 <_raise_r+0x60>
     _32(0x2601000e),        //sw 0 (0x0)[$r14] = $r0;;
     _32(0x7f03f000)        //nop ;;
 |];

let __sigtramp_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _64(0x08000000f809b7c1),        //compw.leu $r2 = $r1, 31 (0x1f);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xf848ffc1),        //zxwd $r18 = $r1
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x8c800802),        //cb.weqz $r2? 18b20 <__sigtramp_r+0xa0>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _64(0x18000001b8084600),        //ld $r2 = 1304 (0x518)[$r0];;
     _32(0x088005c2),        //cb.deqz $r2? 18b0c <__sigtramp_r+0x8c>;;
     _32(0xe90ff012),        //sxwd $r3 = $r18
     _32(0xf4118092),        //addx8wd $r4 = $r18, $r2
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x380af0c2),        //ld.xs $r2 = $r3[$r2];;
     _32(0x6105ffc2),        //compd.eq $r1 = $r2, -1 (0xffffffff);;
     _32(0x088002c2),        //cb.deqz $r2? 18af4 <__sigtramp_r+0x74>;;
     _32(0x88000281),        //cb.dnez $r1? 18af4 <__sigtramp_r+0x74>
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0xe1050042),        //compd.eq $r1 = $r2, 1 (0x1)
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x08000181),        //cb.dnez $r1? 18af4 <__sigtramp_r+0x74>;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x7a000012),        //copyw $r0 = $r18;;
     _32(0x8fdc0002),        //icall $r2
     _32(0x27050004),        //sd 0 (0x0)[$r4] = $r1;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x1fffff5b),        //call 18878 <_init_signal_r.part.0>;;
     _32(0x0c000100),        //cb.wnez $r0? 18b20 <__sigtramp_r+0xa0>;;
     _32(0x97ffffe8),        //goto 18ab4 <__sigtramp_r+0x34>
     _64(0x18000001b808460e),        //ld $r2 = 1304 (0x518)[$r14];;
     _32(0x97fffff5),        //goto 18af4 <__sigtramp_r+0x74>
     _64(0x003fffffe000ffc0),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0x7f03f000)        //nop ;;
 |];

let raise: list_I = 
 [|
     _32(0xfa040000),        //copyw $r1 = $r0
     _96(0x0800000088000100e0085000),        //make $r2 = 262464 (0x40140);;
     _32(0x97ffff96),        //goto 18998 <_raise_r>
     _32(0x38000002)        //ld $r0 = 0 (0x0)[$r2];;
 |];

let signal: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x0800000088000100e00c5000),        //make $r3 = 262464 (0x40140);;
     _32(0xea380001),        //copyd $r14 = $r1
     _64(0xa739000cf809b7c0),        //compw.leu $r2 = $r0, 31 (0x1f)
     _32(0x08000000),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xf848ffc0),        //zxwd $r18 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x8c800382),        //cb.weqz $r2? 18bb0 <signal+0x68>
     _32(0x384c0003),        //ld $r19 = 0 (0x0)[$r3];;
     _64(0x18000001b8084613),        //ld $r2 = 1304 (0x518)[$r19];;
     _32(0x088004c2),        //cb.deqz $r2? 18bd4 <signal+0x8c>;;
     _32(0x6907f012),        //sxwd $r1 = $r18;;
     _32(0x3802f042),        //ld.xs $r0 = $r1[$r2];;
     _32(0x273bf042),        //sd.xs $r1[$r2] = $r14;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0xe0040016),        //make $r1 = 22 (0x16)
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x26050013),        //sw 0 (0x0)[$r19] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x9fffff29),        //call 18878 <_init_signal_r.part.0>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xfa040000),        //copyw $r1 = $r0
     _32(0x6000ffff),        //make $r0 = -1 (0xffffffff);;
     _32(0x0c7ffb41),        //cb.wnez $r1? 18b98 <signal+0x50>;;
     _32(0x97ffffe9),        //goto 18b8c <signal+0x44>
     _64(0x18000001b8084613),        //ld $r2 = 1304 (0x518)[$r19];;
     _32(0x7f03f000)        //nop ;;
 |];

let _init_signal: list_I = 
 [|
     _96(0x0000000080000100e0005000),        //make $r0 = 262464 (0x40140);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _64(0x18000001b8044600),        //ld $r1 = 1304 (0x518)[$r0];;
     _32(0x088000c1),        //cb.deqz $r1? 18c1c <_init_signal+0x24>;;
     _32(0x8fd00000),        //ret 
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x17ffff17)        //goto 18878 <_init_signal_r.part.0>;;
 |];

let __sigtramp: list_I = 
 [|
     _32(0xfa040000),        //copyw $r1 = $r0
     _96(0x0800000088000100e0085000),        //make $r2 = 262464 (0x40140);;
     _32(0x97ffff94),        //goto 18a80 <__sigtramp_r>
     _32(0x38000002)        //ld $r0 = 0 (0x0)[$r2];;
 |];

let _kill_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x780cffc1),        //zxwd $r3 = $r1;;
     _32(0xe0100000),        //make $r4 = 0 (0x0)
     _32(0xfa040002),        //copyw $r1 = $r2
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa000003),        //copyw $r0 = $r3
     _96(0x8800011fa749040ce0486200),        //make $r18 = 294280 (0x47d88)
     _32(0x08000000),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x9800075f),        //call 1a9e8 <_kill>
     _32(0x26110012),        //sw 0 (0x0)[$r18] = $r4;;
     _64(0x07fffffff005b7c0),        //compw.ne $r1 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c8001c1),        //cb.weqz $r1? 18c98 <_kill_r+0x60>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x30040012),        //lwz $r1 = 0 (0x0)[$r18];;
     _32(0x08fffe41),        //cb.deqz $r1? 18c80 <_kill_r+0x48>;;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let _getpid_r: list_I = 
 [|
     _32(0x10000756),        //goto 1aa18 <_getpid>;;
     _32(0x00000000)        //errop ;;
 |];

let __call_exitprocs: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0xf858ffc0),        //zxwd $r22 = $r0
     _32(0xe0500000),        //make $r20 = 0 (0x0)
     _96(0x9000010ea855080ce000b000),        //make $r0 = 277184 (0x43ac0)
     _32(0x10000000),        //so 32 (0x20)[$r12] = $r20r21r22r23;;
     _32(0xea680001),        //copyd $r26 = $r1
     _96(0x8800006ea865100ce05c0e00),        //make $r23 = 112696 (0x1b838)
     _32(0x08000000),        //so 64 (0x40)[$r12] = $r24r25r26r27;;
     _32(0xe04c0001),        //make $r19 = 1 (0x1)
     _32(0x2849040c),        //sq 16 (0x10)[$r12] = $r18r19;;
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x27411e0c),        //sd 120 (0x78)[$r12] = $r16;;
     _32(0x2871180c),        //sq 96 (0x60)[$r12] = $r28r29;;
     _32(0x98000090),        //call 18f50 <__libc_lock_acquire>
     _32(0x27791c0c),        //sd 112 (0x70)[$r12] = $r30;;
     _96(0x0000000080000105e0003000),        //make $r0 = 267456 (0x414c0);;
     _32(0x38600000),        //ld $r24 = 0 (0x0)[$r0];;
     _32(0x61647e18),        //addd $r25 = $r24, 504 (0x1f8);;
     _32(0xea780019),        //copyd $r30 = $r25
     _32(0x38487e18),        //ld $r18 = 504 (0x1f8)[$r24];;
     _32(0x08800c52),        //cb.deqz $r18? 18df8 <__call_exitprocs+0x130>;;
     _32(0xe16c0412),        //addd $r27 = $r18, 16 (0x10)
     _32(0xe1544412),        //addd $r21 = $r18, 272 (0x110)
     _64(0xb0000212e1748412),        //addd $r29 = $r18, 528 (0x210)
     _32(0x10000000),        //lwz $r0 = 8 (0x8)[$r18];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x693bf000),        //sxwd $r14 = $r0;;
     _32(0x0d800100),        //cb.wgez $r0? 18d64 <__call_exitprocs+0x9c>;;
     _32(0x1000001e),        //goto 18dd0 <__call_exitprocs+0x108>;;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x0d00070e),        //cb.wltz $r14? 18dd0 <__call_exitprocs+0x108>;;
     _32(0x8880015a),        //cb.deqz $r26? 18d78 <__call_exitprocs+0xb0>
     _32(0x7808ffce),        //zxwd $r2 = $r14;;
     _32(0x3802f39d),        //ld.xs $r0 = $r14[$r29];;
     _32(0x7101a680),        //compd.eq $r0 = $r0, $r26;;
     _32(0x08fffe80),        //cb.deqz $r0? 18d5c <__call_exitprocs+0x94>;;
     _32(0x30000212),        //lwz $r0 = 8 (0x8)[$r18];;
     _32(0x380ef39b),        //ld.xs $r3 = $r14[$r27];;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x7001b380),        //compw.ne $r0 = $r0, $r14;;
     _32(0x0c800c80),        //cb.weqz $r0? 18e50 <__call_exitprocs+0x188>;;
     _32(0x2753f39b),        //sd.xs $r14[$r27] = $r20;;
     _32(0x08fffcc3),        //cb.deqz $r3? 18d5c <__call_exitprocs+0x94>;;
     _32(0xf90a7093),        //sllw $r2 = $r19, $r2
     _64(0x18000000b000c412),        //lwz $r0 = 784 (0x310)[$r18];;
     _32(0x30700212),        //lwz $r28 = 8 (0x8)[$r18];;
     _32(0x78011080),        //andw $r0 = $r0, $r2;;
     _32(0x0c000840),        //cb.wnez $r0? 18e2c <__call_exitprocs+0x164>;;
     _32(0x0fdc0003),        //icall $r3;;
     _32(0xe138ffce),        //addd $r14 = $r14, -1 (0xffffffff)
     _32(0x30000212),        //lwz $r0 = 8 (0x8)[$r18];;
     _32(0x7001b700),        //compw.ne $r0 = $r0, $r28;;
     _32(0x0c7ff700),        //cb.wnez $r0? 18d2c <__call_exitprocs+0x64>;;
     _32(0x3800001e),        //ld $r0 = 0 (0x0)[$r30];;
     _32(0x7001a480),        //compd.ne $r0 = $r0, $r18;;
     _32(0x087ff640),        //cb.dnez $r0? 18d2c <__call_exitprocs+0x64>;;
     _32(0x0dfff98e),        //cb.wgez $r14? 18d64 <__call_exitprocs+0x9c>;;
     _32(0x08800297),        //cb.deqz $r23? 18df8 <__call_exitprocs+0x130>;;
     _32(0x30000212),        //lwz $r0 = 8 (0x8)[$r18];;
     _32(0x38040012),        //ld $r1 = 0 (0x0)[$r18];;
     _32(0x0c000840),        //cb.wnez $r0? 18e60 <__call_exitprocs+0x198>;;
     _32(0x08800801),        //cb.deqz $r1? 18e60 <__call_exitprocs+0x198>;;
     _32(0x8fdc0017),        //icall $r23
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x2705001e),        //sd 0 (0x0)[$r30] = $r1;;
     _32(0x3848001e),        //ld $r18 = 0 (0x0)[$r30];;
     _32(0x087ff452),        //cb.dnez $r18? 18d38 <__call_exitprocs+0x70>;;
     _96(0x8000010eb8401e0ce000b000),        //make $r0 = 277184 (0x43ac0)
     _32(0x00000000),        //ld $r16 = 120 (0x78)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x3c48040c),        //lq $r18r19 = 16 (0x10)[$r12];;
     _32(0x3c54080c),        //lo $r20r21r22r23 = 32 (0x20)[$r12];;
     _32(0x3c64100c),        //lo $r24r25r26r27 = 64 (0x40)[$r12];;
     _32(0x3c70180c),        //lq $r28r29 = 96 (0x60)[$r12];;
     _32(0xe130200c),        //addd $r12 = $r12, 128 (0x80)
     _32(0x38781c0c),        //ld $r30 = 112 (0x70)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x1000008e),        //goto 19060 <__libc_lock_release>;;
     _64(0x18000000b010c512),        //lwz $r4 = 788 (0x314)[$r18];;
     _32(0x3802f395),        //ld.xs $r0 = $r14[$r21];;
     _32(0x78091084),        //andw $r2 = $r4, $r2;;
     _32(0x0c0001c2),        //cb.wnez $r2? 18e58 <__call_exitprocs+0x190>;;
     _32(0x8fdc0003),        //icall $r3
     _32(0xea040000),        //copyd $r1 = $r0
     _32(0x7a000016),        //copyw $r0 = $r22;;
     _32(0x17ffffd9),        //goto 18db0 <__call_exitprocs+0xe8>;;
     _32(0x97ffffd0),        //goto 18d90 <__call_exitprocs+0xc8>
     _32(0x26090212),        //sw 8 (0x8)[$r18] = $r2;;
     _32(0x0fdc0003),        //icall $r3;;
     _32(0x17ffffd5),        //goto 18db0 <__call_exitprocs+0xe8>;;
     _32(0xea780012),        //copyd $r30 = $r18
     _32(0x6a480001),        //copyd $r18 = $r1;;
     _32(0x087fed12),        //cb.dnez $r18? 18d38 <__call_exitprocs+0x70>;;
     _32(0x17ffffe3)        //goto 18df8 <__call_exitprocs+0x130>;;
 |];

let __libc_lock_init: list_I = 
 [|
     _32(0x08800080),        //cb.deqz $r0? 18e78 <__libc_lock_init+0x8>;;
     _32(0x100042bf),        //goto 29970 <__cos_recursive_initlock_base>;;
     _32(0x00000000),        //errop ;;
     _32(0x100042bd)        //goto 29970 <__cos_recursive_initlock_base>;;
 |];

let __libc_lock_close: list_I = 
 [|
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __libc_lock_try_acquire: list_I = 
 [|
     _32(0x8fc40081),        //get $r1 = $pcr
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x8fc40082),        //get $r2 = $pcr
     _32(0x6407f201),        //extfz $r1 = $r1, 15 (0xf), 8 (0x8);;
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xf4055041),        //addx8w $r1 = $r1, $r1
     _32(0x78083fc2),        //zxbd $r2 = $r2;;
     _32(0xf0055081),        //addx2w $r1 = $r1, $r2
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x980042b5),        //call 29980 <__cos_recursive_trylock_base>
     _32(0x71040041),        //addw $r1 = $r1, 1 (0x1);;
     _64(0x00000000f005b040),        //compw.ne $r1 = $r0, 1 (0x1);;
     _32(0x0c8001c1),        //cb.weqz $r1? 18ed8 <__libc_lock_try_acquire+0x50>;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _64(0xb840040cf101b000),        //compw.eq $r0 = $r0, 0 (0x0)
     _32(0x08000000),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _96(0x0000000080000000e0040000),        //make $r1 = 0 (0x0);;
     _32(0x08000201),        //cb.dnez $r1? 18f04 <__libc_lock_try_acquire+0x7c>;;
     _32(0x3fcd0000),        //fence ;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _64(0xb840040cf101b000),        //compw.eq $r0 = $r0, 0 (0x0)
     _32(0x08000000),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _96(0x80000000e0080000e0040040),        //make $r1 = 1 (0x1)
     _96(0x080000008800000080000000),        //make $r2 = 0 (0x0);;
     _32(0xe0090002),        //compd.ne $r2 = $r2, 0 (0x0)
     _64(0x08000000f505b041),        //compw.gt $r1 = $r1, 1 (0x1);;
     _32(0x78051081),        //andw $r1 = $r1, $r2;;
     _32(0x0c000101),        //cb.wnez $r1? 18f3c <__libc_lock_try_acquire+0xb4>;;
     _32(0x3f8d0000),        //dinval ;;
     _32(0x97ffffee),        //goto 18eec <__libc_lock_try_acquire+0x64>
     _32(0x3fcd0000),        //fence ;;
     _32(0x980040bd),        //call 29230 <mppa_cos_l2_wb_inval>
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x97fffffb),        //goto 18f34 <__libc_lock_try_acquire+0xac>
     _32(0x3f8d0000)        //dinval ;;
 |];

let __libc_lock_acquire: list_I = 
 [|
     _32(0x8fc40081),        //get $r1 = $pcr
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x8fc40082),        //get $r2 = $pcr
     _32(0xe407f201),        //extfz $r1 = $r1, 15 (0xf), 8 (0x8)
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xf4055041),        //addx8w $r1 = $r1, $r1
     _32(0x78383fc2),        //zxbd $r14 = $r2;;
     _32(0xf0395381),        //addx2w $r14 = $r1, $r14
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2849060c),        //sq 24 (0x18)[$r12] = $r18r19;;
     _32(0xf14c004e),        //addw $r19 = $r14, 1 (0x1)
     _32(0xe0500000),        //make $r20 = 0 (0x0)
     _32(0xf138004e),        //addw $r14 = $r14, 1 (0x1)
     _32(0x27510a0c),        //sd 40 (0x28)[$r12] = $r20;;
     _32(0x27410c0c),        //sd 48 (0x30)[$r12] = $r16;;
     _32(0x9fffffbe),        //call 18e88 <__libc_lock_try_acquire>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x0c800380),        //cb.weqz $r0? 18fd0 <__libc_lock_acquire+0x80>;;
     _32(0x26510e0c),        //sw 56 (0x38)[$r12] = $r20;;
     _32(0x30040e0c),        //lwz $r1 = 56 (0x38)[$r12];;
     _32(0x7705b4c1),        //compw.geu $r1 = $r1, $r19;;
     _32(0x0c7ffe81),        //cb.wnez $r1? 18f90 <__libc_lock_acquire+0x40>;;
     _32(0x30040e0c),        //lwz $r1 = 56 (0x38)[$r12];;
     _32(0x71040041),        //addw $r1 = $r1, 1 (0x1);;
     _32(0x26050e0c),        //sw 56 (0x38)[$r12] = $r1;;
     _32(0x30040e0c),        //lwz $r1 = 56 (0x38)[$r12];;
     _32(0x7605b381),        //compw.ltu $r1 = $r1, $r14;;
     _32(0x0c7ffec1),        //cb.wnez $r1? 18fac <__libc_lock_acquire+0x5c>;;
     _32(0x9fffffb1),        //call 18e88 <__libc_lock_try_acquire>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x0c7ffd00),        //cb.wnez $r0? 18f9c <__libc_lock_acquire+0x4c>;;
     _96(0x0000000080000000e0000000),        //make $r0 = 0 (0x0);;
     _32(0x08000240),        //cb.dnez $r0? 19000 <__libc_lock_acquire+0xb0>;;
     _32(0x3fcd0000),        //fence ;;
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500a0c),        //ld $r20 = 40 (0x28)[$r12];;
     _96(0x80000000e0040000e0000040),        //make $r0 = 1 (0x1)
     _96(0x080000008800000080000000),        //make $r1 = 0 (0x0);;
     _32(0xe0050001),        //compd.ne $r1 = $r1, 0 (0x0)
     _64(0x08000000f501b040),        //compw.gt $r0 = $r0, 1 (0x1);;
     _32(0x78011040),        //andw $r0 = $r0, $r1;;
     _32(0x0c000280),        //cb.wnez $r0? 19050 <__libc_lock_acquire+0x100>;;
     _32(0x3f8d0000),        //dinval ;;
     _32(0x3fcd0000),        //fence ;;
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500a0c),        //ld $r20 = 40 (0x28)[$r12];;
     _32(0x18004078),        //call 29230 <mppa_cos_l2_wb_inval>;;
     _32(0x97fffff7),        //goto 19030 <__libc_lock_acquire+0xe0>
     _32(0x3f8d0000),        //dinval ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __libc_lock_release: list_I = 
 [|
     _32(0x8fc40081),        //get $r1 = $pcr
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x8fc40082),        //get $r2 = $pcr
     _32(0x6407f201),        //extfz $r1 = $r1, 15 (0xf), 8 (0x8);;
     _32(0xf4055041),        //addx8w $r1 = $r1, $r1
     _32(0xf80c3fc2),        //zxbd $r3 = $r2
     _96(0x1000000090000000e0080000),        //make $r2 = 0 (0x0);;
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x700550c1),        //addx2w $r1 = $r1, $r3;;
     _32(0xf1040041),        //addw $r1 = $r1, 1 (0x1)
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x880001c2),        //cb.dnez $r2? 190b0 <__libc_lock_release+0x50>
     _32(0x6907f001),        //sxwd $r1 = $r1;;
     _32(0x3fcd0000),        //fence ;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x10004287),        //goto 29ac8 <__cos_recursive_unlock_base>;;
     _96(0x80000000e00c0000e0080040),        //make $r2 = 1 (0x1)
     _96(0x080000008800000080000000),        //make $r3 = 0 (0x0);;
     _32(0xe00d0003),        //compd.ne $r3 = $r3, 0 (0x0)
     _64(0x08000000f509b042),        //compw.gt $r2 = $r2, 1 (0x1);;
     _32(0x780910c2),        //andw $r2 = $r2, $r3;;
     _32(0x0c0001c2),        //cb.wnez $r2? 190f4 <__libc_lock_release+0x94>;;
     _32(0x3f8d0000),        //dinval ;;
     _32(0x3fcd0000),        //fence ;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x10004276),        //goto 29ac8 <__cos_recursive_unlock_base>;;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x9800404e),        //call 29230 <mppa_cos_l2_wb_inval>
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x97fffff6),        //goto 190e0 <__libc_lock_release+0x80>
     _32(0x3f8d0000)        //dinval ;;
 |];

let _malloc_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0xe14805c1),        //addd $r18 = $r1, 23 (0x17)
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xe9090b92),        //compd.gtu $r2 = $r18, 46 (0x2e)
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2855060c),        //so 24 (0x18)[$r12] = $r20r21r22r23;;
     _32(0x28650e0c),        //so 56 (0x38)[$r12] = $r24r25r26r27;;
     _32(0x88000982),        //cb.dnez $r2? 191cc <_malloc_r+0xbc>
     _32(0x2741160c),        //sd 88 (0x58)[$r12] = $r16;;
     _32(0xe9050801),        //compd.gtu $r1 = $r1, 32 (0x20)
     _32(0x60480020),        //make $r18 = 32 (0x20);;
     _32(0x08002ac1),        //cb.dnez $r1? 193f0 <_malloc_r+0x2e0>;;
     _32(0x18000258),        //call 19aa8 <__malloc_lock>;;
     _32(0xe0000050),        //make $r0 = 80 (0x50)
     _32(0x60140004),        //make $r5 = 4 (0x4);;
     _96(0x80000102b838a600e108a400),        //addd $r2 = $r0, 264848 (0x40a90)
     _96(0x180000009800010280000000),        //ld $r14 = 264856 (0x40a98)[$r0];;
     _32(0x6104fc02),        //addd $r1 = $r2, -16 (0xfffffff0);;
     _32(0x7005a04e),        //compd.ne $r1 = $r14, $r1;;
     _32(0x08802a81),        //cb.deqz $r1? 1941c <_malloc_r+0x30c>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x3804020e),        //ld $r1 = 8 (0x8)[$r14];;
     _32(0x3808060e),        //ld $r2 = 24 (0x18)[$r14];;
     _32(0x380c040e),        //ld $r3 = 16 (0x10)[$r14];;
     _32(0x6804ff01),        //andd $r1 = $r1, -4 (0xfffffffc);;
     _32(0xf105004e),        //addd $r1 = $r14, $r1
     _32(0x27090603),        //sd 24 (0x18)[$r3] = $r2;;
     _32(0x270d0402),        //sd 16 (0x10)[$r2] = $r3;;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x6a080042),        //ord $r2 = $r2, 1 (0x1);;
     _32(0x98000246),        //call 19ab8 <__malloc_unlock>
     _32(0x27090201),        //sd 8 (0x8)[$r1] = $r2;;
     _32(0xe100040e),        //addd $r0 = $r14, 16 (0x10)
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0x6848fc12),        //andd $r18 = $r18, -16 (0xfffffff0);;
     _32(0xf905a481),        //compd.gtu $r1 = $r1, $r18
     _64(0x081fffffe909ffd2),        //compd.gtu $r2 = $r18, 2147483647 (0x7fffffff);;
     _32(0x7a051042),        //orw $r1 = $r2, $r1;;
     _32(0x0c002101),        //cb.wnez $r1? 193f0 <_malloc_r+0x2e0>;;
     _32(0x18000231),        //call 19aa8 <__malloc_lock>;;
     _32(0xe9017dd2),        //compd.gtu $r0 = $r18, 503 (0x1f7)
     _32(0xe0100400),        //make $r4 = 1024 (0x400)
     _32(0xe0140040),        //make $r5 = 64 (0x40)
     _32(0x6018003f),        //make $r6 = 63 (0x3f);;
     _32(0x088065c0),        //cb.deqz $r0? 19854 <_malloc_r+0x744>;;
     _32(0x7b022252),        //srld $r0 = $r18, 9 (0x9);;
     _32(0x08004700),        //cb.dnez $r0? 19670 <_malloc_r+0x560>;;
     _96(0x80000102b838a604e110a004),        //addd $r4 = $r4, 264832 (0x40a80)
     _96(0x180000009800010280000000),        //ld $r14 = 264856 (0x40a98)[$r4];;
     _32(0x7101a384),        //compd.eq $r0 = $r4, $r14;;
     _32(0x08800180),        //cb.deqz $r0? 19238 <_malloc_r+0x128>;;
     _32(0x1000000b),        //goto 19250 <_malloc_r+0x140>;;
     _32(0x09804e02),        //cb.dgez $r2? 19708 <_malloc_r+0x5f8>;;
     _32(0x3838060e),        //ld $r14 = 24 (0x18)[$r14];;
     _32(0x7005a384),        //compd.ne $r1 = $r4, $r14;;
     _32(0x088001c1),        //cb.deqz $r1? 19250 <_malloc_r+0x140>;;
     _32(0x3804020e),        //ld $r1 = 8 (0x8)[$r14];;
     _32(0x6804ff01),        //andd $r1 = $r1, -4 (0xfffffffc);;
     _32(0x75090052),        //sbfd $r2 = $r18, $r1;;
     _32(0x650d07c2),        //compd.gt $r3 = $r2, 31 (0x1f);;
     _32(0x08fffe03),        //cb.deqz $r3? 19228 <_malloc_r+0x118>;;
     _32(0x6a140006),        //copyd $r5 = $r6;;
     _96(0x0000000080000102e050a400),        //make $r20 = 264848 (0x40a90);;
     _32(0xe1040414),        //addd $r1 = $r20, 16 (0x10)
     _32(0x38380814),        //ld $r14 = 32 (0x20)[$r20];;
     _32(0x7001a04e),        //compd.ne $r0 = $r14, $r1;;
     _32(0x08801e80),        //cb.deqz $r0? 19450 <_malloc_r+0x340>;;
     _32(0x3808020e),        //ld $r2 = 8 (0x8)[$r14];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x750d0092),        //sbfd $r3 = $r18, $r2;;
     _32(0x640107c3),        //compd.le $r0 = $r3, 31 (0x1f);;
     _32(0x08805f40),        //cb.deqz $r0? 19870 <_malloc_r+0x760>;;
     _32(0xe9017fc2),        //compd.gtu $r0 = $r2, 511 (0x1ff)
     _32(0x27050a14),        //sd 40 (0x28)[$r20] = $r1;;
     _32(0x89804103),        //cb.dgez $r3? 19698 <_malloc_r+0x588>
     _32(0x27050814),        //sd 32 (0x20)[$r20] = $r1;;
     _32(0x08004c40),        //cb.dnez $r0? 19754 <_malloc_r+0x644>;;
     _32(0xe60b20c2),        //extfz $r2 = $r2, 34 (0x22), 3 (0x3)
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x380c0214),        //ld $r3 = 8 (0x8)[$r20];;
     _32(0xf1040042),        //addw $r1 = $r2, 1 (0x1)
     _32(0x7a0a3082),        //sraw $r2 = $r2, 2 (0x2);;
     _32(0xf9063041),        //sllw $r1 = $r1, 1 (0x1)
     _32(0x790a6080),        //slld $r2 = $r0, $r2;;
     _32(0xe903f001),        //sxwd $r0 = $r1
     _32(0x7a0900c2),        //ord $r2 = $r2, $r3;;
     _32(0xf90220c0),        //slld $r0 = $r0, 3 (0x3)
     _32(0x27090214),        //sd 8 (0x8)[$r20] = $r2;;
     _96(0x80000102b804a400e10ca000),        //addd $r3 = $r0, 264832 (0x40a80)
     _96(0x180000009800010280000000),        //ld $r1 = 264848 (0x40a90)[$r0];;
     _32(0x270d060e),        //sd 24 (0x18)[$r14] = $r3;;
     _32(0x2705040e),        //sd 16 (0x10)[$r14] = $r1;;
     _96(0x1800000098000102a739a400),        //sd 264848 (0x40a90)[$r0] = $r14;;
     _32(0x27390601),        //sd 24 (0x18)[$r1] = $r14;;
     _32(0xfa023085),        //sraw $r0 = $r5, 2 (0x2)
     _32(0x601c0001),        //make $r7 = 1 (0x1);;
     _32(0x791e6007),        //slld $r7 = $r7, $r0;;
     _32(0x7901a087),        //compd.gtu $r0 = $r7, $r2;;
     _32(0x08001680),        //cb.dnez $r0? 19468 <_malloc_r+0x358>;;
     _32(0x78010087),        //andd $r0 = $r7, $r2;;
     _32(0x080002c0),        //cb.dnez $r0? 19334 <_malloc_r+0x224>;;
     _32(0xf91e2047),        //slld $r7 = $r7, 1 (0x1)
     _32(0x7814ff05),        //andw $r5 = $r5, -4 (0xfffffffc);;
     _32(0xf8010087),        //andd $r0 = $r7, $r2
     _32(0x71140105),        //addw $r5 = $r5, 4 (0x4);;
     _32(0x7814ffc5),        //zxwd $r5 = $r5;;
     _32(0x08000140),        //cb.dnez $r0? 19334 <_malloc_r+0x224>;;
     _32(0xf91e2047),        //slld $r7 = $r7, 1 (0x1)
     _32(0x71140105),        //addw $r5 = $r5, 4 (0x4);;
     _32(0x78010087),        //andd $r0 = $r7, $r2;;
     _32(0x08ffff40),        //cb.deqz $r0? 19324 <_malloc_r+0x214>;;
     _96(0x0000000080000102e028a400),        //make $r10 = 264848 (0x40a90);;
     _32(0xf1000045),        //addw $r0 = $r5, 1 (0x1)
     _32(0x6a240005),        //copyd $r9 = $r5;;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _64(0x07fffffff4018400),        //addx8wd $r0 = $r0, 4294967280 (0xfffffff0);;
     _96(0x0000000080000102e100a400),        //addd $r0 = $r0, 264848 (0x40a90);;
     _32(0x6a200000),        //copyd $r8 = $r0;;
     _32(0x38040608),        //ld $r1 = 24 (0x18)[$r8];;
     _32(0x7109a048),        //compd.eq $r2 = $r8, $r1;;
     _32(0x08800102),        //cb.deqz $r2? 1937c <_malloc_r+0x26c>;;
     _32(0x10000128),        //goto 19810 <_malloc_r+0x700>;;
     _32(0x09804b43),        //cb.dgez $r3? 19828 <_malloc_r+0x718>;;
     _32(0x08804986),        //cb.deqz $r6? 19810 <_malloc_r+0x700>;;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x38040601),        //ld $r1 = 24 (0x18)[$r1];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0xf50d0092),        //sbfd $r3 = $r18, $r2
     _32(0x7019a048),        //compd.ne $r6 = $r8, $r1;;
     _32(0x641107c3),        //compd.le $r4 = $r3, 31 (0x1f);;
     _32(0x087ffdc4),        //cb.dnez $r4? 19374 <_malloc_r+0x264>;;
     _32(0xea000052),        //ord $r0 = $r18, 1 (0x1)
     _32(0xf149048e),        //addd $r18 = $r14, $r18
     _96(0x90000102b818040ee010a400),        //make $r4 = 264848 (0x40a90)
     _32(0x10000000),        //ld $r6 = 16 (0x10)[$r14];;
     _32(0xe1140404),        //addd $r5 = $r4, 16 (0x10)
     _32(0xea1c0043),        //ord $r7 = $r3, 1 (0x1)
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x2701020e),        //sd 8 (0x8)[$r14] = $r0;;
     _32(0x27050606),        //sd 24 (0x18)[$r6] = $r1;;
     _32(0x27190401),        //sd 16 (0x10)[$r1] = $r6;;
     _32(0x27490a04),        //sd 40 (0x28)[$r4] = $r18;;
     _32(0x27490804),        //sd 32 (0x20)[$r4] = $r18;;
     _32(0x27150612),        //sd 24 (0x18)[$r18] = $r5;;
     _32(0x27150412),        //sd 16 (0x10)[$r18] = $r5;;
     _32(0x271d0212),        //sd 8 (0x8)[$r18] = $r7;;
     _32(0x980001b6),        //call 19ab8 <__malloc_unlock>
     _32(0x270fe08e),        //sd $r2[$r14] = $r3;;
     _32(0x90000005),        //goto 193fc <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0xe004000c),        //make $r1 = 12 (0xc)
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26050013),        //sw 0 (0x0)[$r19] = $r1;;
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0xf1140085),        //addw $r5 = $r5, 2 (0x2)
     _96(0x88000102b838aa00e050a400),        //make $r20 = 264848 (0x40a90)
     _96(0x180000009800010288000000),        //ld $r14 = 264872 (0x40aa8)[$r0];;
     _32(0x61040414),        //addd $r1 = $r20, 16 (0x10);;
     _32(0x7109a382),        //compd.eq $r2 = $r2, $r14;;
     _32(0x08ffd382),        //cb.deqz $r2? 19178 <_malloc_r+0x68>;;
     _32(0x38380814),        //ld $r14 = 32 (0x20)[$r20];;
     _32(0x7001a04e),        //compd.ne $r0 = $r14, $r1;;
     _32(0x087fe200),        //cb.dnez $r0? 1926c <_malloc_r+0x15c>;;
     _32(0xfa023085),        //sraw $r0 = $r5, 2 (0x2)
     _32(0xe01c0001),        //make $r7 = 1 (0x1)
     _32(0x38080214),        //ld $r2 = 8 (0x8)[$r20];;
     _32(0x791e6007),        //slld $r7 = $r7, $r0;;
     _32(0x7901a087),        //compd.gtu $r0 = $r7, $r2;;
     _32(0x08ffea00),        //cb.deqz $r0? 19304 <_malloc_r+0x1f4>;;
     _96(0x80000102e06ca000e064a400),        //make $r25 = 264848 (0x40a90)
     _96(0x080000008800010280000000),        //make $r27 = 264832 (0x40a80);;
     _96(0x8000010eb8380419e068c000),        //make $r26 = 277248 (0x43b00)
     _32(0x00000000),        //ld $r14 = 16 (0x10)[$r25];;
     _32(0x3858020e),        //ld $r22 = 8 (0x8)[$r14];;
     _32(0x6858ff16),        //andd $r22 = $r22, -4 (0xfffffffc);;
     _32(0xf5010592),        //sbfd $r0 = $r18, $r22
     _32(0xf909a592),        //compd.gtu $r2 = $r18, $r22
     _32(0x7161058e),        //addd $r24 = $r14, $r22;;
     _32(0x640507c0),        //compd.le $r1 = $r0, 31 (0x1f);;
     _32(0x7a051081),        //orw $r1 = $r1, $r2;;
     _32(0x0c8020c1),        //cb.weqz $r1? 196b8 <_malloc_r+0x5a8>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _96(0x8800010eb808001be004ce00),        //make $r1 = 277304 (0x43b38)
     _32(0x08000000),        //ld $r2 = 0 (0x0)[$r27];;
     _32(0x38540001),        //ld $r21 = 0 (0x0)[$r1];;
     _32(0x6009ffc2),        //compd.ne $r2 = $r2, -1 (0xffffffff);;
     _32(0x71550552),        //addd $r21 = $r18, $r21;;
     _32(0xe1540815),        //addd $r21 = $r21, 32 (0x20)
     _64(0x08000004e10407d5),        //addd $r1 = $r21, 4127 (0x101f);;
     _64(0x07fffffce8040001),        //andd $r1 = $r1, -4096 (0xfffffffffffff000);;
     _32(0x70560042),        //cmoved.dnez $r2? $r21 = $r1;;
     _32(0x980001d0),        //call 19c28 <_sbrk_r>
     _32(0x6a040015),        //copyd $r1 = $r21;;
     _32(0xea5c0000),        //copyd $r23 = $r0
     _32(0x6001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff);;
     _32(0x7905a5d8),        //compd.gtu $r1 = $r24, $r23;;
     _32(0x08804640),        //cb.deqz $r0? 19960 <_malloc_r+0x850>;;
     _96(0x0000000080000102e000a400),        //make $r0 = 264848 (0x40a90);;
     _32(0x7001a00e),        //compd.ne $r0 = $r14, $r0;;
     _32(0xf8011040),        //andw $r0 = $r0, $r1
     _32(0x7005a5d8),        //compd.ne $r1 = $r24, $r23;;
     _32(0x0c004480),        //cb.wnez $r0? 19960 <_malloc_r+0x850>;;
     _32(0x3000001a),        //lwz $r0 = 0 (0x0)[$r26];;
     _32(0xf1091540),        //addw $r2 = $r0, $r21
     _32(0x71011540),        //addw $r0 = $r0, $r21;;
     _32(0x88804101),        //cb.deqz $r1? 19938 <_malloc_r+0x828>
     _32(0x2609001a),        //sw 0 (0x0)[$r26] = $r2;;
     _32(0x3800001b),        //ld $r0 = 0 (0x0)[$r27];;
     _32(0x6001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff);;
     _32(0x08804200),        //cb.deqz $r0? 19958 <_malloc_r+0x848>;;
     _32(0x750105d8),        //sbfd $r0 = $r24, $r23;;
     _32(0x71011080),        //addw $r0 = $r0, $r2;;
     _32(0x2601001a),        //sw 0 (0x0)[$r26] = $r0;;
     _32(0xe80003d7),        //andd $r0 = $r23, 15 (0xf)
     _32(0x60601000),        //make $r24 = 4096 (0x1000);;
     _32(0x08800140),        //cb.deqz $r0? 19564 <_malloc_r+0x454>;;
     _32(0xe5040400),        //sbfd $r1 = $r0, 16 (0x10)
     _64(0x08000004e5600400),        //sbfd $r24 = $r0, 4112 (0x1010);;
     _32(0x715d0057),        //addd $r23 = $r23, $r1;;
     _32(0xf1050557),        //addd $r1 = $r23, $r21
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x60540001),        //make $r21 = 1 (0x1);;
     _64(0x00000003e804ffc1),        //andd $r1 = $r1, 4095 (0xfff);;
     _32(0x75610601),        //sbfd $r24 = $r1, $r24;;
     _32(0x980001ab),        //call 19c28 <_sbrk_r>
     _32(0x6a040018),        //copyd $r1 = $r24;;
     _32(0xe109ffc0),        //compd.eq $r2 = $r0, -1 (0xffffffff)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x08000142),        //cb.dnez $r2? 195a0 <_malloc_r+0x490>;;
     _32(0xf5090017),        //sbfd $r2 = $r23, $r0
     _32(0x7804ffd8),        //zxwd $r1 = $r24;;
     _32(0x71550602),        //addd $r21 = $r2, $r24;;
     _32(0x6a540055),        //ord $r21 = $r21, 1 (0x1);;
     _32(0xf151a50e),        //compd.eq $r20 = $r14, $r20
     _32(0xe0100009),        //make $r4 = 9 (0x9)
     _96(0x90000102b000001ae060a400),        //make $r24 = 264848 (0x40a90)
     _32(0x10000000),        //lwz $r0 = 0 (0x0)[$r26];;
     _32(0x275d0418),        //sd 16 (0x10)[$r24] = $r23;;
     _32(0x27550217),        //sd 8 (0x8)[$r23] = $r21;;
     _32(0xf1091040),        //addw $r2 = $r0, $r1
     _32(0xf1011040),        //addw $r0 = $r0, $r1
     _32(0x690507d6),        //compd.gtu $r1 = $r22, 31 (0x1f);;
     _32(0x88004154),        //cb.dnez $r20? 199e0 <_malloc_r+0x8d0>
     _32(0x2609001a),        //sw 0 (0x0)[$r26] = $r2;;
     _32(0x08804141),        //cb.deqz $r1? 199e8 <_malloc_r+0x8d8>;;
     _32(0xe104fa16),        //addd $r1 = $r22, -24 (0xffffffe8)
     _32(0x3808020e),        //ld $r2 = 8 (0x8)[$r14];;
     _32(0x6804fc01),        //andd $r1 = $r1, -16 (0xfffffff0);;
     _32(0xf10d004e),        //addd $r3 = $r14, $r1
     _32(0x691507c1),        //compd.gtu $r5 = $r1, 31 (0x1f);;
     _32(0x68080042),        //andd $r2 = $r2, 1 (0x1);;
     _32(0x7a050042),        //ord $r1 = $r2, $r1;;
     _32(0x2705020e),        //sd 8 (0x8)[$r14] = $r1;;
     _32(0x27110203),        //sd 8 (0x8)[$r3] = $r4;;
     _32(0x88004545),        //cb.dnez $r5? 19a50 <_malloc_r+0x940>
     _32(0x27110403),        //sd 16 (0x10)[$r3] = $r4;;
     _32(0xea380017),        //copyd $r14 = $r23
     _32(0x38540217),        //ld $r21 = 8 (0x8)[$r23];;
     _32(0xe903f000),        //sxwd $r0 = $r0
     _96(0x080000008800010ee008cc00),        //make $r2 = 277296 (0x43b30);;
     _32(0x38040002),        //ld $r1 = 0 (0x0)[$r2];;
     _32(0x7805a040),        //compd.leu $r1 = $r0, $r1;;
     _32(0x08000081),        //cb.dnez $r1? 1962c <_malloc_r+0x51c>;;
     _32(0x27010002),        //sd 0 (0x0)[$r2] = $r0;;
     _96(0x000000008000010ee008ca00),        //make $r2 = 277288 (0x43b28);;
     _32(0x38040002),        //ld $r1 = 0 (0x0)[$r2];;
     _32(0x7805a040),        //compd.leu $r1 = $r0, $r1;;
     _32(0x08000081),        //cb.dnez $r1? 19648 <_malloc_r+0x538>;;
     _32(0x27010002),        //sd 0 (0x0)[$r2] = $r0;;
     _32(0x6854ff15),        //andd $r21 = $r21, -4 (0xfffffffc);;
     _32(0xf5010552),        //sbfd $r0 = $r18, $r21
     _32(0x7955a552),        //compd.gtu $r21 = $r18, $r21;;
     _32(0x640507c0),        //compd.le $r1 = $r0, 31 (0x1f);;
     _32(0x7a551055),        //orw $r21 = $r21, $r1;;
     _32(0x0c8005d5),        //cb.weqz $r21? 196b8 <_malloc_r+0x5a8>;;
     _32(0x98000116),        //call 19ab8 <__malloc_unlock>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x97ffff65),        //goto 193fc <_malloc_r+0x2ec>
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x69050100),        //compd.gtu $r1 = $r0, 4 (0x4);;
     _32(0x080016c1),        //cb.dnez $r1? 197e0 <_malloc_r+0x6d0>;;
     _32(0x66175192),        //extfz $r5 = $r18, 37 (0x25), 6 (0x6);;
     _32(0xf1100e45),        //addw $r4 = $r5, 57 (0x39)
     _32(0xf1180e05),        //addw $r6 = $r5, 56 (0x38)
     _32(0x71140e45),        //addw $r5 = $r5, 57 (0x39);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffedd),        //goto 19204 <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xf109008e),        //addd $r2 = $r14, $r2
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38040202),        //ld $r1 = 8 (0x8)[$r2];;
     _32(0x6a040041),        //ord $r1 = $r1, 1 (0x1);;
     _32(0x98000104),        //call 19ab8 <__malloc_unlock>
     _32(0x27050202),        //sd 8 (0x8)[$r2] = $r1;;
     _32(0x97ffff53),        //goto 193fc <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0xea0c0052),        //ord $r3 = $r18, 1 (0x1)
     _32(0xf149048e),        //addd $r18 = $r14, $r18
     _32(0xea040040),        //ord $r1 = $r0, 1 (0x1)
     _96(0x1800000098000102e008a400),        //make $r2 = 264848 (0x40a90);;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x270d020e),        //sd 8 (0x8)[$r14] = $r3;;
     _32(0x27490402),        //sd 16 (0x10)[$r2] = $r18;;
     _32(0x980000f7),        //call 19ab8 <__malloc_unlock>
     _32(0x27050212),        //sd 8 (0x8)[$r18] = $r1;;
     _32(0xe100040e),        //addd $r0 = $r14, 16 (0x10)
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0xf105004e),        //addd $r1 = $r14, $r1
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x380c060e),        //ld $r3 = 24 (0x18)[$r14];;
     _32(0x3810040e),        //ld $r4 = 16 (0x10)[$r14];;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x270d0604),        //sd 24 (0x18)[$r4] = $r3;;
     _32(0x27110403),        //sd 16 (0x10)[$r3] = $r4;;
     _32(0x6a080042),        //ord $r2 = $r2, 1 (0x1);;
     _32(0x980000e4),        //call 19ab8 <__malloc_unlock>
     _32(0x27090201),        //sd 8 (0x8)[$r1] = $r2;;
     _32(0xe100040e),        //addd $r0 = $r14, 16 (0x10)
     _32(0x3840160c),        //ld $r16 = 88 (0x58)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c54060c),        //lo $r20r21r22r23 = 24 (0x18)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c640e0c),        //lo $r24r25r26r27 = 56 (0x38)[$r12];;
     _32(0x7b062242),        //srld $r1 = $r2, 9 (0x9);;
     _32(0x69010101),        //compd.gtu $r0 = $r1, 4 (0x4);;
     _32(0x088014c0),        //cb.deqz $r0? 198a8 <_malloc_r+0x798>;;
     _32(0x69010501),        //compd.gtu $r0 = $r1, 20 (0x14);;
     _32(0x08002300),        //cb.dnez $r0? 19994 <_malloc_r+0x884>;;
     _32(0xf1001701),        //addw $r0 = $r1, 92 (0x5c)
     _32(0x710416c1),        //addw $r1 = $r1, 91 (0x5b);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _96(0x80000102b80ca400e100a000),        //addd $r0 = $r0, 264832 (0x40a80)
     _96(0x180000009800010280000000),        //ld $r3 = 264848 (0x40a90)[$r0];;
     _32(0x7011a0c0),        //compd.ne $r4 = $r0, $r3;;
     _32(0x08801d44),        //cb.deqz $r4? 1996c <_malloc_r+0x85c>;;
     _32(0x38040203),        //ld $r1 = 8 (0x8)[$r3];;
     _32(0x6804ff01),        //andd $r1 = $r1, -4 (0xfffffffc);;
     _32(0x7905a081),        //compd.gtu $r1 = $r1, $r2;;
     _32(0x08800101),        //cb.deqz $r1? 197b8 <_malloc_r+0x6a8>;;
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x7105a0c0),        //compd.eq $r1 = $r0, $r3;;
     _32(0x08fffe81),        //cb.deqz $r1? 1979c <_malloc_r+0x68c>;;
     _96(0x80000102b8000603e004a400),        //make $r1 = 264848 (0x40a90)
     _32(0x00000000),        //ld $r0 = 24 (0x18)[$r3];;
     _32(0x38080201),        //ld $r2 = 8 (0x8)[$r1];;
     _32(0x2701060e),        //sd 24 (0x18)[$r14] = $r0;;
     _32(0x270d040e),        //sd 16 (0x10)[$r14] = $r3;;
     _32(0x27390400),        //sd 16 (0x10)[$r0] = $r14;;
     _32(0x97fffec6),        //goto 192f0 <_malloc_r+0x1e0>
     _32(0x27390603),        //sd 24 (0x18)[$r3] = $r14;;
     _32(0x69050500),        //compd.gtu $r1 = $r0, 20 (0x14);;
     _32(0x08800e01),        //cb.deqz $r1? 198c4 <_malloc_r+0x7b4>;;
     _32(0x69051500),        //compd.gtu $r1 = $r0, 84 (0x54);;
     _32(0x08001cc1),        //cb.dnez $r1? 199b8 <_malloc_r+0x8a8>;;
     _32(0x6617b312),        //extfz $r5 = $r18, 43 (0x2b), 12 (0xc);;
     _32(0xf1101bc5),        //addw $r4 = $r5, 111 (0x6f)
     _32(0xf1181b85),        //addw $r6 = $r5, 110 (0x6e)
     _32(0x71141bc5),        //addw $r5 = $r5, 111 (0x6f);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffe7f),        //goto 19204 <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xf1240049),        //addw $r9 = $r9, 1 (0x1)
     _32(0x61200408),        //addd $r8 = $r8, 16 (0x10);;
     _32(0xf80400c9),        //andw $r1 = $r9, 3 (0x3)
     _32(0x7824ffc9),        //zxwd $r9 = $r9;;
     _32(0x0c7fb441),        //cb.wnez $r1? 19364 <_malloc_r+0x254>;;
     _32(0x10000032),        //goto 198ec <_malloc_r+0x7dc>;;
     _32(0xf109008e),        //addd $r2 = $r14, $r2
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x3810040e),        //ld $r4 = 16 (0x10)[$r14];;
     _32(0x380c0202),        //ld $r3 = 8 (0x8)[$r2];;
     _32(0x6a0c0043),        //ord $r3 = $r3, 1 (0x1);;
     _32(0x270d0202),        //sd 8 (0x8)[$r2] = $r3;;
     _32(0x27050604),        //sd 24 (0x18)[$r4] = $r1;;
     _32(0x9800009d),        //call 19ab8 <__malloc_unlock>
     _32(0x27110401),        //sd 16 (0x10)[$r1] = $r4;;
     _32(0x97fffeec),        //goto 193fc <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0x7b1620d2),        //srld $r5 = $r18, 3 (0x3);;
     _32(0xf1000045),        //addw $r0 = $r5, 1 (0x1)
     _32(0x7814ffc5),        //zxwd $r5 = $r5;;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97fffe3b),        //goto 19154 <_malloc_r+0x44>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0xea140052),        //ord $r5 = $r18, 1 (0x1)
     _32(0xf149048e),        //addd $r18 = $r14, $r18
     _32(0xea100043),        //ord $r4 = $r3, 1 (0x1)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x2715020e),        //sd 8 (0x8)[$r14] = $r5;;
     _32(0x27490a14),        //sd 40 (0x28)[$r20] = $r18;;
     _32(0x27490814),        //sd 32 (0x20)[$r20] = $r18;;
     _32(0x27050612),        //sd 24 (0x18)[$r18] = $r1;;
     _32(0x27050412),        //sd 16 (0x10)[$r18] = $r1;;
     _32(0x27110212),        //sd 8 (0x8)[$r18] = $r4;;
     _32(0x98000088),        //call 19ab8 <__malloc_unlock>
     _32(0x270fe08e),        //sd $r2[$r14] = $r3;;
     _32(0x97fffed7),        //goto 193fc <_malloc_r+0x2ec>
     _32(0x6100040e),        //addd $r0 = $r14, 16 (0x10);;
     _32(0x66075182),        //extfz $r1 = $r2, 37 (0x25), 6 (0x6);;
     _32(0xf1000e41),        //addw $r0 = $r1, 57 (0x39)
     _32(0x71040e01),        //addw $r1 = $r1, 56 (0x38);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffffb0),        //goto 1977c <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0xf1101700),        //addw $r4 = $r0, 92 (0x5c)
     _32(0xf11816c0),        //addw $r6 = $r0, 91 (0x5b)
     _32(0x71141700),        //addw $r5 = $r0, 92 (0x5c);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffe4b),        //goto 19204 <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x38040400),        //ld $r1 = 16 (0x10)[$r0];;
     _32(0x7105a001),        //compd.eq $r1 = $r1, $r0;;
     _32(0x08801b41),        //cb.deqz $r1? 19a9c <_malloc_r+0x98c>;;
     _32(0xf80400c5),        //andw $r1 = $r5, 3 (0x3)
     _32(0xe100fc00),        //addd $r0 = $r0, -16 (0xfffffff0)
     _32(0x7114ffc5),        //addw $r5 = $r5, -1 (0xffffffff);;
     _32(0x0c7ffe81),        //cb.wnez $r1? 198e0 <_malloc_r+0x7d0>;;
     _32(0x3800020a),        //ld $r0 = 8 (0x8)[$r10];;
     _32(0x7e010007),        //andnd $r0 = $r7, $r0;;
     _32(0x2701020a),        //sd 8 (0x8)[$r10] = $r0;;
     _32(0x791e2047),        //slld $r7 = $r7, 1 (0x1);;
     _32(0xe0050007),        //compd.ne $r1 = $r7, 0 (0x0)
     _32(0x7809a007),        //compd.leu $r2 = $r7, $r0;;
     _32(0x78051081),        //andw $r1 = $r1, $r2;;
     _32(0x0c000101),        //cb.wnez $r1? 19928 <_malloc_r+0x818>;;
     _32(0x17fffed3),        //goto 19468 <_malloc_r+0x358>;;
     _32(0xf91e2047),        //slld $r7 = $r7, 1 (0x1)
     _32(0x71240109),        //addw $r9 = $r9, 4 (0x4);;
     _32(0x78050007),        //andd $r1 = $r7, $r0;;
     _32(0x08ffff41),        //cb.deqz $r1? 19920 <_malloc_r+0x810>;;
     _32(0x97fffe84),        //goto 19340 <_malloc_r+0x230>
     _32(0x6a140009),        //copyd $r5 = $r9;;
     _64(0x00000003e804ffd8),        //andd $r1 = $r24, 4095 (0xfff);;
     _32(0x087fbf01),        //cb.dnez $r1? 19530 <_malloc_r+0x420>;;
     _32(0xf1550556),        //addd $r21 = $r22, $r21
     _32(0x38380419),        //ld $r14 = 16 (0x10)[$r25];;
     _32(0x6a540055),        //ord $r21 = $r21, 1 (0x1);;
     _32(0x97ffff2f),        //goto 1960c <_malloc_r+0x4fc>
     _32(0x2755020e),        //sd 8 (0x8)[$r14] = $r21;;
     _32(0x97fffefc),        //goto 19548 <_malloc_r+0x438>
     _32(0x275d001b),        //sd 0 (0x0)[$r27] = $r23;;
     _32(0x38380419),        //ld $r14 = 16 (0x10)[$r25];;
     _32(0x97ffff39),        //goto 19648 <_malloc_r+0x538>
     _32(0x3854020e),        //ld $r21 = 8 (0x8)[$r14];;
     _32(0xfa063081),        //sraw $r1 = $r1, 2 (0x2)
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _96(0x1000000090000102e010a400),        //make $r4 = 264848 (0x40a90);;
     _32(0xf90a6042),        //slld $r2 = $r2, $r1
     _32(0x38180204),        //ld $r6 = 8 (0x8)[$r4];;
     _32(0x7a090182),        //ord $r2 = $r2, $r6;;
     _32(0x97ffff90),        //goto 197cc <_malloc_r+0x6bc>
     _32(0x27090204),        //sd 8 (0x8)[$r4] = $r2;;
     _32(0x69011501),        //compd.gtu $r0 = $r1, 84 (0x54);;
     _32(0x080005c0),        //cb.dnez $r0? 199f4 <_malloc_r+0x8e4>;;
     _32(0x6607b302),        //extfz $r1 = $r2, 43 (0x2b), 12 (0xc);;
     _32(0xf1001bc1),        //addw $r0 = $r1, 111 (0x6f)
     _32(0x71041b81),        //addw $r1 = $r1, 110 (0x6e);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffff73),        //goto 1977c <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x69055500),        //compd.gtu $r1 = $r0, 340 (0x154);;
     _32(0x080005c1),        //cb.dnez $r1? 19a18 <_malloc_r+0x908>;;
     _32(0x6617e3d2),        //extfz $r5 = $r18, 46 (0x2e), 15 (0xf);;
     _32(0xf1101e05),        //addw $r4 = $r5, 120 (0x78)
     _32(0xf1181dc5),        //addw $r6 = $r5, 119 (0x77)
     _32(0x71141e05),        //addw $r5 = $r5, 120 (0x78);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffe0b),        //goto 19204 <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x97ffff0b),        //goto 1960c <_malloc_r+0x4fc>
     _32(0x6a380017),        //copyd $r14 = $r23;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x97ffff1d),        //goto 19660 <_malloc_r+0x550>
     _32(0x27010217),        //sd 8 (0x8)[$r23] = $r0;;
     _32(0x69015501),        //compd.gtu $r0 = $r1, 340 (0x154);;
     _32(0x08000740),        //cb.dnez $r0? 19a6c <_malloc_r+0x95c>;;
     _32(0x6607e3c2),        //extfz $r1 = $r2, 46 (0x2e), 15 (0xf);;
     _32(0xf1001e01),        //addw $r0 = $r1, 120 (0x78)
     _32(0x71041dc1),        //addw $r1 = $r1, 119 (0x77);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffff5b),        //goto 1977c <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0xe01007f0),        //make $r4 = 2032 (0x7f0)
     _32(0xe014007f),        //make $r5 = 127 (0x7f)
     _32(0xe018007e),        //make $r6 = 126 (0x7e)
     _64(0x18000001e9015500),        //compd.gtu $r0 = $r0, 1364 (0x554);;
     _32(0x087f7d80),        //cb.dnez $r0? 19204 <_malloc_r+0xf4>;;
     _32(0x67171492),        //extfz $r5 = $r18, 49 (0x31), 18 (0x12);;
     _32(0xf1101f45),        //addw $r4 = $r5, 125 (0x7d)
     _32(0xf1181f05),        //addw $r6 = $r5, 124 (0x7c)
     _32(0x71141f45),        //addw $r5 = $r5, 125 (0x7d);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97fffdef),        //goto 19204 <_malloc_r+0xf4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x980000ea),        //call 19df8 <_free_r>
     _32(0xe104040e),        //addd $r1 = $r14, 16 (0x10)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38380418),        //ld $r14 = 16 (0x10)[$r24];;
     _32(0x3000001a),        //lwz $r0 = 0 (0x0)[$r26];;
     _32(0x97fffeea),        //goto 1960c <_malloc_r+0x4fc>
     _32(0x3854020e),        //ld $r21 = 8 (0x8)[$r14];;
     _32(0xe00007f0),        //make $r0 = 2032 (0x7f0)
     _32(0xe004007e),        //make $r1 = 126 (0x7e)
     _64(0x10000001e90d5501),        //compd.gtu $r3 = $r1, 1364 (0x554);;
     _32(0x087fd003),        //cb.dnez $r3? 1977c <_malloc_r+0x66c>;;
     _32(0x67071482),        //extfz $r1 = $r2, 49 (0x31), 18 (0x12);;
     _32(0xf1001f41),        //addw $r0 = $r1, 125 (0x7d)
     _32(0x71041f01),        //addw $r1 = $r1, 124 (0x7c);;
     _32(0x79023040),        //sllw $r0 = $r0, 1 (0x1);;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0x97ffff3a),        //goto 1977c <_malloc_r+0x66c>
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x97ffff9b),        //goto 19908 <_malloc_r+0x7f8>
     _32(0x3800020a),        //ld $r0 = 8 (0x8)[$r10];;
     _32(0x00000000)        //errop ;;
 |];

let __malloc_lock: list_I = 
 [|
     _32(0x97fffd2a),        //goto 18f50 <__libc_lock_acquire>
     _96(0x000000008000010ee000d000)        //make $r0 = 277312 (0x43b40);;
 |];

let __malloc_unlock: list_I = 
 [|
     _32(0x97fffd6a),        //goto 19060 <__libc_lock_release>
     _96(0x000000008000010ee000d000)        //make $r0 = 277312 (0x43b40);;
 |];

let cleanup_glue: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x08800081),        //cb.deqz $r1? 19af0 <cleanup_glue+0x28>;;
     _32(0x1ffffff7),        //call 19ac8 <cleanup_glue>;;
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x100000bb)        //goto 19df8 <_free_r>;;
 |];

let _reclaim_reent: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x0800000088000100e0045000),        //make $r1 = 262464 (0x40140);;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0xe04c0000),        //make $r19 = 0 (0x0)
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x7005a001),        //compd.ne $r1 = $r1, $r0;;
     _32(0x08800d01),        //cb.deqz $r1? 19c10 <_reclaim_reent+0x100>;;
     _32(0x38041e00),        //ld $r1 = 120 (0x78)[$r0];;
     _32(0x088003c1),        //cb.deqz $r1? 19b84 <_reclaim_reent+0x74>;;
     _32(0x383ae4c1),        //ld $r14 = $r19[$r1];;
     _32(0x088001ce),        //cb.deqz $r14? 19b6c <_reclaim_reent+0x5c>;;
     _32(0x980000a9),        //call 19df8 <_free_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3838000e),        //ld $r14 = 0 (0x0)[$r14];;
     _32(0x087fff0e),        //cb.dnez $r14? 19b54 <_reclaim_reent+0x44>;;
     _32(0x38041e12),        //ld $r1 = 120 (0x78)[$r18];;
     _32(0x614c0213),        //addd $r19 = $r19, 8 (0x8);;
     _64(0x00000000e0018013),        //compd.ne $r0 = $r19, 512 (0x200);;
     _32(0x087ffd40),        //cb.dnez $r0? 19b4c <_reclaim_reent+0x3c>;;
     _32(0x9800009f),        //call 19df8 <_free_r>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38041812),        //ld $r1 = 96 (0x60)[$r18];;
     _32(0x08800081),        //cb.deqz $r1? 19b94 <_reclaim_reent+0x84>;;
     _32(0x1800009a),        //call 19df8 <_free_r>;;
     _64(0xb8387e12e14c8012),        //addd $r19 = $r18, 512 (0x200)
     _32(0x00000000),        //ld $r14 = 504 (0x1f8)[$r18];;
     _32(0x7101a4ce),        //compd.eq $r0 = $r14, $r19;;
     _32(0x0880020e),        //cb.deqz $r14? 19bc4 <_reclaim_reent+0xb4>;;
     _32(0x080001c0),        //cb.dnez $r0? 19bc4 <_reclaim_reent+0xb4>;;
     _32(0x98000093),        //call 19df8 <_free_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3838000e),        //ld $r14 = 0 (0x0)[$r14];;
     _32(0x7001a393),        //compd.ne $r0 = $r19, $r14;;
     _32(0x087ffec0),        //cb.dnez $r0? 19bac <_reclaim_reent+0x9c>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38042212),        //ld $r1 = 136 (0x88)[$r18];;
     _32(0x08800081),        //cb.deqz $r1? 19bd4 <_reclaim_reent+0xc4>;;
     _32(0x1800008a),        //call 19df8 <_free_r>;;
     _32(0x30001412),        //lwz $r0 = 80 (0x50)[$r18];;
     _32(0x0c800380),        //cb.weqz $r0? 19c10 <_reclaim_reent+0x100>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38041612),        //ld $r1 = 88 (0x58)[$r18];;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0xea000012),        //copyd $r0 = $r18
     _64(0x18000001b8044812),        //ld $r1 = 1312 (0x520)[$r18];;
     _32(0x088001c1),        //cb.deqz $r1? 19c10 <_reclaim_reent+0x100>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17ffffaf),        //goto 19ac8 <cleanup_glue>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000)        //ret ;;
 |];

let _sbrk_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0xea000001),        //copyd $r0 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _96(0x8000011fa749040ce0486200),        //make $r18 = 294280 (0x47d88)
     _32(0x00000000),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980002f1),        //call 1a818 <_sbrk>
     _32(0x26090012),        //sw 0 (0x0)[$r18] = $r2;;
     _32(0x6005ffc0),        //compd.ne $r1 = $r0, -1 (0xffffffff);;
     _32(0x088001c1),        //cb.deqz $r1? 19c7c <_sbrk_r+0x54>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x30040012),        //lwz $r1 = 0 (0x0)[$r18];;
     _32(0x08fffe41),        //cb.deqz $r1? 19c64 <_sbrk_r+0x3c>;;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000)        //ret ;;
 |];

let _malloc_trim_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849080c),        //sq 32 (0x20)[$r12] = $r18r19;;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _64(0xa7410e0ce538f7ce),        //sbfd $r14 = $r14, 4063 (0xfdf)
     _32(0x00000003),        //sd 56 (0x38)[$r12] = $r16;;
     _32(0x9fffff79),        //call 19aa8 <__malloc_lock>
     _96(0x80000102a7510c0ce050a400),        //make $r20 = 264848 (0x40a90)
     _32(0x00000000),        //sd 48 (0x30)[$r12] = $r20;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x38000414),        //ld $r0 = 16 (0x10)[$r20];;
     _32(0x38480200),        //ld $r18 = 8 (0x8)[$r0];;
     _32(0x6848ff12),        //andd $r18 = $r18, -4 (0xfffffffc);;
     _32(0x7139048e),        //addd $r14 = $r14, $r18;;
     _32(0x7b3a230e),        //srld $r14 = $r14, 12 (0xc);;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x793a230e),        //slld $r14 = $r14, 12 (0xc);;
     _64(0x00000003e501ffce),        //compd.gt $r0 = $r14, 4095 (0xfff);;
     _32(0x088001c0),        //cb.deqz $r0? 19d1c <_malloc_trim_r+0x7c>;;
     _32(0x9fffffc9),        //call 19c28 <_sbrk_r>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38040414),        //ld $r1 = 16 (0x10)[$r20];;
     _32(0x71050481),        //addd $r1 = $r1, $r18;;
     _32(0x7001a040),        //compd.ne $r0 = $r0, $r1;;
     _32(0x088002c0),        //cb.deqz $r0? 19d44 <_malloc_trim_r+0xa4>;;
     _32(0x9fffff67),        //call 19ab8 <__malloc_unlock>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x9fffffb9),        //call 19c28 <_sbrk_r>
     _32(0xe504000e),        //negd $r1 = $r14
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xe001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff)
     _32(0xf549048e),        //sbfd $r18 = $r14, $r18
     _96(0x100000009000010ee008c000),        //make $r2 = 277248 (0x43b00);;
     _32(0x6a480052),        //ord $r18 = $r18, 1 (0x1);;
     _32(0x08800400),        //cb.deqz $r0? 19da8 <_malloc_trim_r+0x108>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x30040002),        //lwz $r1 = 0 (0x0)[$r2];;
     _32(0x380c0414),        //ld $r3 = 16 (0x10)[$r20];;
     _32(0xf539104e),        //sbfw $r14 = $r14, $r1
     _32(0x27490203),        //sd 8 (0x8)[$r3] = $r18;;
     _32(0x9fffff4e),        //call 19ab8 <__malloc_unlock>
     _32(0x26390002),        //sw 0 (0x0)[$r2] = $r14;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x9fffffa0),        //call 19c28 <_sbrk_r>
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38080414),        //ld $r2 = 16 (0x10)[$r20];;
     _32(0x75050002),        //sbfd $r1 = $r2, $r0;;
     _32(0x640d07c1),        //compd.le $r3 = $r1, 31 (0x1f);;
     _32(0x087ff5c3),        //cb.dnez $r3? 19d1c <_malloc_trim_r+0x7c>;;
     _32(0xea040041),        //ord $r1 = $r1, 1 (0x1)
     _96(0x88000102e00cc000e010a000),        //make $r4 = 264832 (0x40a80)
     _96(0x100000009000010e88000000),        //make $r3 = 277248 (0x43b00);;
     _32(0x38100004),        //ld $r4 = 0 (0x0)[$r4];;
     _32(0x27050202),        //sd 8 (0x8)[$r2] = $r1;;
     _32(0x75010004),        //sbfd $r0 = $r4, $r0;;
     _32(0x97ffffcc),        //goto 19d1c <_malloc_trim_r+0x7c>
     _32(0x26010003),        //sw 0 (0x0)[$r3] = $r0;;
     _32(0x7f03f000)        //nop ;;
 |];

let _free_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x888014c1),        //cb.deqz $r1? 19f5c <_free_r+0x164>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x1fffff24),        //call 19aa8 <__malloc_lock>;;
     _32(0xe11cfc0e),        //addd $r7 = $r14, -16 (0xfffffff0)
     _96(0x88000102b818fe0ee014a400),        //make $r5 = 264848 (0x40a90)
     _32(0x08000000),        //ld $r6 = -8 (0xfffffff8)[$r14];;
     _32(0x38100405),        //ld $r4 = 16 (0x10)[$r5];;
     _32(0x6804ff86),        //andd $r1 = $r6, -2 (0xfffffffe);;
     _32(0x710d0047),        //addd $r3 = $r7, $r1;;
     _32(0xf011a0c4),        //compd.ne $r4 = $r4, $r3
     _32(0x38080203),        //ld $r2 = 8 (0x8)[$r3];;
     _32(0x88802144),        //cb.deqz $r4? 1a058 <_free_r+0x260>
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x8b000d86),        //cb.odd $r6? 19f24 <_free_r+0x12c>
     _32(0xf1010083),        //addd $r0 = $r3, $r2
     _32(0x27090203),        //sd 8 (0x8)[$r3] = $r2;;
     _32(0xe1140405),        //addd $r5 = $r5, 16 (0x10)
     _32(0x3810fc0e),        //ld $r4 = -16 (0xfffffff0)[$r14];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0xf51d01c4),        //sbfd $r7 = $r4, $r7
     _32(0x71050101),        //addd $r1 = $r1, $r4;;
     _32(0xe8000040),        //andd $r0 = $r0, 1 (0x1)
     _32(0x38100407),        //ld $r4 = 16 (0x10)[$r7];;
     _32(0x7119a144),        //compd.eq $r6 = $r4, $r5;;
     _32(0x08001a06),        //cb.dnez $r6? 1a018 <_free_r+0x220>;;
     _32(0x38180607),        //ld $r6 = 24 (0x18)[$r7];;
     _32(0x27190604),        //sd 24 (0x18)[$r4] = $r6;;
     _32(0x88802700),        //cb.deqz $r0? 1a0f4 <_free_r+0x2fc>
     _32(0x27110406),        //sd 16 (0x10)[$r6] = $r4;;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0x27010207),        //sd 8 (0x8)[$r7] = $r0;;
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x69017fc1),        //compd.gtu $r0 = $r1, 511 (0x1ff);;
     _32(0x08000ec0),        //cb.dnez $r0? 19f88 <_free_r+0x190>;;
     _32(0xe60720c1),        //extfz $r1 = $r1, 34 (0x22), 3 (0x3)
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _96(0x1000000090000102e00ca400),        //make $r3 = 264848 (0x40a90);;
     _32(0xf1000041),        //addw $r0 = $r1, 1 (0x1)
     _32(0xfa063081),        //sraw $r1 = $r1, 2 (0x2)
     _32(0x38100203),        //ld $r4 = 8 (0x8)[$r3];;
     _32(0xf9023040),        //sllw $r0 = $r0, 1 (0x1)
     _32(0x79066042),        //slld $r1 = $r2, $r1;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0xf90220c0),        //slld $r0 = $r0, 3 (0x3)
     _32(0x7a050101),        //ord $r1 = $r1, $r4;;
     _96(0x80000102b808a400e110a000),        //addd $r4 = $r0, 264832 (0x40a80)
     _96(0x180000009800010280000000),        //ld $r2 = 264848 (0x40a90)[$r0];;
     _32(0x27110607),        //sd 24 (0x18)[$r7] = $r4;;
     _32(0x27050203),        //sd 8 (0x8)[$r3] = $r1;;
     _32(0x27090407),        //sd 16 (0x10)[$r7] = $r2;;
     _96(0x1800000098000102a71da400),        //sd 264848 (0x40a90)[$r0] = $r7;;
     _32(0x271d0602),        //sd 24 (0x18)[$r2] = $r7;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17fffee6),        //goto 19ab8 <__malloc_unlock>;;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x0b0004c0),        //cb.odd $r0? 19f74 <_free_r+0x17c>;;
     _32(0xf1050081),        //addd $r1 = $r1, $r2
     _32(0x61140405),        //addd $r5 = $r5, 16 (0x10);;
     _32(0xea100041),        //ord $r4 = $r1, 1 (0x1)
     _32(0x38000403),        //ld $r0 = 16 (0x10)[$r3];;
     _32(0x7009a140),        //compd.ne $r2 = $r0, $r5;;
     _32(0x08801d42),        //cb.deqz $r2? 1a114 <_free_r+0x31c>;;
     _32(0x38080603),        //ld $r2 = 24 (0x18)[$r3];;
     _32(0x27090600),        //sd 24 (0x18)[$r0] = $r2;;
     _32(0x27010402),        //sd 16 (0x10)[$r2] = $r0;;
     _32(0x27110207),        //sd 8 (0x8)[$r7] = $r4;;
     _32(0x97ffffd1),        //goto 19e98 <_free_r+0xa0>
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0xe9017fc1),        //compd.gtu $r0 = $r1, 511 (0x1ff)
     _32(0x2701fe0e),        //sd -8 (0xfffffff8)[$r14] = $r0;;
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x08fff1c0),        //cb.deqz $r0? 19ea0 <_free_r+0xa8>;;
     _32(0x7b022241),        //srld $r0 = $r1, 9 (0x9);;
     _32(0x69090100),        //compd.gtu $r2 = $r0, 4 (0x4);;
     _32(0x08001382),        //cb.dnez $r2? 1a0c8 <_free_r+0x2d0>;;
     _32(0x66035181),        //extfz $r0 = $r1, 37 (0x25), 6 (0x6);;
     _32(0xf1100e40),        //addw $r4 = $r0, 57 (0x39)
     _32(0x71000e00),        //addw $r0 = $r0, 56 (0x38);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _96(0x80000102b80ca404e110a004),        //addd $r4 = $r4, 264832 (0x40a80)
     _96(0x180000009800010280000000),        //ld $r3 = 264848 (0x40a90)[$r4];;
     _32(0x7009a0c4),        //compd.ne $r2 = $r4, $r3;;
     _32(0x08801702),        //cb.deqz $r2? 1a138 <_free_r+0x340>;;
     _32(0x38080203),        //ld $r2 = 8 (0x8)[$r3];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x7909a042),        //compd.gtu $r2 = $r2, $r1;;
     _32(0x08800102),        //cb.deqz $r2? 19fe8 <_free_r+0x1f0>;;
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x7101a0c4),        //compd.eq $r0 = $r4, $r3;;
     _32(0x08fffe80),        //cb.deqz $r0? 19fcc <_free_r+0x1d4>;;
     _32(0x38100603),        //ld $r4 = 24 (0x18)[$r3];;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x27110607),        //sd 24 (0x18)[$r7] = $r4;;
     _32(0x270d0407),        //sd 16 (0x10)[$r7] = $r3;;
     _32(0x271d0404),        //sd 16 (0x10)[$r4] = $r7;;
     _32(0x271d0603),        //sd 24 (0x18)[$r3] = $r7;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17fffea9),        //goto 19ab8 <__malloc_unlock>;;
     _32(0x080019c0),        //cb.dnez $r0? 1a1b4 <_free_r+0x3bc>;;
     _32(0xf1050042),        //addd $r1 = $r2, $r1
     _32(0x38000603),        //ld $r0 = 24 (0x18)[$r3];;
     _32(0xea080041),        //ord $r2 = $r1, 1 (0x1)
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x27010603),        //sd 24 (0x18)[$r3] = $r0;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x270d0400),        //sd 16 (0x10)[$r0] = $r3;;
     _32(0x27090207),        //sd 8 (0x8)[$r7] = $r2;;
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x17fffe99),        //goto 19ab8 <__malloc_unlock>;;
     _32(0x8b000246),        //cb.odd $r6? 1a07c <_free_r+0x284>
     _32(0x71050081),        //addd $r1 = $r1, $r2;;
     _32(0x3800fc0e),        //ld $r0 = -16 (0xfffffff0)[$r14];;
     _32(0xf51d01c0),        //sbfd $r7 = $r0, $r7
     _32(0x71050001),        //addd $r1 = $r1, $r0;;
     _32(0x38080407),        //ld $r2 = 16 (0x10)[$r7];;
     _32(0x38000607),        //ld $r0 = 24 (0x18)[$r7];;
     _32(0x27010602),        //sd 24 (0x18)[$r2] = $r0;;
     _32(0x27090400),        //sd 16 (0x10)[$r0] = $r2;;
     _32(0xea0c0041),        //ord $r3 = $r1, 1 (0x1)
     _96(0x88000102e000a400e008a200),        //make $r2 = 264840 (0x40a88)
     _96(0x100000009000010288000000),        //make $r0 = 264848 (0x40a90);;
     _32(0x38080002),        //ld $r2 = 0 (0x0)[$r2];;
     _32(0x270d0207),        //sd 8 (0x8)[$r7] = $r3;;
     _32(0x271d0400),        //sd 16 (0x10)[$r0] = $r7;;
     _32(0x7905a042),        //compd.gtu $r1 = $r2, $r1;;
     _32(0x087fe601),        //cb.dnez $r1? 19f08 <_free_r+0x110>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _96(0x080000008800010ee004ce00),        //make $r1 = 277304 (0x43b38);;
     _32(0x9ffffef9),        //call 19ca0 <_malloc_trim_r>
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x17ffff91),        //goto 19f08 <_free_r+0x110>;;
     _32(0x69090500),        //compd.gtu $r2 = $r0, 20 (0x14);;
     _32(0x08800302),        //cb.deqz $r2? 1a0fc <_free_r+0x304>;;
     _32(0x69091500),        //compd.gtu $r2 = $r0, 84 (0x54);;
     _32(0x080008c2),        //cb.dnez $r2? 1a160 <_free_r+0x368>;;
     _32(0x6603b301),        //extfz $r0 = $r1, 43 (0x2b), 12 (0xc);;
     _32(0xf1101bc0),        //addw $r4 = $r0, 111 (0x6f)
     _32(0x71001b80),        //addw $r0 = $r0, 110 (0x6e);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffffb0),        //goto 19fac <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x97ffff90),        //goto 19f34 <_free_r+0x13c>
     _32(0x71050081),        //addd $r1 = $r1, $r2;;
     _32(0xf1101700),        //addw $r4 = $r0, 92 (0x5c)
     _32(0x710016c0),        //addw $r0 = $r0, 91 (0x5b);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffffa8),        //goto 19fac <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _96(0x0000000080000102e000a400),        //make $r0 = 264848 (0x40a90);;
     _32(0x271d0a00),        //sd 40 (0x28)[$r0] = $r7;;
     _32(0x271d0800),        //sd 32 (0x20)[$r0] = $r7;;
     _32(0x27150607),        //sd 24 (0x18)[$r7] = $r5;;
     _32(0x28110207),        //sq 8 (0x8)[$r7] = $r4r5;;
     _32(0x97ffff76),        //goto 19f08 <_free_r+0x110>
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0xe0040001),        //make $r1 = 1 (0x1)
     _32(0xfa023080),        //sraw $r0 = $r0, 2 (0x2)
     _96(0x1000000090000102e008a400),        //make $r2 = 264848 (0x40a90);;
     _32(0xf9026001),        //slld $r0 = $r1, $r0
     _32(0x38140202),        //ld $r5 = 8 (0x8)[$r2];;
     _32(0x7a010140),        //ord $r0 = $r0, $r5;;
     _32(0x97ffffa5),        //goto 19fec <_free_r+0x1f4>
     _32(0x27010202),        //sd 8 (0x8)[$r2] = $r0;;
     _32(0x69095500),        //compd.gtu $r2 = $r0, 340 (0x154);;
     _32(0x08000202),        //cb.dnez $r2? 1a184 <_free_r+0x38c>;;
     _32(0x6603e3c1),        //extfz $r0 = $r1, 46 (0x2e), 15 (0xf);;
     _32(0xf1101e00),        //addw $r4 = $r0, 120 (0x78)
     _32(0x71001dc0),        //addw $r0 = $r0, 119 (0x77);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffff8c),        //goto 19fac <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xe01007f0),        //make $r4 = 2032 (0x7f0)
     _32(0xe000007e),        //make $r0 = 126 (0x7e)
     _64(0x10000001e9095500),        //compd.gtu $r2 = $r0, 1364 (0x554);;
     _32(0x087fe182),        //cb.dnez $r2? 19fac <_free_r+0x1b4>;;
     _32(0x67031481),        //extfz $r0 = $r1, 49 (0x31), 18 (0x12);;
     _32(0xf1101f40),        //addw $r4 = $r0, 125 (0x7d)
     _32(0x71001f00),        //addw $r0 = $r0, 124 (0x7c);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffff80),        //goto 19fac <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0x27010207),        //sd 8 (0x8)[$r7] = $r0;;
     _32(0x97ffff53),        //goto 19f08 <_free_r+0x110>
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110111111100000; //0x16fe0
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_ffs, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_ctz, 0b00010110100010011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_clz, 0b00010110100011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_clrsb, 0b00010110100101100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_popcount, 0b00010110100111101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_parity, 0b00010110101001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_ffsl, 0b00010110101011010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_ctzl, 0b00010110101101000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_clzl, 0b00010110101110011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_clrsbl, 0b00010110110000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_popcountl, 0b00010110110010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_parityl, 0b00010110110011101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_ffsll, 0b00010110110101011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_ctzll, 0b00010110110111001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_clzll, 0b00010110111000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_clrsbll, 0b00010110111010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_popcountll, 0b00010110111100001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(my_parityll, 0b00010110111101110000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110111111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00011000011100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit, 0b00011000011100110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_fini_array, 0b00011000011101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_init_array, 0b00011000011111011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_init_signal_r_part_0, 0b00011000100001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_init_signal_r, 0b00011000100011100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_signal_r, 0b00011000100011111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_raise_r, 0b00011000100110011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sigtramp_r, 0b00011000101010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(raise, 0b00011000101100110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(signal, 0b00011000101101001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_init_signal, 0b00011000101111111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sigtramp, 0b00011000110000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_kill_r, 0b00011000110000111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_getpid_r, 0b00011000110011000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__call_exitprocs, 0b00011000110011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_init, 0b00011000111001110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_close, 0b00011000111010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_try_acquire, 0b00011000111010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_acquire, 0b00011000111101010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_lock_release, 0b00011001000001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_malloc_r, 0b00011001000100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__malloc_lock, 0b00011001101010101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__malloc_unlock, 0b00011001101010111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(cleanup_glue, 0b00011001101011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_reclaim_reent, 0b00011001101100010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_sbrk_r, 0b00011001110000101000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_malloc_trim_r, 0b00011001110010100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_free_r, 0b00011001110111111000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016fe0;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
