// executing pipeline user_printf test 
val k1_pipeline_user_printf: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_user_printf() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let user_print: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _96(0x0000000080000118e0001000),        //make $r0 = 286784 (0x46040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x3804060c),        //ld $r1 = 24 (0x18)[$r12];;
     _32(0x6a080001),        //copyd $r2 = $r1;;
     _32(0x3804040c),        //ld $r1 = 16 (0x10)[$r12];;
     _32(0x18001a7c),        //call 1d260 <vfprintf>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x18001116),        //call 1acf0 <tmpnam>;;
     _32(0x27010e0c),        //sd 56 (0x38)[$r12] = $r0;;
     _96(0x0000000080000118e0001000),        //make $r0 = 286784 (0x46040);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38000400),        //ld $r0 = 16 (0x10)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x000000008000011ce004f000),        //make $r1 = 291776 (0x473c0);;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x180005ac),        //call 17f78 <freopen>;;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x080001c0),        //cb.dnez $r0? 168f0 <main+0x68>;;
     _96(0x000000008000011ce000f200),        //make $r0 = 291784 (0x473c8);;
     _32(0x18000c27),        //call 19980 <perror>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x10000065),        //goto 16a80 <main+0x1f8>;;
     _96(0x000000008000011ce000f800),        //make $r0 = 291808 (0x473e0);;
     _32(0x1fffffc9),        //call 16820 <user_print>;;
     _32(0x60040032),        //make $r1 = 50 (0x32);;
     _96(0x000000008000011ce000fa00),        //make $r0 = 291816 (0x473e8);;
     _32(0x1fffffc4),        //call 16820 <user_print>;;
     _32(0x60080034),        //make $r2 = 52 (0x34);;
     _32(0x60040033),        //make $r1 = 51 (0x33);;
     _96(0x000000008000011ce000fc00),        //make $r0 = 291824 (0x473f0);;
     _32(0x1fffffbe),        //call 16820 <user_print>;;
     _96(0x000000008000011ce004fe00),        //make $r1 = 291832 (0x473f8);;
     _96(0x000000008000011de0000000),        //make $r0 = 291840 (0x47400);;
     _32(0x1fffffb7),        //call 16820 <user_print>;;
     _96(0x000000008000011de0080200),        //make $r2 = 291848 (0x47408);;
     _96(0x000000008000011de0040400),        //make $r1 = 291856 (0x47410);;
     _96(0x000000008000011de0000600),        //make $r0 = 291864 (0x47418);;
     _32(0x1fffffad),        //call 16820 <user_print>;;
     _32(0x60040008),        //make $r1 = 8 (0x8);;
     _96(0x000000008000011de0000800),        //make $r0 = 291872 (0x47420);;
     _32(0x1fffffa8),        //call 16820 <user_print>;;
     _96(0x000000008000011de0040a00),        //make $r1 = 291880 (0x47428);;
     _96(0x000000008000011de0000c00),        //make $r0 = 291888 (0x47430);;
     _32(0x1fffffa1),        //call 16820 <user_print>;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x180000ad),        //call 16c58 <fclose>;;
     _96(0x000000008000011de0040e00),        //make $r1 = 291896 (0x47438);;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x18000352),        //call 17700 <fopen>;;
     _32(0x27010c0c),        //sd 48 (0x30)[$r12] = $r0;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x08000240),        //cb.dnez $r0? 169e8 <main+0x160>;;
     _96(0x000000008000011de0001000),        //make $r0 = 291904 (0x47440);;
     _32(0x18000beb),        //call 19980 <perror>;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x18000ce7),        //call 19d78 <remove>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x10000027),        //goto 16a80 <main+0x1f8>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2701080c),        //sd 32 (0x20)[$r12] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x26010a0c),        //sw 40 (0x28)[$r12] = $r0;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x000000008000011de0040000),        //make $r1 = 291840 (0x47400);;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x18000564),        //call 17fa0 <fscanf>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c0002c0),        //cb.wnez $r0? 16a4c <main+0x1c4>;;
     _96(0x000000008000011de0001600),        //make $r0 = 291928 (0x47458);;
     _32(0x18000bd4),        //call 19980 <perror>;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x18000088),        //call 16c58 <fclose>;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x18000cce),        //call 19d78 <remove>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1000000e),        //goto 16a80 <main+0x1f8>;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x18000082),        //call 16c58 <fclose>;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x18000cc8),        //call 19d78 <remove>;;
     _32(0x6100080c),        //addd $r0 = $r12, 32 (0x20);;
     _96(0x000000008000011de0041800),        //make $r1 = 291936 (0x47460);;
     _32(0x18000e63),        //call 1a3f8 <strcmp>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16a7c <main+0x1f4>;;
     _32(0x18000006),        //call 16a90 <abort>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000)        //ret ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000d93),        //call 1a0e8 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980056d3),        //call 2c5f0 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let _fclose_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2849080c),        //sq 32 (0x20)[$r12] = $r18r19;;
     _32(0x27410e0c),        //sd 56 (0x38)[$r12] = $r16;;
     _32(0x888010c1),        //cb.deqz $r1? 16bd8 <_fclose_r+0x128>
     _32(0x27510c0c),        //sd 48 (0x30)[$r12] = $r20;;
     _32(0x088000c0),        //cb.deqz $r0? 16ae0 <_fclose_r+0x30>;;
     _32(0x30041400),        //lwz $r1 = 80 (0x50)[$r0];;
     _32(0x0c801201),        //cb.weqz $r1? 16bfc <_fclose_r+0x14c>;;
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x0b800c41),        //cb.even $r1? 16bac <_fclose_r+0xfc>;;
     _32(0x88800ec0),        //cb.deqz $r0? 16bd8 <_fclose_r+0x128>
     _32(0x6150300e),        //addd $r20 = $r14, 192 (0xc0);;
     _32(0x9800005f),        //call 16c70 <__sflush_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0xf84cffc0),        //zxwd $r19 = $r0
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3808140e),        //ld $r2 = 80 (0x50)[$r14];;
     _32(0x08800182),        //cb.deqz $r2? 16b24 <_fclose_r+0x74>;;
     _32(0x8fdc0002),        //icall $r2
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _64(0x003fffffe004ffc0),        //make $r1 = 4294967295 (0xffffffff);;
     _32(0x7a4e0040),        //cmoved.wltz $r0? $r19 = $r1;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x78002000),        //andw $r0 = $r0, 128 (0x80);;
     _32(0x0c0010c0),        //cb.wnez $r0? 16c38 <_fclose_r+0x188>;;
     _32(0xe1001d0e),        //addd $r0 = $r14, 116 (0x74)
     _32(0x3804160e),        //ld $r1 = 88 (0x58)[$r14];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08800181),        //cb.deqz $r1? 16b54 <_fclose_r+0xa4>;;
     _32(0x080000c0),        //cb.dnez $r0? 16b4c <_fclose_r+0x9c>;;
     _32(0x9800034d),        //call 17878 <_free_r>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2701160e),        //sd 88 (0x58)[$r14] = $r0;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38041e0e),        //ld $r1 = 120 (0x78)[$r14];;
     _32(0x08800101),        //cb.deqz $r1? 16b6c <_fclose_r+0xbc>;;
     _32(0x18000346),        //call 17878 <_free_r>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x27011e0e),        //sd 120 (0x78)[$r14] = $r0;;
     _32(0x18000239),        //call 17450 <__sfp_lock_acquire>;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x2505040e),        //sh 16 (0x10)[$r14] = $r1;;
     _32(0x0b800cc0),        //cb.even $r0? 16c48 <_fclose_r+0x198>;;
     _32(0x98000738),        //call 18860 <__libc_lock_close>
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0x18000236),        //call 17460 <__sfp_lock_release>;;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0xe150300e),        //addd $r20 = $r14, 192 (0xc0)
     _64(0x08000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c7ff3c0),        //cb.wnez $r0? 16af4 <_fclose_r+0x44>;;
     _32(0x9800075d),        //call 18930 <__libc_lock_acquire>
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0x2c00040e),        //lhs $r0 = 16 (0x10)[$r14];;
     _32(0x0c7ff2c0),        //cb.wnez $r0? 16af4 <_fclose_r+0x44>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x684c0040),        //andd $r19 = $r0, 1 (0x1);;
     _32(0x0b8003c0),        //cb.even $r0? 16c10 <_fclose_r+0x160>;;
     _32(0xe04c0000),        //make $r19 = 0 (0x0)
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x18000189),        //call 17220 <__sinit>;;
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x0b7fee41),        //cb.odd $r1? 16aec <_fclose_r+0x3c>;;
     _32(0x17ffffe8),        //goto 16bac <_fclose_r+0xfc>;;
     _32(0x9800078c),        //call 18a40 <__libc_lock_release>
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x98000310),        //call 17878 <_free_r>
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3804060e),        //ld $r1 = 24 (0x18)[$r14];;
     _32(0x17ffffbb),        //goto 16b30 <_fclose_r+0x80>;;
     _32(0x9800077e),        //call 18a40 <__libc_lock_release>
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0x17ffffcc),        //goto 16b80 <_fclose_r+0xd0>;;
     _32(0x7f03f000)        //nop ;;
 |];

let fclose: list_I = 
 [|
     _32(0xea040000),        //copyd $r1 = $r0
     _96(0x0800000088000118e0001000),        //make $r0 = 286784 (0x46040);;
     _32(0x97ffff92),        //goto 16ab0 <_fclose_r>
     _32(0x38000000)        //ld $r0 = 0 (0x0)[$r0];;
 |];

let __sflush_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0xea500000),        //copyd $r20 = $r0
     _32(0x27510c0c),        //sd 48 (0x30)[$r12] = $r20;;
     _32(0x2849080c),        //sq 32 (0x20)[$r12] = $r18r19;;
     _32(0x27410e0c),        //sd 56 (0x38)[$r12] = $r16;;
     _32(0x28000401),        //lhz $r0 = 16 (0x10)[$r1];;
     _32(0xe407f000),        //zxhd $r1 = $r0
     _32(0x78080200),        //andw $r2 = $r0, 8 (0x8);;
     _32(0x0c000c42),        //cb.wnez $r2? 16d60 <__sflush_r+0xf0>;;
     _64(0xb004020eea000000),        //ord $r0 = $r0, 2048 (0x800)
     _32(0x00000002),        //lwz $r1 = 8 (0x8)[$r14];;
     _32(0x2501040e),        //sh 16 (0x10)[$r14] = $r0;;
     _32(0x0e001801),        //cb.wlez $r1? 16e30 <__sflush_r+0x1c0>;;
     _32(0xe403f000),        //zxhd $r0 = $r0
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _64(0xb810120ef8080000),        //andw $r2 = $r0, 4096 (0x1000)
     _32(0x10000004),        //ld $r4 = 72 (0x48)[$r14];;
     _32(0x08801484),        //cb.deqz $r4? 16e10 <__sflush_r+0x1a0>;;
     _32(0x30480014),        //lwz $r18 = 0 (0x0)[$r20];;
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _32(0x8c001682),        //cb.wnez $r2? 16e3c <__sflush_r+0x1cc>
     _32(0x260d0014),        //sw 0 (0x0)[$r20] = $r3;;
     _32(0x8fdc0004),        //icall $r4
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xe00c0001),        //make $r3 = 1 (0x1)
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0xea080000),        //copyd $r2 = $r0
     _32(0x6001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff);;
     _32(0x08800f80),        //cb.deqz $r0? 16dec <__sflush_r+0x17c>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x3810120e),        //ld $r4 = 72 (0x48)[$r14];;
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _32(0x78000100),        //andw $r0 = $r0, 4 (0x4);;
     _32(0x0c8001c0),        //cb.weqz $r0? 16d24 <__sflush_r+0xb4>;;
     _32(0x3800160e),        //ld $r0 = 88 (0x58)[$r14];;
     _32(0x340c020e),        //lws $r3 = 8 (0x8)[$r14];;
     _32(0x88800100),        //cb.deqz $r0? 16d24 <__sflush_r+0xb4>
     _32(0x75090083),        //sbfd $r2 = $r3, $r2;;
     _32(0x34001c0e),        //lws $r0 = 112 (0x70)[$r14];;
     _32(0x75090080),        //sbfd $r2 = $r0, $r2;;
     _32(0x8fdc0004),        //icall $r4
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0x6005ffc0),        //compd.ne $r1 = $r0, -1 (0xffffffff);;
     _32(0x08001101),        //cb.dnez $r1? 16e44 <__sflush_r+0x1d4>;;
     _32(0x30080014),        //lwz $r2 = 0 (0x0)[$r20];;
     _64(0x00000000f805b742),        //compw.leu $r1 = $r2, 29 (0x1d);;
     _32(0x0c001781),        //cb.wnez $r1? 16ebc <__sflush_r+0x24c>;;
     _32(0x2804040e),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0xfa041001),        //orw $r1 = $r1, 64 (0x40)
     _64(0x083fffffe000ffc0),        //make $r0 = 4294967295 (0xffffffff);;
     _32(0x9000002f),        //goto 16e14 <__sflush_r+0x1a4>
     _32(0x2505040e),        //sh 16 (0x10)[$r14] = $r1;;
     _32(0xf80400c1),        //andw $r1 = $r1, 3 (0x3)
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0x3848060e),        //ld $r18 = 24 (0x18)[$r14];;
     _32(0x08800a52),        //cb.deqz $r18? 16e10 <__sflush_r+0x1a0>;;
     _32(0x384c000e),        //ld $r19 = 0 (0x0)[$r14];;
     _32(0x2749000e),        //sd 0 (0x0)[$r14] = $r18;;
     _32(0x8c0000c1),        //cb.wnez $r1? 16d84 <__sflush_r+0x114>
     _32(0x754d14d2),        //sbfw $r19 = $r18, $r19;;
     _32(0x3000080e),        //lwz $r0 = 32 (0x20)[$r14];;
     _32(0x8e800153),        //cb.wgtz $r19? 16d98 <__sflush_r+0x128>
     _32(0x2601030e),        //sw 12 (0xc)[$r14] = $r0;;
     _32(0x10000021),        //goto 16e10 <__sflush_r+0x1a0>;;
     _32(0x8e000801),        //cb.wlez $r1? 16e10 <__sflush_r+0x1a0>
     _32(0x784cffc1),        //zxwd $r19 = $r1;;
     _32(0xea080012),        //copyd $r2 = $r18
     _32(0xfa0c0013),        //copyw $r3 = $r19
     _32(0xea000014),        //copyd $r0 = $r20
     _32(0x3810100e),        //ld $r4 = 64 (0x40)[$r14];;
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _32(0x0fdc0004),        //icall $r4;;
     _32(0x8efffe00),        //cb.wgtz $r0? 16d90 <__sflush_r+0x120>
     _32(0xf8494480),        //addwd $r18 = $r0, $r18
     _32(0x750514c0),        //sbfw $r1 = $r0, $r19;;
     _64(0xa804040ee000ffc0),        //make $r0 = 4294967295 (0xffffffff)
     _32(0x003fffff),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0x7a041001),        //orw $r1 = $r1, 64 (0x40);;
     _32(0x2505040e),        //sh 16 (0x10)[$r14] = $r1;;
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x30000014),        //lwz $r0 = 0 (0x0)[$r20];;
     _32(0x08fff080),        //cb.deqz $r0? 16cf8 <__sflush_r+0x88>;;
     _64(0xf101b580f105b740),        //compw.eq $r1 = $r0, 29 (0x1d)
     _64(0x0800000080000000),        //compw.eq $r0 = $r0, 22 (0x16);;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x0cfffb40),        //cb.weqz $r0? 16dbc <__sflush_r+0x14c>;;
     _32(0x26490014),        //sw 0 (0x0)[$r20] = $r18;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x30041c0e),        //lwz $r1 = 112 (0x70)[$r14];;
     _32(0x0effe801),        //cb.wgtz $r1? 16cb4 <__sflush_r+0x44>;;
     _32(0x17fffff6),        //goto 16e10 <__sflush_r+0x1a0>;;
     _32(0x97ffffb2),        //goto 16d04 <__sflush_r+0x94>
     _32(0x3808240e),        //ld $r2 = 144 (0x90)[$r14];;
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _32(0x2804040e),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0x3808060e),        //ld $r2 = 24 (0x18)[$r14];;
     _32(0x260d020e),        //sw 8 (0x8)[$r14] = $r3;;
     _64(0xa709000ee804ffc1),        //andd $r1 = $r1, 63487 (0xf7ff)
     _32(0x0000003d),        //sd 0 (0x0)[$r14] = $r2;;
     _64(0xa505040ef8080001),        //andw $r2 = $r1, 4096 (0x1000)
     _32(0x00000004),        //sh 16 (0x10)[$r14] = $r1;;
     _32(0x0c800082),        //cb.weqz $r2? 16e74 <__sflush_r+0x204>;;
     _32(0x2701240e),        //sd 144 (0x90)[$r14] = $r0;;
     _32(0xe1001d0e),        //addd $r0 = $r14, 116 (0x74)
     _32(0x3804160e),        //ld $r1 = 88 (0x58)[$r14];;
     _32(0x26490014),        //sw 0 (0x0)[$r20] = $r18;;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08fff8c1),        //cb.deqz $r1? 16e10 <__sflush_r+0x1a0>;;
     _32(0x080000c0),        //cb.dnez $r0? 16e94 <__sflush_r+0x224>;;
     _32(0x9800027b),        //call 17878 <_free_r>
     _32(0x6a000014),        //copyd $r0 = $r20;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2705160e),        //sd 88 (0x58)[$r14] = $r1;;
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _64(0xa804040ee00c0040),        //make $r3 = 541065217 (0x20400001)
     _32(0x00081000),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0x7b0e6083),        //srld $r3 = $r3, $r2;;
     _32(0x6e140043),        //andnd $r5 = $r3, 1 (0x1);;
     _32(0x0bffe7c3),        //cb.even $r3? 16d4c <__sflush_r+0xdc>;;
     _64(0xb810060ee804ffc1),        //andd $r1 = $r1, 63487 (0xf7ff)
     _32(0x0000003d),        //ld $r4 = 24 (0x18)[$r14];;
     _64(0xa615020ef80c0001),        //andw $r3 = $r1, 4096 (0x1000)
     _32(0x00000004),        //sw 8 (0x8)[$r14] = $r5;;
     _32(0x2505040e),        //sh 16 (0x10)[$r14] = $r1;;
     _32(0x8cfff843),        //cb.weqz $r3? 16e74 <__sflush_r+0x204>
     _32(0x2711000e),        //sd 0 (0x0)[$r14] = $r4;;
     _32(0x087ff7c2),        //cb.dnez $r2? 16e74 <__sflush_r+0x204>;;
     _32(0x17ffffdd)        //goto 16e70 <__sflush_r+0x200>;;
 |];

let _fflush_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x88800100),        //cb.deqz $r0? 16f28 <_fflush_r+0x28>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x30041400),        //lwz $r1 = 80 (0x50)[$r0];;
     _32(0x0c800681),        //cb.weqz $r1? 16f8c <_fflush_r+0x8c>;;
     _32(0xe04c0000),        //make $r19 = 0 (0x0)
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x08800400),        //cb.deqz $r0? 16f70 <_fflush_r+0x70>;;
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x0b000101),        //cb.odd $r1? 16f48 <_fflush_r+0x48>;;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c800500),        //cb.weqz $r0? 16f94 <_fflush_r+0x94>;;
     _32(0x9fffff4a),        //call 16c70 <__sflush_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0xf84cffc0),        //zxwd $r19 = $r0
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x0b000141),        //cb.odd $r1? 16f70 <_fflush_r+0x70>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c8004c0),        //cb.weqz $r0? 16fb8 <_fflush_r+0xb8>;;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x180000a5),        //call 17220 <__sinit>;;
     _32(0x17ffffe6),        //goto 16f28 <_fflush_r+0x28>;;
     _32(0x98000667),        //call 18930 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x9fffff35),        //call 16c70 <__sflush_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0xf84cffc0),        //zxwd $r19 = $r0
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x0b7ffc01),        //cb.odd $r1? 16f70 <_fflush_r+0x70>;;
     _32(0x17ffffeb),        //goto 16f60 <_fflush_r+0x60>;;
     _32(0x980006a2),        //call 18a40 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let fflush: list_I = 
 [|
     _32(0x088001c0),        //cb.deqz $r0? 16ffc <fflush+0x1c>;;
     _32(0xea040000),        //copyd $r1 = $r0
     _96(0x0800000088000118e0001000),        //make $r0 = 286784 (0x46040);;
     _32(0x97ffffc3),        //goto 16f00 <_fflush_r>
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _96(0x8000011de004c000e0001c00),        //make $r0 = 291952 (0x47470)
     _96(0x080000008800005b80000000),        //make $r1 = 93952 (0x16f00);;
     _32(0x900005b9),        //goto 186f8 <_fwalk_reent>
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x00000000)        //errop ;;
 |];

let std: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x600c0000),        //make $r3 = 0 (0x0);;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0xe1004000),        //addd $r0 = $r0, 256 (0x100)
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x2505c400),        //sh -240 (0xffffff10)[$r0] = $r1;;
     _32(0xe0080008),        //make $r2 = 8 (0x8)
     _32(0x2509c480),        //sh -238 (0xffffff12)[$r0] = $r2;;
     _32(0x270dc000),        //sd -256 (0xffffff00)[$r0] = $r3;;
     _32(0x270dc200),        //sd -248 (0xffffff08)[$r0] = $r3;;
     _32(0x260d0200),        //sw 8 (0x8)[$r0] = $r3;;
     _32(0x270dc600),        //sd -232 (0xffffff18)[$r0] = $r3;;
     _32(0x260dc800),        //sw -224 (0xffffff20)[$r0] = $r3;;
     _32(0x98000988),        //call 19680 <memset>
     _32(0x260dca00),        //sw -216 (0xffffff28)[$r0] = $r3;;
     _96(0xa7390c0ee008bc00e00ca000),        //make $r3 = 107136 (0x1a280)
     _96(0x880000688000000080000068),        //make $r2 = 107248 (0x1a2f0)
     _32(0x08000000),        //sd 48 (0x30)[$r14] = $r14;;
     _96(0xa70d0e0ee000fc00e004e000),        //make $r1 = 107392 (0x1a380)
     _96(0x880000688000000080000068),        //make $r0 = 107504 (0x1a3f0)
     _32(0x08000000),        //sd 56 (0x38)[$r14] = $r3;;
     _32(0xe100300e),        //addd $r0 = $r14, 192 (0xc0)
     _32(0x2701140e),        //sd 80 (0x50)[$r14] = $r0;;
     _32(0x2709100e),        //sd 64 (0x40)[$r14] = $r2;;
     _32(0x2705120e),        //sd 72 (0x48)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x100005e4),        //goto 18850 <__libc_lock_init>;;
     _32(0x7f03f000)        //nop ;;
 |];

let _cleanup_r: list_I = 
 [|
     _32(0x9000058c),        //goto 186f8 <_fwalk_reent>
     _96(0x000000008000005ae004ac00)        //make $r1 = 92848 (0x16ab0);;
 |];

let __fp_lock: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x30044200),        //lwz $r1 = 264 (0x108)[$r0];;
     _32(0x0b000141),        //cb.odd $r1? 170fc <__fp_lock+0x24>;;
     _32(0x28040400),        //lhz $r1 = 16 (0x10)[$r0];;
     _64(0x00000000f8048001),        //andw $r1 = $r1, 512 (0x200);;
     _32(0x0c800181),        //cb.weqz $r1? 17110 <__fp_lock+0x38>;;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x98000608),        //call 18930 <__libc_lock_acquire>
     _32(0x61003000),        //addd $r0 = $r0, 192 (0xc0);;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __fp_unlock: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x30044200),        //lwz $r1 = 264 (0x108)[$r0];;
     _32(0x0b000141),        //cb.odd $r1? 17154 <__fp_unlock+0x24>;;
     _32(0x28040400),        //lhz $r1 = 16 (0x10)[$r0];;
     _64(0x00000000f8048001),        //andw $r1 = $r1, 512 (0x200);;
     _32(0x0c800181),        //cb.weqz $r1? 17168 <__fp_unlock+0x38>;;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x98000636),        //call 18a40 <__libc_lock_release>
     _32(0x61003000),        //addd $r0 = $r0, 192 (0xc0);;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let __sfmoreglue: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xf108ffc1),        //addw $r2 = $r1, -1 (0xffffffff)
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xe90bf002),        //sxwd $r2 = $r2
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0xf2094082),        //addx4d $r2 = $r2, $r2
     _32(0xf84cffc1),        //zxwd $r19 = $r1
     _32(0x2849020c),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0xf93a2182),        //slld $r14 = $r2, 6 (0x6)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980006cc),        //call 18ce0 <_malloc_r>
     _32(0x6104600e),        //addd $r1 = $r14, 384 (0x180);;
     _32(0x88800280),        //cb.deqz $r0? 171e0 <__sfmoreglue+0x58>
     _32(0x6a480000),        //copyd $r18 = $r0;;
     _32(0xe1001000),        //addd $r0 = $r0, 64 (0x40)
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _32(0xe108500e),        //addd $r2 = $r14, 320 (0x140)
     _32(0x264d0212),        //sw 8 (0x8)[$r18] = $r19;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x270d0012),        //sd 0 (0x0)[$r18] = $r3;;
     _32(0x9800092a),        //call 19680 <memset>
     _32(0x27010412),        //sd 16 (0x10)[$r18] = $r0;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let _cleanup: list_I = 
 [|
     _96(0x8000011de004ac00e0001c00),        //make $r0 = 291952 (0x47470)
     _96(0x080000008800005a80000000),        //make $r1 = 92848 (0x16ab0);;
     _32(0x90000538),        //goto 186f8 <_fwalk_reent>
     _32(0x38000000)        //ld $r0 = 0 (0x0)[$r0];;
 |];

let __sinit: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x980005c1),        //call 18930 <__libc_lock_acquire>
     _32(0xea380000),        //copyd $r14 = $r0
     _96(0x8800012ca739040ce0006000),        //make $r0 = 307584 (0x4b180)
     _32(0x08000000),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0xe0140000),        //make $r5 = 0 (0x0)
     _64(0xe0183200e10c500e),        //addd $r3 = $r14, 1344 (0x540)
     _96(0x9000005c88000001b000140e),        //make $r6 = 94408 (0x170c8)
     _32(0x10000000),        //lwz $r0 = 80 (0x50)[$r14];;
     _32(0xe0100003),        //make $r4 = 3 (0x3)
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0x60040004),        //make $r1 = 4 (0x4);;
     _32(0x0c000700),        //cb.wnez $r0? 172dc <__sinit+0xbc>;;
     _32(0x2719160e),        //sd 88 (0x58)[$r14] = $r6;;
     _64(0x18000001a715480e),        //sd 1312 (0x520)[$r14] = $r5;;
     _64(0x18000001a6114a0e),        //sw 1320 (0x528)[$r14] = $r4;;
     _64(0x18000001a70d4c0e),        //sd 1328 (0x530)[$r14] = $r3;;
     _32(0x9fffff65),        //call 17020 <std>
     _32(0x3800020e),        //ld $r0 = 8 (0x8)[$r14];;
     _32(0x9fffff63),        //call 17020 <std>
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _32(0xe0040009),        //make $r1 = 9 (0x9)
     _32(0x3800040e),        //ld $r0 = 16 (0x10)[$r14];;
     _32(0x9fffff5f),        //call 17020 <std>
     _32(0xe0080002),        //make $r2 = 2 (0x2)
     _32(0xe0040012),        //make $r1 = 18 (0x12)
     _32(0x3800060e),        //ld $r0 = 24 (0x18)[$r14];;
     _32(0xe0040001),        //make $r1 = 1 (0x1)
     _96(0x080000008800012ce0006000),        //make $r0 = 307584 (0x4b180);;
     _32(0x2605140e),        //sw 80 (0x50)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x100005da),        //goto 18a40 <__libc_lock_release>;;
     _96(0x8000012cb840060ce0006000),        //make $r0 = 307584 (0x4b180)
     _32(0x00000000),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x100005d2),        //goto 18a40 <__libc_lock_release>;;
     _32(0x7f03f000)        //nop ;;
 |];

let __sfp: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xea4c0000),        //copyd $r19 = $r0
     _96(0x8800012ca849020ce0007000),        //make $r0 = 307648 (0x4b1c0)
     _32(0x08000000),        //sq 8 (0x8)[$r12] = $r18r19;;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x98000584),        //call 18930 <__libc_lock_acquire>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x000000008000011de0041c00),        //make $r1 = 291952 (0x47470);;
     _32(0x38480001),        //ld $r18 = 0 (0x0)[$r1];;
     _32(0x30041412),        //lwz $r1 = 80 (0x50)[$r18];;
     _32(0x0c800d01),        //cb.weqz $r1? 1740c <__sfp+0x10c>;;
     _64(0x00000001e1484812),        //addd $r18 = $r18, 1312 (0x520);;
     _32(0x30040212),        //lwz $r1 = 8 (0x8)[$r18];;
     _32(0x38380412),        //ld $r14 = 16 (0x10)[$r18];;
     _32(0x0e000ac1),        //cb.wlez $r1? 173fc <__sfp+0xfc>;;
     _32(0x7104ffc1),        //addw $r1 = $r1, -1 (0xffffffff);;
     _32(0x61040041),        //addd $r1 = $r1, 1 (0x1);;
     _32(0x72054041),        //addx4d $r1 = $r1, $r1;;
     _32(0x79062181),        //slld $r1 = $r1, 6 (0x6);;
     _32(0x90000005),        //goto 17378 <__sfp+0x78>
     _32(0x7105004e),        //addd $r1 = $r14, $r1;;
     _32(0x6138500e),        //addd $r14 = $r14, 320 (0x140);;
     _32(0x7009a381),        //compd.ne $r2 = $r1, $r14;;
     _32(0x08800882),        //cb.deqz $r2? 173fc <__sfp+0xfc>;;
     _32(0x2c08040e),        //lhs $r2 = 16 (0x10)[$r14];;
     _32(0x0c7fff02),        //cb.wnez $r2? 1736c <__sfp+0x6c>;;
     _32(0xe100300e),        //addd $r0 = $r14, 192 (0xc0)
     _32(0xe0480000),        //make $r18 = 0 (0x0)
     _64(0xa609420ee004007f),        //make $r1 = -65535 (0xffffffffffff0001)
     _32(0x17ffffc0),        //sw 264 (0x108)[$r14] = $r2;;
     _32(0x9800052f),        //call 18850 <__libc_lock_init>
     _32(0x2605040e),        //sw 16 (0x10)[$r14] = $r1;;
     _32(0x980005a9),        //call 18a40 <__libc_lock_release>
     _96(0x000000008000012ce0007000),        //make $r0 = 307648 (0x4b1c0);;
     _32(0xe0080008),        //make $r2 = 8 (0x8)
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0xe100400e),        //addd $r0 = $r14, 256 (0x100)
     _32(0x2749000e),        //sd 0 (0x0)[$r14] = $r18;;
     _32(0x2749020e),        //sd 8 (0x8)[$r14] = $r18;;
     _32(0x2749060e),        //sd 24 (0x18)[$r14] = $r18;;
     _32(0x2649080e),        //sw 32 (0x20)[$r14] = $r18;;
     _32(0x980008ae),        //call 19680 <memset>
     _32(0x26490a0e),        //sw 40 (0x28)[$r14] = $r18;;
     _32(0x2749160e),        //sd 88 (0x58)[$r14] = $r18;;
     _32(0x2649180e),        //sw 96 (0x60)[$r14] = $r18;;
     _32(0x27491e0e),        //sd 120 (0x78)[$r14] = $r18;;
     _32(0x2649200e),        //sw 128 (0x80)[$r14] = $r18;;
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3c48020c),        //lq $r18r19 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x38380012),        //ld $r14 = 0 (0x0)[$r18];;
     _32(0x0880018e),        //cb.deqz $r14? 17418 <__sfp+0x118>;;
     _32(0x97ffffd1),        //goto 17348 <__sfp+0x48>
     _32(0x6a48000e),        //copyd $r18 = $r14;;
     _32(0x9fffff85),        //call 17220 <__sinit>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x17ffffcb),        //goto 17340 <__sfp+0x40>;;
     _32(0x9fffff5c),        //call 17188 <__sfmoreglue>
     _32(0xe0040004),        //make $r1 = 4 (0x4)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x887ffe00),        //cb.dnez $r0? 17404 <__sfp+0x104>
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x27010012),        //sd 0 (0x0)[$r18] = $r0;;
     _32(0x98000584),        //call 18a40 <__libc_lock_release>
     _96(0x000000008000012ce0007000),        //make $r0 = 307648 (0x4b1c0);;
     _32(0x6000000c),        //make $r0 = 12 (0xc);;
     _32(0x97ffffe7),        //goto 173e0 <__sfp+0xe0>
     _32(0x26010013),        //sw 0 (0x0)[$r19] = $r0;;
     _32(0x7f03f000)        //nop ;;
 |];

let __sfp_lock_acquire: list_I = 
 [|
     _32(0x90000538),        //goto 18930 <__libc_lock_acquire>
     _96(0x000000008000012ce0007000)        //make $r0 = 307648 (0x4b1c0);;
 |];

let __sfp_lock_release: list_I = 
 [|
     _32(0x90000578),        //goto 18a40 <__libc_lock_release>
     _96(0x000000008000012ce0007000)        //make $r0 = 307648 (0x4b1c0);;
 |];

let __sinit_lock_acquire: list_I = 
 [|
     _32(0x90000530),        //goto 18930 <__libc_lock_acquire>
     _96(0x000000008000012ce0006000)        //make $r0 = 307584 (0x4b180);;
 |];

let __sinit_lock_release: list_I = 
 [|
     _32(0x90000570),        //goto 18a40 <__libc_lock_release>
     _96(0x000000008000012ce0006000)        //make $r0 = 307584 (0x4b180);;
 |];

let __fp_lock_all: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x080000008800012ce0007000),        //make $r0 = 307648 (0x4b1c0);;
     _32(0x98000523),        //call 18930 <__libc_lock_acquire>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _96(0xb840060ce0043600e0001000),        //make $r0 = 286784 (0x46040)
     _96(0x9000005c8800000088000118),        //make $r1 = 94424 (0x170d8)
     _32(0x10000000),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x1000045f)        //goto 18650 <_fwalk>;;
 |];

let __fp_unlock_all: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _96(0x0800000088000118e0001000),        //make $r0 = 286784 (0x46040);;
     _96(0x8000005ca741060ce0044c00),        //make $r1 = 94512 (0x17130)
     _32(0x00000000),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000455),        //call 18650 <_fwalk>
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _96(0x8800012cb840060ce0007000),        //make $r0 = 307648 (0x4b1c0)
     _32(0x08000000),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x10000549)        //goto 18a40 <__libc_lock_release>;;
 |];

let __libc_fini_array: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _96(0x800000f8a749040ce0480000),        //make $r18 = 253952 (0x3e000)
     _32(0x00000000),        //sd 16 (0x10)[$r12] = $r18;;
     _96(0x800000f8a739020ce5380012),        //sbfd $r14 = $r18, 253952 (0x3e000)
     _32(0x00000000),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa3a20ce),        //srad $r14 = $r14, 3 (0x3)
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x0880014e),        //cb.deqz $r14? 17564 <__libc_fini_array+0x44>;;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x3802f392),        //ld.xs $r0 = $r14[$r18];;
     _32(0x0fdc0000),        //icall $r0;;
     _32(0x087fff4e),        //cb.dnez $r14? 17554 <__libc_fini_array+0x34>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let _fopen_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f00c),        //addd $r12 = $r12, -64 (0xffffffc0)
     _32(0x6a0c0002),        //copyd $r3 = $r2;;
     _32(0xe1080e0c),        //addd $r2 = $r12, 56 (0x38)
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849040c),        //sq 16 (0x10)[$r12] = $r18r19;;
     _32(0x27410c0c),        //sd 48 (0x30)[$r12] = $r16;;
     _32(0xea500001),        //copyd $r20 = $r1
     _32(0xea040003),        //copyd $r1 = $r3
     _32(0x2851080c),        //sq 32 (0x20)[$r12] = $r20r21;;
     _32(0x980024ea),        //call 20950 <__sflags>
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0x0c800f40),        //cb.weqz $r0? 176a4 <_fopen_r+0x124>;;
     _32(0x9fffff53),        //call 17300 <__sfp>
     _32(0xfa480000),        //copyw $r18 = $r0
     _32(0xf854ffc0),        //zxwd $r21 = $r0
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x08800e00),        //cb.deqz $r0? 176a4 <_fopen_r+0x124>;;
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0xea040014),        //copyd $r1 = $r20
     _32(0xe00c01b6),        //make $r3 = 438 (0x1b6)
     _32(0x30080e0c),        //lwz $r2 = 56 (0x38)[$r12];;
     _32(0x980008a6),        //call 19870 <_open_r>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x0d000ac0),        //cb.wltz $r0? 1768c <_fopen_r+0x10c>;;
     _32(0xf850ffc0),        //zxwd $r20 = $r0
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b000140),        //cb.odd $r0? 17600 <_fopen_r+0x80>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c800ec0),        //cb.weqz $r0? 176e8 <_fopen_r+0x168>;;
     _32(0xf8484012),        //andw $r18 = $r18, 256 (0x100)
     _96(0xa551048ee00ca000e000fc00),        //make $r0 = 107504 (0x1a3f0)
     _96(0x900000688800000088000068),        //make $r3 = 107136 (0x1a280)
     _32(0x10000000),        //sh 18 (0x12)[$r14] = $r20;;
     _96(0xa701140ee004e000e008bc00),        //make $r2 = 107248 (0x1a2f0)
     _96(0x880000688000000080000068),        //make $r1 = 107392 (0x1a380)
     _32(0x08000000),        //sd 80 (0x50)[$r14] = $r0;;
     _32(0x2555040e),        //sh 16 (0x10)[$r14] = $r21;;
     _32(0x27390c0e),        //sd 48 (0x30)[$r14] = $r14;;
     _32(0x270d0e0e),        //sd 56 (0x38)[$r14] = $r3;;
     _32(0x2709100e),        //sd 64 (0x40)[$r14] = $r2;;
     _32(0x8c0007d2),        //cb.wnez $r18? 176c8 <_fopen_r+0x148>
     _32(0x2705120e),        //sd 72 (0x48)[$r14] = $r1;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b000140),        //cb.odd $r0? 1766c <_fopen_r+0xec>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c8008c0),        //cb.weqz $r0? 176f4 <_fopen_r+0x174>;;
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x3c48040c),        //lq $r18r19 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x3c50080c),        //lq $r20r21 = 32 (0x20)[$r12];;
     _32(0x1fffff71),        //call 17450 <__sfp_lock_acquire>;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x98000472),        //call 18860 <__libc_lock_close>
     _32(0x2505040e),        //sh 16 (0x10)[$r14] = $r1;;
     _32(0x1fffff70),        //call 17460 <__sfp_lock_release>;;
     _32(0xe0380000),        //make $r14 = 0 (0x0)
     _32(0x38400c0c),        //ld $r16 = 48 (0x30)[$r12];;
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x3c48040c),        //lq $r18r19 = 16 (0x10)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x3c50080c),        //lq $r20r21 = 32 (0x20)[$r12];;
     _32(0x9800025e),        //call 18040 <_fseek_r>
     _32(0xe00c0002),        //make $r3 = 2 (0x2)
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b7ff8c0),        //cb.odd $r0? 1766c <_fopen_r+0xec>;;
     _32(0x17ffffde),        //goto 1765c <_fopen_r+0xdc>;;
     _32(0x98000492),        //call 18930 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffc4),        //goto 17600 <_fopen_r+0x80>;;
     _32(0x980004d3),        //call 18a40 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffdc)        //goto 1766c <_fopen_r+0xec>;;
 |];

let fopen: list_I = 
 [|
     _32(0xea0c0000),        //copyd $r3 = $r0
     _32(0xea080001),        //copyd $r2 = $r1
     _96(0x1000000090000118e0001000),        //make $r0 = 286784 (0x46040);;
     _32(0x97ffff9b),        //goto 17580 <_fopen_r>
     _32(0xea040003),        //copyd $r1 = $r3
     _32(0x38000000)        //ld $r0 = 0 (0x0)[$r0];;
 |];

let _malloc_trim_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0xea4c0000),        //copyd $r19 = $r0
     _32(0x2849080c),        //sq 32 (0x20)[$r12] = $r18r19;;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _64(0xa7410e0ce538f7ce),        //sbfd $r14 = $r14, 4063 (0xfdf)
     _32(0x00000003),        //sd 56 (0x38)[$r12] = $r16;;
     _32(0x98000843),        //call 19850 <__malloc_lock>
     _96(0x8000011aa7510c0ce0506400),        //make $r20 = 289168 (0x46990)
     _32(0x00000000),        //sd 48 (0x30)[$r12] = $r20;;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x38000414),        //ld $r0 = 16 (0x10)[$r20];;
     _32(0x38480200),        //ld $r18 = 8 (0x8)[$r0];;
     _32(0x6848ff12),        //andd $r18 = $r18, -4 (0xfffffffc);;
     _32(0x7139048e),        //addd $r14 = $r14, $r18;;
     _32(0x7b3a230e),        //srld $r14 = $r14, 12 (0xc);;
     _32(0x6138ffce),        //addd $r14 = $r14, -1 (0xffffffff);;
     _32(0x793a230e),        //slld $r14 = $r14, 12 (0xc);;
     _64(0x00000003e501ffce),        //compd.gt $r0 = $r14, 4095 (0xfff);;
     _32(0x088001c0),        //cb.deqz $r0? 1779c <_malloc_trim_r+0x7c>;;
     _32(0x9800098d),        //call 19db8 <_sbrk_r>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38040414),        //ld $r1 = 16 (0x10)[$r20];;
     _32(0x71050481),        //addd $r1 = $r1, $r18;;
     _32(0x7001a040),        //compd.ne $r0 = $r0, $r1;;
     _32(0x088002c0),        //cb.deqz $r0? 177c4 <_malloc_trim_r+0xa4>;;
     _32(0x98000831),        //call 19860 <__malloc_unlock>
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x9800097d),        //call 19db8 <_sbrk_r>
     _32(0xe504000e),        //negd $r1 = $r14
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0xe001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff)
     _32(0xf549048e),        //sbfd $r18 = $r14, $r18
     _96(0x100000009000012ce0088000),        //make $r2 = 307712 (0x4b200);;
     _32(0x6a480052),        //ord $r18 = $r18, 1 (0x1);;
     _32(0x08800400),        //cb.deqz $r0? 17828 <_malloc_trim_r+0x108>;;
     _32(0xea000013),        //copyd $r0 = $r19
     _32(0x30040002),        //lwz $r1 = 0 (0x0)[$r2];;
     _32(0x380c0414),        //ld $r3 = 16 (0x10)[$r20];;
     _32(0xf539104e),        //sbfw $r14 = $r14, $r1
     _32(0x27490203),        //sd 8 (0x8)[$r3] = $r18;;
     _32(0x98000818),        //call 19860 <__malloc_unlock>
     _32(0x26390002),        //sw 0 (0x0)[$r2] = $r14;;
     _32(0xe0000001),        //make $r0 = 1 (0x1)
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x38500c0c),        //ld $r20 = 48 (0x30)[$r12];;
     _32(0x98000964),        //call 19db8 <_sbrk_r>
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x6a000013),        //copyd $r0 = $r19;;
     _32(0x38080414),        //ld $r2 = 16 (0x10)[$r20];;
     _32(0x75050002),        //sbfd $r1 = $r2, $r0;;
     _32(0x640d07c1),        //compd.le $r3 = $r1, 31 (0x1f);;
     _32(0x087ff5c3),        //cb.dnez $r3? 1779c <_malloc_trim_r+0x7c>;;
     _32(0xea040041),        //ord $r1 = $r1, 1 (0x1)
     _96(0x8800011ae00c8000e0106000),        //make $r4 = 289152 (0x46980)
     _96(0x100000009000012c88000000),        //make $r3 = 307712 (0x4b200);;
     _32(0x38100004),        //ld $r4 = 0 (0x0)[$r4];;
     _32(0x27050202),        //sd 8 (0x8)[$r2] = $r1;;
     _32(0x75010004),        //sbfd $r0 = $r4, $r0;;
     _32(0x97ffffcc),        //goto 1779c <_malloc_trim_r+0x7c>
     _32(0x26010003),        //sw 0 (0x0)[$r3] = $r0;;
     _32(0x7f03f000)        //nop ;;
 |];

let _free_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2749040c),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x888014c1),        //cb.deqz $r1? 179dc <_free_r+0x164>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x180007ee),        //call 19850 <__malloc_lock>;;
     _32(0xe11cfc0e),        //addd $r7 = $r14, -16 (0xfffffff0)
     _96(0x8800011ab818fe0ee0146400),        //make $r5 = 289168 (0x46990)
     _32(0x08000000),        //ld $r6 = -8 (0xfffffff8)[$r14];;
     _32(0x38100405),        //ld $r4 = 16 (0x10)[$r5];;
     _32(0x6804ff86),        //andd $r1 = $r6, -2 (0xfffffffe);;
     _32(0x710d0047),        //addd $r3 = $r7, $r1;;
     _32(0xf011a0c4),        //compd.ne $r4 = $r4, $r3
     _32(0x38080203),        //ld $r2 = 8 (0x8)[$r3];;
     _32(0x88802144),        //cb.deqz $r4? 17ad8 <_free_r+0x260>
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x8b000d86),        //cb.odd $r6? 179a4 <_free_r+0x12c>
     _32(0xf1010083),        //addd $r0 = $r3, $r2
     _32(0x27090203),        //sd 8 (0x8)[$r3] = $r2;;
     _32(0xe1140405),        //addd $r5 = $r5, 16 (0x10)
     _32(0x3810fc0e),        //ld $r4 = -16 (0xfffffff0)[$r14];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0xf51d01c4),        //sbfd $r7 = $r4, $r7
     _32(0x71050101),        //addd $r1 = $r1, $r4;;
     _32(0xe8000040),        //andd $r0 = $r0, 1 (0x1)
     _32(0x38100407),        //ld $r4 = 16 (0x10)[$r7];;
     _32(0x7119a144),        //compd.eq $r6 = $r4, $r5;;
     _32(0x08001a06),        //cb.dnez $r6? 17a98 <_free_r+0x220>;;
     _32(0x38180607),        //ld $r6 = 24 (0x18)[$r7];;
     _32(0x27190604),        //sd 24 (0x18)[$r4] = $r6;;
     _32(0x88802700),        //cb.deqz $r0? 17b74 <_free_r+0x2fc>
     _32(0x27110406),        //sd 16 (0x10)[$r6] = $r4;;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0x27010207),        //sd 8 (0x8)[$r7] = $r0;;
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x69017fc1),        //compd.gtu $r0 = $r1, 511 (0x1ff);;
     _32(0x08000ec0),        //cb.dnez $r0? 17a08 <_free_r+0x190>;;
     _32(0xe60720c1),        //extfz $r1 = $r1, 34 (0x22), 3 (0x3)
     _32(0xe0080001),        //make $r2 = 1 (0x1)
     _96(0x100000009000011ae00c6400),        //make $r3 = 289168 (0x46990);;
     _32(0xf1000041),        //addw $r0 = $r1, 1 (0x1)
     _32(0xfa063081),        //sraw $r1 = $r1, 2 (0x2)
     _32(0x38100203),        //ld $r4 = 8 (0x8)[$r3];;
     _32(0xf9023040),        //sllw $r0 = $r0, 1 (0x1)
     _32(0x79066042),        //slld $r1 = $r2, $r1;;
     _32(0x6903f000),        //sxwd $r0 = $r0;;
     _32(0xf90220c0),        //slld $r0 = $r0, 3 (0x3)
     _32(0x7a050101),        //ord $r1 = $r1, $r4;;
     _96(0x8000011ab8086400e1106000),        //addd $r4 = $r0, 289152 (0x46980)
     _96(0x180000009800011a80000000),        //ld $r2 = 289168 (0x46990)[$r0];;
     _32(0x27110607),        //sd 24 (0x18)[$r7] = $r4;;
     _32(0x27050203),        //sd 8 (0x8)[$r3] = $r1;;
     _32(0x27090407),        //sd 16 (0x10)[$r7] = $r2;;
     _96(0x180000009800011aa71d6400),        //sd 289168 (0x46990)[$r0] = $r7;;
     _32(0x271d0602),        //sd 24 (0x18)[$r2] = $r7;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x100007b0),        //goto 19860 <__malloc_unlock>;;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x0b0004c0),        //cb.odd $r0? 179f4 <_free_r+0x17c>;;
     _32(0xf1050081),        //addd $r1 = $r1, $r2
     _32(0x61140405),        //addd $r5 = $r5, 16 (0x10);;
     _32(0xea100041),        //ord $r4 = $r1, 1 (0x1)
     _32(0x38000403),        //ld $r0 = 16 (0x10)[$r3];;
     _32(0x7009a140),        //compd.ne $r2 = $r0, $r5;;
     _32(0x08801d42),        //cb.deqz $r2? 17b94 <_free_r+0x31c>;;
     _32(0x38080603),        //ld $r2 = 24 (0x18)[$r3];;
     _32(0x27090600),        //sd 24 (0x18)[$r0] = $r2;;
     _32(0x27010402),        //sd 16 (0x10)[$r2] = $r0;;
     _32(0x27110207),        //sd 8 (0x8)[$r7] = $r4;;
     _32(0x97ffffd1),        //goto 17918 <_free_r+0xa0>
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0xe9017fc1),        //compd.gtu $r0 = $r1, 511 (0x1ff)
     _32(0x2701fe0e),        //sd -8 (0xfffffff8)[$r14] = $r0;;
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x08fff1c0),        //cb.deqz $r0? 17920 <_free_r+0xa8>;;
     _32(0x7b022241),        //srld $r0 = $r1, 9 (0x9);;
     _32(0x69090100),        //compd.gtu $r2 = $r0, 4 (0x4);;
     _32(0x08001382),        //cb.dnez $r2? 17b48 <_free_r+0x2d0>;;
     _32(0x66035181),        //extfz $r0 = $r1, 37 (0x25), 6 (0x6);;
     _32(0xf1100e40),        //addw $r4 = $r0, 57 (0x39)
     _32(0x71000e00),        //addw $r0 = $r0, 56 (0x38);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _96(0x8000011ab80c6404e1106004),        //addd $r4 = $r4, 289152 (0x46980)
     _96(0x180000009800011a80000000),        //ld $r3 = 289168 (0x46990)[$r4];;
     _32(0x7009a0c4),        //compd.ne $r2 = $r4, $r3;;
     _32(0x08801702),        //cb.deqz $r2? 17bb8 <_free_r+0x340>;;
     _32(0x38080203),        //ld $r2 = 8 (0x8)[$r3];;
     _32(0x6808ff02),        //andd $r2 = $r2, -4 (0xfffffffc);;
     _32(0x7909a042),        //compd.gtu $r2 = $r2, $r1;;
     _32(0x08800102),        //cb.deqz $r2? 17a68 <_free_r+0x1f0>;;
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x7101a0c4),        //compd.eq $r0 = $r4, $r3;;
     _32(0x08fffe80),        //cb.deqz $r0? 17a4c <_free_r+0x1d4>;;
     _32(0x38100603),        //ld $r4 = 24 (0x18)[$r3];;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x27110607),        //sd 24 (0x18)[$r7] = $r4;;
     _32(0x270d0407),        //sd 16 (0x10)[$r7] = $r3;;
     _32(0x271d0404),        //sd 16 (0x10)[$r4] = $r7;;
     _32(0x271d0603),        //sd 24 (0x18)[$r3] = $r7;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x10000773),        //goto 19860 <__malloc_unlock>;;
     _32(0x080019c0),        //cb.dnez $r0? 17c34 <_free_r+0x3bc>;;
     _32(0xf1050042),        //addd $r1 = $r2, $r1
     _32(0x38000603),        //ld $r0 = 24 (0x18)[$r3];;
     _32(0xea080041),        //ord $r2 = $r1, 1 (0x1)
     _32(0x380c0403),        //ld $r3 = 16 (0x10)[$r3];;
     _32(0x27010603),        //sd 24 (0x18)[$r3] = $r0;;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x270d0400),        //sd 16 (0x10)[$r0] = $r3;;
     _32(0x27090207),        //sd 8 (0x8)[$r7] = $r2;;
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x10000763),        //goto 19860 <__malloc_unlock>;;
     _32(0x8b000246),        //cb.odd $r6? 17afc <_free_r+0x284>
     _32(0x71050081),        //addd $r1 = $r1, $r2;;
     _32(0x3800fc0e),        //ld $r0 = -16 (0xfffffff0)[$r14];;
     _32(0xf51d01c0),        //sbfd $r7 = $r0, $r7
     _32(0x71050001),        //addd $r1 = $r1, $r0;;
     _32(0x38080407),        //ld $r2 = 16 (0x10)[$r7];;
     _32(0x38000607),        //ld $r0 = 24 (0x18)[$r7];;
     _32(0x27010602),        //sd 24 (0x18)[$r2] = $r0;;
     _32(0x27090400),        //sd 16 (0x10)[$r0] = $r2;;
     _32(0xea0c0041),        //ord $r3 = $r1, 1 (0x1)
     _96(0x8800011ae0006400e0086200),        //make $r2 = 289160 (0x46988)
     _96(0x100000009000011a88000000),        //make $r0 = 289168 (0x46990);;
     _32(0x38080002),        //ld $r2 = 0 (0x0)[$r2];;
     _32(0x270d0207),        //sd 8 (0x8)[$r7] = $r3;;
     _32(0x271d0400),        //sd 16 (0x10)[$r0] = $r7;;
     _32(0x7905a042),        //compd.gtu $r1 = $r2, $r1;;
     _32(0x087fe601),        //cb.dnez $r1? 17988 <_free_r+0x110>;;
     _32(0xea000012),        //copyd $r0 = $r18
     _96(0x080000008800012ce0048e00),        //make $r1 = 307768 (0x4b238);;
     _32(0x9ffffef9),        //call 17720 <_malloc_trim_r>
     _32(0x38040001),        //ld $r1 = 0 (0x0)[$r1];;
     _32(0x17ffff91),        //goto 17988 <_free_r+0x110>;;
     _32(0x69090500),        //compd.gtu $r2 = $r0, 20 (0x14);;
     _32(0x08800302),        //cb.deqz $r2? 17b7c <_free_r+0x304>;;
     _32(0x69091500),        //compd.gtu $r2 = $r0, 84 (0x54);;
     _32(0x080008c2),        //cb.dnez $r2? 17be0 <_free_r+0x368>;;
     _32(0x6603b301),        //extfz $r0 = $r1, 43 (0x2b), 12 (0xc);;
     _32(0xf1101bc0),        //addw $r4 = $r0, 111 (0x6f)
     _32(0x71001b80),        //addw $r0 = $r0, 110 (0x6e);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffffb0),        //goto 17a2c <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x97ffff90),        //goto 179b4 <_free_r+0x13c>
     _32(0x71050081),        //addd $r1 = $r1, $r2;;
     _32(0xf1101700),        //addw $r4 = $r0, 92 (0x5c)
     _32(0x710016c0),        //addw $r0 = $r0, 91 (0x5b);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffffa8),        //goto 17a2c <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _96(0x000000008000011ae0006400),        //make $r0 = 289168 (0x46990);;
     _32(0x271d0a00),        //sd 40 (0x28)[$r0] = $r7;;
     _32(0x271d0800),        //sd 32 (0x20)[$r0] = $r7;;
     _32(0x27150607),        //sd 24 (0x18)[$r7] = $r5;;
     _32(0x28110207),        //sq 8 (0x8)[$r7] = $r4r5;;
     _32(0x97ffff76),        //goto 17988 <_free_r+0x110>
     _32(0x2707e047),        //sd $r1[$r7] = $r1;;
     _32(0xe0040001),        //make $r1 = 1 (0x1)
     _32(0xfa023080),        //sraw $r0 = $r0, 2 (0x2)
     _96(0x100000009000011ae0086400),        //make $r2 = 289168 (0x46990);;
     _32(0xf9026001),        //slld $r0 = $r1, $r0
     _32(0x38140202),        //ld $r5 = 8 (0x8)[$r2];;
     _32(0x7a010140),        //ord $r0 = $r0, $r5;;
     _32(0x97ffffa5),        //goto 17a6c <_free_r+0x1f4>
     _32(0x27010202),        //sd 8 (0x8)[$r2] = $r0;;
     _32(0x69095500),        //compd.gtu $r2 = $r0, 340 (0x154);;
     _32(0x08000202),        //cb.dnez $r2? 17c04 <_free_r+0x38c>;;
     _32(0x6603e3c1),        //extfz $r0 = $r1, 46 (0x2e), 15 (0xf);;
     _32(0xf1101e00),        //addw $r4 = $r0, 120 (0x78)
     _32(0x71001dc0),        //addw $r0 = $r0, 119 (0x77);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffff8c),        //goto 17a2c <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0xe01007f0),        //make $r4 = 2032 (0x7f0)
     _32(0xe000007e),        //make $r0 = 126 (0x7e)
     _64(0x10000001e9095500),        //compd.gtu $r2 = $r0, 1364 (0x554);;
     _32(0x087fe182),        //cb.dnez $r2? 17a2c <_free_r+0x1b4>;;
     _32(0x67031481),        //extfz $r0 = $r1, 49 (0x31), 18 (0x12);;
     _32(0xf1101f40),        //addw $r4 = $r0, 125 (0x7d)
     _32(0x71001f00),        //addw $r0 = $r0, 124 (0x7c);;
     _32(0x79123044),        //sllw $r4 = $r4, 1 (0x1);;
     _32(0x6913f004),        //sxwd $r4 = $r4;;
     _32(0x97ffff80),        //goto 17a2c <_free_r+0x1b4>
     _32(0x791220c4),        //slld $r4 = $r4, 3 (0x3);;
     _32(0x6a000041),        //ord $r0 = $r1, 1 (0x1);;
     _32(0x27010207),        //sd 8 (0x8)[$r7] = $r0;;
     _32(0x97ffff53),        //goto 17988 <_free_r+0x110>
     _32(0x27050003),        //sd 0 (0x0)[$r3] = $r1;;
     _32(0x00000000)        //errop ;;
 |];

let _freopen_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0xea4c0001),        //copyd $r19 = $r1
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0x2849080c),        //sq 32 (0x20)[$r12] = $r18r19;;
     _32(0xea380003),        //copyd $r14 = $r3
     _32(0x2739060c),        //sd 24 (0x18)[$r12] = $r14;;
     _32(0xea500002),        //copyd $r20 = $r2
     _32(0x28550c0c),        //so 48 (0x30)[$r12] = $r20r21r22r23;;
     _32(0x88800100),        //cb.deqz $r0? 17c7c <_freopen_r+0x34>
     _32(0x2741140c),        //sd 80 (0x50)[$r12] = $r16;;
     _32(0x30041400),        //lwz $r1 = 80 (0x50)[$r0];;
     _32(0x0c802301),        //cb.weqz $r1? 17ea8 <_freopen_r+0x260>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x68540040),        //andd $r21 = $r0, 1 (0x1);;
     _32(0x0b001a00),        //cb.odd $r0? 17e24 <_freopen_r+0x1dc>;;
     _32(0xea040014),        //copyd $r1 = $r20
     _32(0xe108160c),        //addd $r2 = $r12, 88 (0x58)
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c802140),        //cb.weqz $r0? 17eb0 <_freopen_r+0x268>;;
     _32(0x9800232c),        //call 20950 <__sflags>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x8c802280),        //cb.weqz $r0? 17ed0 <_freopen_r+0x288>
     _32(0x7850ffc0),        //zxwd $r20 = $r0;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x08801b80),        //cb.deqz $r0? 17e6c <_freopen_r+0x224>;;
     _32(0x78000200),        //andw $r0 = $r0, 8 (0x8);;
     _32(0x0c002300),        //cb.wnez $r0? 17eec <_freopen_r+0x2a4>;;
     _32(0x3808140e),        //ld $r2 = 80 (0x50)[$r14];;
     _32(0x088023c2),        //cb.deqz $r2? 17f00 <_freopen_r+0x2b8>;;
     _32(0x88801bd3),        //cb.deqz $r19? 17e84 <_freopen_r+0x23c>
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _32(0x8fdc0002),        //icall $r2
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x980006e6),        //call 19870 <_open_r>
     _32(0xea040013),        //copyd $r1 = $r19
     _32(0xe00c01b6),        //make $r3 = 438 (0x1b6)
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3008160c),        //lwz $r2 = 88 (0x58)[$r12];;
     _32(0xf84cffc0),        //zxwd $r19 = $r0
     _32(0x2804040e),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0x30580012),        //lwz $r22 = 0 (0x0)[$r18];;
     _32(0x78042001),        //andw $r1 = $r1, 128 (0x80);;
     _32(0x6407f001),        //zxhd $r1 = $r1;;
     _32(0x08800101),        //cb.deqz $r1? 17d10 <_freopen_r+0xc8>;;
     _32(0x9ffffedd),        //call 17878 <_free_r>
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3804060e),        //ld $r1 = 24 (0x18)[$r14];;
     _32(0xe1001d0e),        //addd $r0 = $r14, 116 (0x74)
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0x3804160e),        //ld $r1 = 88 (0x58)[$r14];;
     _32(0x2709000e),        //sd 0 (0x0)[$r14] = $r2;;
     _32(0x2709020e),        //sd 8 (0x8)[$r14] = $r2;;
     _32(0xf101a001),        //compd.eq $r0 = $r1, $r0
     _32(0x2709060e),        //sd 24 (0x18)[$r14] = $r2;;
     _32(0x2609080e),        //sw 32 (0x20)[$r14] = $r2;;
     _32(0x888001c1),        //cb.deqz $r1? 17d4c <_freopen_r+0x104>
     _32(0x26090a0e),        //sw 40 (0x28)[$r14] = $r2;;
     _32(0x080000c0),        //cb.dnez $r0? 17d44 <_freopen_r+0xfc>;;
     _32(0x9ffffecf),        //call 17878 <_free_r>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2701160e),        //sd 88 (0x58)[$r14] = $r0;;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0x38041e0e),        //ld $r1 = 120 (0x78)[$r14];;
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x2601180e),        //sw 96 (0x60)[$r14] = $r0;;
     _32(0x08800101),        //cb.deqz $r1? 17d6c <_freopen_r+0x124>;;
     _32(0x1ffffec6),        //call 17878 <_free_r>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x27011e0e),        //sd 120 (0x78)[$r14] = $r0;;
     _32(0xe05c0000),        //make $r23 = 0 (0x0)
     _32(0xe0080008),        //make $r2 = 8 (0x8)
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x2810040e),        //lhz $r4 = 16 (0x10)[$r14];;
     _32(0xe100400e),        //addd $r0 = $r14, 256 (0x100)
     _32(0x300c420e),        //lwz $r3 = 264 (0x108)[$r14];;
     _32(0x265d200e),        //sw 128 (0x80)[$r14] = $r23;;
     _64(0x07fffff7f810ffc4),        //andw $r4 = $r4, -8193 (0xffffffffffffdfff);;
     _64(0xa511040ef80cffc3),        //andw $r3 = $r3, -8193 (0xffffffffffffdfff)
     _32(0x07fffff7),        //sh 16 (0x10)[$r14] = $r4;;
     _32(0x98000639),        //call 19680 <memset>
     _32(0x260d420e),        //sw 264 (0x108)[$r14] = $r3;;
     _32(0x0d0018d3),        //cb.wltz $r19? 17f30 <_freopen_r+0x2e8>;;
     _96(0xa551040ee008bc00e00ca000),        //make $r3 = 107136 (0x1a280)
     _96(0x880000688000000080000068),        //make $r2 = 107248 (0x1a2f0)
     _32(0x08000000),        //sh 16 (0x10)[$r14] = $r20;;
     _96(0xa54d048ee000fc00e004e000),        //make $r1 = 107392 (0x1a380)
     _96(0x880000688000000080000068),        //make $r0 = 107504 (0x1a3f0)
     _32(0x08000000),        //sh 18 (0x12)[$r14] = $r19;;
     _32(0x27390c0e),        //sd 48 (0x30)[$r14] = $r14;;
     _32(0x270d0e0e),        //sd 56 (0x38)[$r14] = $r3;;
     _32(0x2709100e),        //sd 64 (0x40)[$r14] = $r2;;
     _32(0x2705120e),        //sd 72 (0x48)[$r14] = $r1;;
     _32(0x88000155),        //cb.dnez $r21? 17e04 <_freopen_r+0x1bc>
     _32(0x2701140e),        //sd 80 (0x50)[$r14] = $r0;;
     _64(0x00000000f8508014),        //andw $r20 = $r20, 512 (0x200);;
     _32(0x0c801094),        //cb.weqz $r20? 17f08 <_freopen_r+0x2c0>;;
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x3840140c),        //ld $r16 = 80 (0x50)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c540c0c),        //lo $r20r21r22r23 = 48 (0x30)[$r12];;
     _32(0x980022cb),        //call 20950 <__sflags>
     _32(0xea040014),        //copyd $r1 = $r20
     _32(0xe108160c),        //addd $r2 = $r12, 88 (0x58)
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x8c7fe7c0),        //cb.wnez $r0? 17cb0 <_freopen_r+0x68>
     _32(0x7850ffc0),        //zxwd $r20 = $r0;;
     _32(0x9ffffb1d),        //call 16ab0 <_fclose_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0xe0380000),        //make $r14 = 0 (0x0)
     _32(0x3840140c),        //ld $r16 = 80 (0x50)[$r12];;
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c540c0c),        //lo $r20r21r22r23 = 48 (0x30)[$r12];;
     _32(0x60000020),        //make $r0 = 32 (0x20);;
     _32(0x887fe693),        //cb.dnez $r19? 17cd8 <_freopen_r+0x90>
     _32(0x2501040e),        //sh 16 (0x10)[$r14] = $r0;;
     _32(0x3808140e),        //ld $r2 = 80 (0x50)[$r14];;
     _32(0x08800dc2),        //cb.deqz $r2? 17f58 <_freopen_r+0x310>;;
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _32(0x8fdc0002),        //icall $r2
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0xe0580009),        //make $r22 = 9 (0x9)
     _64(0xa804040ee04cffc0),        //make $r19 = 4294967295 (0xffffffff)
     _32(0x083fffff),        //lhz $r1 = 16 (0x10)[$r14];;
     _32(0x78042001),        //andw $r1 = $r1, 128 (0x80);;
     _32(0x97ffff98),        //goto 17d00 <_freopen_r+0xb8>
     _32(0x6407f001),        //zxhd $r1 = $r1;;
     _32(0x1ffffcde),        //call 17220 <__sinit>;;
     _32(0x17ffff74),        //goto 17c7c <_freopen_r+0x34>;;
     _32(0x980002a0),        //call 18930 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x980022a6),        //call 20950 <__sflags>
     _32(0xea040014),        //copyd $r1 = $r20
     _32(0xe108160c),        //addd $r2 = $r12, 88 (0x58)
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x8c7fde80),        //cb.wnez $r0? 17cb0 <_freopen_r+0x68>
     _32(0x7850ffc0),        //zxwd $r20 = $r0;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c7ff600),        //cb.wnez $r0? 17e3c <_freopen_r+0x1f4>;;
     _32(0x980002d8),        //call 18a40 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffffd5),        //goto 17e3c <_freopen_r+0x1f4>;;
     _32(0x9ffffc05),        //call 16f00 <_fflush_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x3808140e),        //ld $r2 = 80 (0x50)[$r14];;
     _32(0x087fdcc2),        //cb.dnez $r2? 17cc8 <_freopen_r+0x80>;;
     _32(0x08fff8d3),        //cb.deqz $r19? 17e8c <_freopen_r+0x244>;;
     _32(0x17ffff75),        //goto 17cd8 <_freopen_r+0x90>;;
     _32(0x980002ce),        //call 18a40 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x3840140c),        //ld $r16 = 80 (0x50)[$r12];;
     _32(0x3838060c),        //ld $r14 = 24 (0x18)[$r12];;
     _32(0x3c48080c),        //lq $r18r19 = 32 (0x20)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130180c),        //addd $r12 = $r12, 96 (0x60)
     _32(0x3c540c0c),        //lo $r20r21r22r23 = 48 (0x30)[$r12];;
     _32(0x1ffffd48),        //call 17450 <__sfp_lock_acquire>;;
     _32(0xe138300e),        //addd $r14 = $r14, 192 (0xc0)
     _32(0x255d040e),        //sh 16 (0x10)[$r14] = $r23;;
     _32(0x888002d5),        //cb.deqz $r21? 17f68 <_freopen_r+0x320>
     _32(0x26590012),        //sw 0 (0x0)[$r18] = $r22;;
     _32(0x98000247),        //call 18860 <__libc_lock_close>
     _32(0x6a00000e),        //copyd $r0 = $r14;;
     _32(0x1ffffd45),        //call 17460 <__sfp_lock_release>;;
     _32(0x97ffffad),        //goto 17e04 <_freopen_r+0x1bc>
     _32(0x60380000),        //make $r14 = 0 (0x0);;
     _32(0x97ffff6e),        //goto 17d10 <_freopen_r+0xc8>
     _32(0xe0580009),        //make $r22 = 9 (0x9)
     _64(0x083fffffe04cffc0),        //make $r19 = 4294967295 (0xffffffff);;
     _32(0x980002b6),        //call 18a40 <__libc_lock_release>
     _32(0x6a00000e),        //copyd $r0 = $r14;;
     _32(0x17fffff5),        //goto 17f44 <_freopen_r+0x2fc>;;
     _32(0x7f03f000)        //nop ;;
 |];

let freopen: list_I = 
 [|
     _32(0xea100000),        //copyd $r4 = $r0
     _32(0xea0c0002),        //copyd $r3 = $r2
     _32(0xea080001),        //copyd $r2 = $r1
     _96(0x1800000098000118e0001000),        //make $r0 = 286784 (0x46040);;
     _32(0x97ffff2e),        //goto 17c48 <_freopen_r>
     _32(0xea040004),        //copyd $r1 = $r4
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x00000000)        //errop ;;
 |];

let fscanf: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0xe13c0c0c),        //addd $r15 = $r12, 48 (0x30)
     _32(0xea400000),        //copyd $r16 = $r0
     _96(0x90000118a741040ce0001000),        //make $r0 = 286784 (0x46040)
     _32(0x10000000),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0xea080001),        //copyd $r2 = $r1
     _32(0xea0c000f),        //copyd $r3 = $r15
     _32(0xea040010),        //copyd $r1 = $r16
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x273d060c),        //sd 24 (0x18)[$r12] = $r15;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x98001c85),        //call 1f1f8 <_vfscanf_r>
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0xe130200c),        //addd $r12 = $r12, 128 (0x80)
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let _fscanf_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0xe13c0e0c),        //addd $r15 = $r12, 56 (0x38)
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0xea0c000f),        //copyd $r3 = $r15
     _32(0x270d0e0c),        //sd 56 (0x38)[$r12] = $r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x98001c74),        //call 1f1f8 <_vfscanf_r>
     _32(0x273d060c),        //sd 24 (0x18)[$r12] = $r15;;
     _32(0xe130200c),        //addd $r12 = $r12, 128 (0x80)
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000)        //ret ;;
 |];

let _fseek_r: list_I = 
 [|
     _32(0x1000000c),        //goto 18070 <_fseeko_r>;;
     _32(0x7f03f000)        //nop ;;
 |];

let fseek: list_I = 
 [|
     _32(0xea100000),        //copyd $r4 = $r0
     _32(0xfa0c0002),        //copyw $r3 = $r2
     _32(0xea080001),        //copyd $r2 = $r1
     _96(0x1800000098000118e0001000),        //make $r0 = 286784 (0x46040);;
     _32(0x90000004),        //goto 18070 <_fseeko_r>
     _32(0xea040004),        //copyd $r1 = $r4
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x00000000)        //errop ;;
 |];

let _fseeko_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0xea480000),        //copyd $r18 = $r0
     _32(0xea4c0002),        //copyd $r19 = $r2
     _32(0x2849060c),        //sq 24 (0x18)[$r12] = $r18r19;;
     _32(0xea380001),        //copyd $r14 = $r1
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0xf850ffc3),        //zxwd $r20 = $r3
     _32(0x28550a0c),        //so 40 (0x28)[$r12] = $r20r21r22r23;;
     _32(0x2741140c),        //sd 80 (0x50)[$r12] = $r16;;
     _32(0x88800100),        //cb.deqz $r0? 180a8 <_fseeko_r+0x38>
     _32(0x2761120c),        //sd 72 (0x48)[$r12] = $r24;;
     _32(0x30041400),        //lwz $r1 = 80 (0x50)[$r0];;
     _32(0x0c8008c1),        //cb.weqz $r1? 18130 <_fseeko_r+0xc0>;;
     _32(0x3004420e),        //lwz $r1 = 264 (0x108)[$r14];;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x0b000101),        //cb.odd $r1? 180c0 <_fseeko_r+0x50>;;
     _64(0x00000000f8048000),        //andw $r1 = $r0, 512 (0x200);;
     _32(0x0c803941),        //cb.weqz $r1? 18450 <_fseeko_r+0x3e0>;;
     _32(0x6e004200),        //andnd $r0 = $r0, 264 (0x108);;
     _32(0x08803500),        //cb.deqz $r0? 18414 <_fseeko_r+0x3a4>;;
     _32(0xe0040016),        //make $r1 = 22 (0x16)
     _64(0xe85cff54f101b054),        //compw.eq $r0 = $r20, 1 (0x1)
     _64(0x88000000b854120e),        //andd $r23 = $r20, 4294967293 (0xfffffffd)
     _32(0x103fffff),        //ld $r21 = 72 (0x48)[$r14];;
     _32(0x08804a95),        //cb.deqz $r21? 18588 <_fseeko_r+0x518>;;
     _32(0x0c0015c0),        //cb.wnez $r0? 18240 <_fseeko_r+0x1d0>;;
     _32(0x08800517),        //cb.deqz $r23? 18138 <_fseeko_r+0xc8>;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x26050012),        //sw 0 (0x0)[$r18] = $r1;;
     _32(0x0b000140),        //cb.odd $r0? 18108 <_fseeko_r+0x98>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c803c00),        //cb.weqz $r0? 184c4 <_fseeko_r+0x454>;;
     _64(0xb840140ce000ffc0),        //make $r0 = 4294967295 (0xffffffff)
     _32(0x003fffff),        //ld $r16 = 80 (0x50)[$r12];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c540a0c),        //lo $r20r21r22r23 = 40 (0x28)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130300c),        //addd $r12 = $r12, 192 (0xc0)
     _32(0x3860120c),        //ld $r24 = 72 (0x48)[$r12];;
     _32(0x1ffffc3c),        //call 17220 <__sinit>;;
     _32(0x17ffffdd),        //goto 180a8 <_fseeko_r+0x38>;;
     _32(0xe0580000),        //make $r22 = 0 (0x0)
     _32(0x3804060e),        //ld $r1 = 24 (0x18)[$r14];;
     _32(0x08801741),        //cb.deqz $r1? 182b4 <_fseeko_r+0x244>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0xe407f000),        //zxhd $r1 = $r0
     _64(0x08000002f8080680),        //andw $r2 = $r0, 2074 (0x81a);;
     _64(0x00000001f8040001),        //andw $r1 = $r1, 1024 (0x400);;
     _32(0x0c000282),        //cb.wnez $r2? 18184 <_fseeko_r+0x114>;;
     _32(0x0c001a81),        //cb.wnez $r1? 18308 <_fseeko_r+0x298>;;
     _96(0x0000000080000068e004e000),        //make $r1 = 107392 (0x1a380);;
     _32(0x7005a055),        //compd.ne $r1 = $r21, $r1;;
     _32(0x08801501),        //cb.deqz $r1? 182c4 <_fseeko_r+0x254>;;
     _64(0x00000002fa000000),        //orw $r0 = $r0, 2048 (0x800);;
     _32(0x2501040e),        //sh 16 (0x10)[$r14] = $r0;;
     _32(0x9ffffb5f),        //call 16f00 <_fflush_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x0c003ec0),        //cb.wnez $r0? 1857c <_fseeko_r+0x50c>;;
     _32(0x8fdc0015),        //icall $r21
     _32(0xfa0c0014),        //copyw $r3 = $r20
     _32(0xea080013),        //copyd $r2 = $r19
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _32(0x6101ffc0),        //compd.eq $r0 = $r0, -1 (0xffffffff);;
     _32(0x08003d00),        //cb.dnez $r0? 1857c <_fseeko_r+0x50c>;;
     _32(0xe1001d0e),        //addd $r0 = $r14, 116 (0x74)
     _32(0x3804160e),        //ld $r1 = 88 (0x58)[$r14];;
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x08800181),        //cb.deqz $r1? 181d4 <_fseeko_r+0x164>;;
     _32(0x080000c0),        //cb.dnez $r0? 181cc <_fseeko_r+0x15c>;;
     _32(0x9ffffdad),        //call 17878 <_free_r>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2701160e),        //sd 88 (0x58)[$r14] = $r0;;
     _32(0xe0000000),        //make $r0 = 0 (0x0)
     _32(0xe0080008),        //make $r2 = 8 (0x8)
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x280c040e),        //lhz $r3 = 16 (0x10)[$r14];;
     _32(0x3810060e),        //ld $r4 = 24 (0x18)[$r14];;
     _32(0xe100400e),        //addd $r0 = $r14, 256 (0x100)
     _32(0x2601020e),        //sw 8 (0x8)[$r14] = $r0;;
     _64(0xa711000ef80cf7c3),        //andw $r3 = $r3, -2081 (0xfffffffffffff7df)
     _32(0x07fffffd),        //sd 0 (0x0)[$r14] = $r4;;
     _32(0x98000521),        //call 19680 <memset>
     _32(0x250d040e),        //sh 16 (0x10)[$r14] = $r3;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b000140),        //cb.odd $r0? 1821c <_fseeko_r+0x1ac>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f8008000),        //andw $r0 = $r0, 512 (0x200);;
     _32(0x0c802480),        //cb.weqz $r0? 18460 <_fseeko_r+0x3f0>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840140c),        //ld $r16 = 80 (0x50)[$r12];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x3c540a0c),        //lo $r20r21r22r23 = 40 (0x28)[$r12];;
     _32(0x8fd00000),        //ret 
     _32(0xe130300c),        //addd $r12 = $r12, 192 (0xc0)
     _32(0x3860120c),        //ld $r24 = 72 (0x48)[$r12];;
     _32(0x9ffffb30),        //call 16f00 <_fflush_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000004f8040000),        //andw $r1 = $r0, 4096 (0x1000);;
     _32(0x0c001cc1),        //cb.wnez $r1? 18424 <_fseeko_r+0x3b4>;;
     _32(0x8fdc0015),        //icall $r21
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xe00c0001),        //make $r3 = 1 (0x1)
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _32(0xea580000),        //copyd $r22 = $r0
     _32(0x6001ffc0),        //compd.ne $r0 = $r0, -1 (0xffffffff);;
     _32(0x08803040),        //cb.deqz $r0? 1857c <_fseeko_r+0x50c>;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x3804060e),        //ld $r1 = 24 (0x18)[$r14];;
     _32(0x78080100),        //andw $r2 = $r0, 4 (0x4);;
     _32(0x0c801ac2),        //cb.weqz $r2? 18434 <_fseeko_r+0x3c4>;;
     _32(0x3800160e),        //ld $r0 = 88 (0x58)[$r14];;
     _32(0x3408020e),        //lws $r2 = 8 (0x8)[$r14];;
     _32(0x88800100),        //cb.deqz $r0? 182a4 <_fseeko_r+0x234>
     _32(0x75590582),        //sbfd $r22 = $r2, $r22;;
     _32(0x34081c0e),        //lws $r2 = 112 (0x70)[$r14];;
     _32(0x75590582),        //sbfd $r22 = $r2, $r22;;
     _32(0x887fea01),        //cb.dnez $r1? 18144 <_fseeko_r+0xd4>
     _32(0xea5c0014),        //copyd $r23 = $r20
     _32(0xf14d0593),        //addd $r19 = $r19, $r22
     _32(0x60500000),        //make $r20 = 0 (0x0);;
     _32(0x98000243),        //call 18bc0 <__smakebuf_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x17ffffa1),        //goto 18144 <_fseeko_r+0xd4>;;
     _32(0xe108160c),        //addd $r2 = $r12, 88 (0x58)
     _32(0x2c04048e),        //lhs $r1 = 18 (0x12)[$r14];;
     _32(0x0d7feac1),        //cb.wltz $r1? 18178 <_fseeko_r+0x108>;;
     _32(0x980000be),        //call 185c8 <_fstat_r>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x0c002380),        //cb.wnez $r0? 18510 <_fseeko_r+0x4a0>;;
     _32(0x3004170c),        //lwz $r1 = 92 (0x5c)[$r12];;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x0000003cf8040001),        //andw $r1 = $r1, 61440 (0xf000);;
     _64(0x00000400f105b001),        //compw.eq $r1 = $r1, 32768 (0x8000);;
     _32(0x0cffe841),        //cb.weqz $r1? 18178 <_fseeko_r+0x108>;;
     _32(0x60040400),        //make $r1 = 1024 (0x400);;
     _32(0xfa011040),        //orw $r0 = $r0, $r1
     _32(0x2605220e),        //sw 136 (0x88)[$r14] = $r1;;
     _32(0x2501040e),        //sh 16 (0x10)[$r14] = $r0;;
     _32(0x08001994),        //cb.dnez $r20? 184a0 <_fseeko_r+0x430>;;
     _32(0x88801657),        //cb.deqz $r23? 18470 <_fseeko_r+0x400>
     _32(0x6a600013),        //copyd $r24 = $r19;;
     _32(0x3804160e),        //ld $r1 = 88 (0x58)[$r14];;
     _32(0x08801b81),        //cb.deqz $r1? 184d0 <_fseeko_r+0x460>;;
     _32(0x34081c0e),        //lws $r2 = 112 (0x70)[$r14];;
     _32(0x380c1a0e),        //ld $r3 = 104 (0x68)[$r14];;
     _32(0x3810060e),        //ld $r4 = 24 (0x18)[$r14];;
     _32(0x3400020e),        //lws $r0 = 8 (0x8)[$r14];;
     _32(0x750d00c4),        //sbfd $r3 = $r4, $r3;;
     _32(0xf1590580),        //addd $r22 = $r0, $r22
     _32(0x710900c2),        //addd $r2 = $r2, $r3;;
     _32(0x75590583),        //sbfd $r22 = $r3, $r22;;
     _32(0x7201a598),        //compd.lt $r0 = $r24, $r22;;
     _32(0x08000100),        //cb.dnez $r0? 18350 <_fseeko_r+0x2e0>;;
     _32(0x71010096),        //addd $r0 = $r22, $r2;;
     _32(0x7801a600),        //compd.leu $r0 = $r0, $r24;;
     _32(0x08801cc0),        //cb.deqz $r0? 18518 <_fseeko_r+0x4a8>;;
     _32(0xe00c0000),        //make $r3 = 0 (0x0)
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x3058220e),        //lwz $r22 = 136 (0x88)[$r14];;
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _32(0x75580016),        //negw $r22 = $r22;;
     _32(0x695bf016),        //sxwd $r22 = $r22;;
     _32(0x78590616),        //andd $r22 = $r22, $r24;;
     _32(0x8fdc0015),        //icall $r21
     _32(0x6a080016),        //copyd $r2 = $r22;;
     _32(0xe101ffc0),        //compd.eq $r0 = $r0, -1 (0xffffffff)
     _32(0x60080000),        //make $r2 = 0 (0x0);;
     _32(0x087fe080),        //cb.dnez $r0? 18184 <_fseeko_r+0x114>;;
     _32(0x3804160e),        //ld $r1 = 88 (0x58)[$r14];;
     _32(0x3800060e),        //ld $r0 = 24 (0x18)[$r14];;
     _32(0x2609020e),        //sw 8 (0x8)[$r14] = $r2;;
     _32(0xe1001d0e),        //addd $r0 = $r14, 116 (0x74)
     _32(0x2701000e),        //sd 0 (0x0)[$r14] = $r0;;
     _32(0x888001c1),        //cb.deqz $r1? 183b0 <_fseeko_r+0x340>
     _32(0x7101a001),        //compd.eq $r0 = $r1, $r0;;
     _32(0x080000c0),        //cb.dnez $r0? 183a8 <_fseeko_r+0x338>;;
     _32(0x9ffffd36),        //call 17878 <_free_r>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2701160e),        //sd 88 (0x58)[$r14] = $r0;;
     _32(0xf5590616),        //sbfd $r22 = $r22, $r24
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x7800f7c0),        //andw $r0 = $r0, -33 (0xffffffdf);;
     _32(0x888003d6),        //cb.deqz $r22? 183f8 <_fseeko_r+0x388>
     _32(0x2501040e),        //sh 16 (0x10)[$r14] = $r0;;
     _32(0x980005d3),        //call 19b10 <__srefill_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x0c7fdb40),        //cb.wnez $r0? 18184 <_fseeko_r+0x114>;;
     _32(0x3004020e),        //lwz $r1 = 8 (0x8)[$r14];;
     _32(0xe903f001),        //sxwd $r0 = $r1
     _32(0x75051056),        //sbfw $r1 = $r22, $r1;;
     _32(0x7601a580),        //compd.ltu $r0 = $r0, $r22;;
     _32(0x087fda00),        //cb.dnez $r0? 18184 <_fseeko_r+0x114>;;
     _32(0x3860000e),        //ld $r24 = 0 (0x0)[$r14];;
     _32(0x2605020e),        //sw 8 (0x8)[$r14] = $r1;;
     _32(0x71590598),        //addd $r22 = $r24, $r22;;
     _32(0x2759000e),        //sd 0 (0x0)[$r14] = $r22;;
     _32(0x980004a2),        //call 19680 <memset>
     _32(0xe0080008),        //make $r2 = 8 (0x8)
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x6100400e),        //addd $r0 = $r14, 256 (0x100);;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0b7fe100),        //cb.odd $r0? 1821c <_fseeko_r+0x1ac>;;
     _32(0x17ffff7f),        //goto 1820c <_fseeko_r+0x19c>;;
     _32(0x9ffffabb),        //call 16f00 <_fflush_r>
     _32(0xea04000e),        //copyd $r1 = $r14
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x17ffff2a),        //goto 180c8 <_fseeko_r+0x58>;;
     _32(0xf8080100),        //andw $r2 = $r0, 4 (0x4)
     _32(0x3858240e),        //ld $r22 = 144 (0x90)[$r14];;
     _32(0x3804060e),        //ld $r1 = 24 (0x18)[$r14];;
     _32(0x0c7fe5c2),        //cb.wnez $r2? 1828c <_fseeko_r+0x21c>;;
     _32(0x78000200),        //andw $r0 = $r0, 8 (0x8);;
     _32(0x0cffe6c0),        //cb.weqz $r0? 182a4 <_fseeko_r+0x234>;;
     _32(0x3808000e),        //ld $r2 = 0 (0x0)[$r14];;
     _32(0x75010081),        //sbfd $r0 = $r1, $r2;;
     _32(0x71010016),        //addd $r0 = $r22, $r0;;
     _32(0x97ffff97),        //goto 182a4 <_fseeko_r+0x234>
     _32(0x705a0002),        //cmoved.dnez $r2? $r22 = $r0;;
     _32(0x98000138),        //call 18930 <__libc_lock_acquire>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x97ffff1a),        //goto 180c0 <_fseeko_r+0x50>
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0x98000178),        //call 18a40 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x97ffff6e),        //goto 18220 <_fseeko_r+0x1b0>
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000004f8000000),        //andw $r0 = $r0, 4096 (0x1000);;
     _32(0x0c800740),        //cb.weqz $r0? 184f0 <_fseeko_r+0x480>;;
     _32(0x3800240e),        //ld $r0 = 144 (0x90)[$r14];;
     _32(0x3804160e),        //ld $r1 = 88 (0x58)[$r14];;
     _32(0x3408020e),        //lws $r2 = 8 (0x8)[$r14];;
     _32(0x88800481),        //cb.deqz $r1? 184d4 <_fseeko_r+0x464>
     _32(0x75590002),        //sbfd $r22 = $r2, $r0;;
     _32(0x34081c0e),        //lws $r2 = 112 (0x70)[$r14];;
     _32(0x97ffffa2),        //goto 18320 <_fseeko_r+0x2b0>
     _32(0x75590582),        //sbfd $r22 = $r2, $r22;;
     _32(0x9800004a),        //call 185c8 <_fstat_r>
     _32(0xe108160c),        //addd $r2 = $r12, 88 (0x58)
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x2c04048e),        //lhs $r1 = 18 (0x12)[$r14];;
     _32(0x0c7fcd40),        //cb.wnez $r0? 18184 <_fseeko_r+0x114>;;
     _32(0x38601a0c),        //ld $r24 = 104 (0x68)[$r12];;
     _32(0x887fe5d7),        //cb.dnez $r23? 18314 <_fseeko_r+0x2a4>
     _32(0x71610613),        //addd $r24 = $r19, $r24;;
     _32(0x17ffffec),        //goto 18470 <_fseeko_r+0x400>;;
     _32(0x9800015f),        //call 18a40 <__libc_lock_release>
     _32(0x6100300e),        //addd $r0 = $r14, 192 (0xc0);;
     _32(0x17ffff0f),        //goto 18108 <_fseeko_r+0x98>;;
     _32(0x3408020e),        //lws $r2 = 8 (0x8)[$r14];;
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0x3800000e),        //ld $r0 = 0 (0x0)[$r14];;
     _32(0x3810060e),        //ld $r4 = 24 (0x18)[$r14];;
     _32(0x75010004),        //sbfd $r0 = $r4, $r0;;
     _32(0x97ffff96),        //goto 1833c <_fseeko_r+0x2cc>
     _32(0xf5590580),        //sbfd $r22 = $r0, $r22
     _32(0x71090002),        //addd $r2 = $r2, $r0;;
     _32(0x8fdc0015),        //icall $r21
     _32(0xe00c0001),        //make $r3 = 1 (0x1)
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xea000012),        //copyd $r0 = $r18
     _32(0x38040c0e),        //ld $r1 = 48 (0x30)[$r14];;
     _32(0x6105ffc0),        //compd.eq $r1 = $r0, -1 (0xffffffff);;
     _32(0x08fff7c1),        //cb.deqz $r1? 18484 <_fseeko_r+0x414>;;
     _32(0x17ffff1e),        //goto 18184 <_fseeko_r+0x114>;;
     _32(0x97ffff1a),        //goto 18178 <_fseeko_r+0x108>
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _32(0xf5011616),        //sbfw $r0 = $r22, $r24
     _32(0x71591096),        //addw $r22 = $r22, $r2;;
     _32(0xf8114100),        //addwd $r4 = $r0, $r4
     _32(0xe1001d0e),        //addd $r0 = $r14, 116 (0x74)
     _32(0x75611598),        //sbfw $r24 = $r24, $r22;;
     _32(0xf101a001),        //compd.eq $r0 = $r1, $r0
     _32(0x2711000e),        //sd 0 (0x0)[$r14] = $r4;;
     _32(0x888001c1),        //cb.deqz $r1? 18550 <_fseeko_r+0x4e0>
     _32(0x2661020e),        //sw 8 (0x8)[$r14] = $r24;;
     _32(0x080000c0),        //cb.dnez $r0? 18548 <_fseeko_r+0x4d8>;;
     _32(0x9ffffcce),        //call 17878 <_free_r>
     _32(0x6a000012),        //copyd $r0 = $r18;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2701160e),        //sd 88 (0x58)[$r14] = $r0;;
     _32(0xe0080008),        //make $r2 = 8 (0x8)
     _32(0xe0040000),        //make $r1 = 0 (0x0)
     _32(0xe100400e),        //addd $r0 = $r14, 256 (0x100)
     _32(0x280c040e),        //lhz $r3 = 16 (0x10)[$r14];;
     _32(0x780cf7c3),        //andw $r3 = $r3, -33 (0xffffffdf);;
     _32(0x98000447),        //call 19680 <memset>
     _32(0x250d040e),        //sh 16 (0x10)[$r14] = $r3;;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0bffc9c0),        //cb.even $r0? 1820c <_fseeko_r+0x19c>;;
     _32(0x97ffff2b),        //goto 18220 <_fseeko_r+0x1b0>
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x0bffb780),        //cb.even $r0? 180f8 <_fseeko_r+0x88>;;
     _32(0x17fffee1),        //goto 18108 <_fseeko_r+0x98>;;
     _32(0xe004001d),        //make $r1 = 29 (0x1d)
     _32(0x3000420e),        //lwz $r0 = 264 (0x108)[$r14];;
     _32(0x26050012),        //sw 0 (0x0)[$r18] = $r1;;
     _32(0x0bffb640),        //cb.even $r0? 180f8 <_fseeko_r+0x88>;;
     _32(0x17fffedc),        //goto 18108 <_fseeko_r+0x98>;;
     _32(0x7f03f000)        //nop ;;
 |];

let fseeko: list_I = 
 [|
     _32(0xea100000),        //copyd $r4 = $r0
     _32(0xfa0c0002),        //copyw $r3 = $r2
     _32(0xea080001),        //copyd $r2 = $r1
     _96(0x1800000098000118e0001000),        //make $r0 = 286784 (0x46040);;
     _32(0x97fffeae),        //goto 18070 <_fseeko_r>
     _32(0xea040004),        //copyd $r1 = $r4
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x00000000)        //errop ;;
 |];

let _fstat_r: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x780cffc1),        //zxwd $r3 = $r1;;
     _32(0xea040002),        //copyd $r1 = $r2
     _32(0xe0080000),        //make $r2 = 0 (0x0)
     _32(0xea380000),        //copyd $r14 = $r0
     _32(0x2739020c),        //sd 8 (0x8)[$r12] = $r14;;
     _32(0xfa000003),        //copyw $r0 = $r3
     _96(0x8800013da749040ce0483000),        //make $r18 = 324800 (0x4f4c0)
     _32(0x08000000),        //sd 16 (0x10)[$r12] = $r18;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98005001),        //call 2c600 <_fstat>
     _32(0x26090012),        //sw 0 (0x0)[$r18] = $r2;;
     _64(0x07fffffff005b7c0),        //compw.ne $r1 = $r0, 4294967295 (0xffffffff);;
     _32(0x0c8001c1),        //cb.weqz $r1? 18628 <_fstat_r+0x60>;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x30040012),        //lwz $r1 = 0 (0x0)[$r18];;
     _32(0x08fffe41),        //cb.deqz $r1? 18610 <_fstat_r+0x48>;;
     _32(0x2605000e),        //sw 0 (0x0)[$r14] = $r1;;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x3838020c),        //ld $r14 = 8 (0x8)[$r12];;
     _32(0xe130080c),        //addd $r12 = $r12, 32 (0x20)
     _32(0x3848040c),        //ld $r18 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let _fwalk: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0xea540001),        //copyd $r21 = $r1
     _64(0xa8510a0ce1504800),        //addd $r20 = $r0, 1312 (0x520)
     _32(0x08000001),        //sq 40 (0x28)[$r12] = $r20r21;;
     _32(0xe04c0000),        //make $r19 = 0 (0x0)
     _32(0x2849060c),        //sq 24 (0x18)[$r12] = $r18r19;;
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x27410e0c),        //sd 56 (0x38)[$r12] = $r16;;
     _32(0x30000214),        //lwz $r0 = 8 (0x8)[$r20];;
     _32(0x38380414),        //ld $r14 = 16 (0x10)[$r20];;
     _32(0x0e000500),        //cb.wlez $r0? 186d0 <_fwalk+0x80>;;
     _32(0x7100ffc0),        //addw $r0 = $r0, -1 (0xffffffff);;
     _32(0x61000040),        //addd $r0 = $r0, 1 (0x1);;
     _32(0x72014000),        //addx4d $r0 = $r0, $r0;;
     _32(0x794a2180),        //slld $r18 = $r0, 6 (0x6);;
     _32(0x7149048e),        //addd $r18 = $r14, $r18;;
     _32(0x2800040e),        //lhz $r0 = 16 (0x10)[$r14];;
     _64(0x00000000f801b040),        //compw.leu $r0 = $r0, 1 (0x1);;
     _32(0x0c000200),        //cb.wnez $r0? 186c4 <_fwalk+0x74>;;
     _32(0xea00000e),        //copyd $r0 = $r14
     _32(0x2c08048e),        //lhs $r2 = 18 (0x12)[$r14];;
     _64(0x07fffffff109b7c2),        //compw.eq $r2 = $r2, 4294967295 (0xffffffff);;
     _32(0x0c0000c2),        //cb.wnez $r2? 186c4 <_fwalk+0x74>;;
     _32(0x0fdc0015),        //icall $r21;;
     _32(0x7a4d14c0),        //orw $r19 = $r0, $r19;;
     _32(0x6138500e),        //addd $r14 = $r14, 320 (0x140);;
     _32(0x7001a392),        //compd.ne $r0 = $r18, $r14;;
     _32(0x087ffcc0),        //cb.dnez $r0? 18698 <_fwalk+0x48>;;
     _32(0x38500014),        //ld $r20 = 0 (0x0)[$r20];;
     _32(0x087ffa54),        //cb.dnez $r20? 18678 <_fwalk+0x28>;;
     _32(0xfa000013),        //copyw $r0 = $r19
     _32(0x38400e0c),        //ld $r16 = 56 (0x38)[$r12];;
     _32(0x3838040c),        //ld $r14 = 16 (0x10)[$r12];;
     _32(0x3c48060c),        //lq $r18r19 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x8fd00000),        //ret 
     _32(0xe130100c),        //addd $r12 = $r12, 64 (0x40)
     _32(0x3c500a0c)        //lq $r20r21 = 40 (0x28)[$r12];;
 |];

let adr_start:bits(addr_bits) = 0b00010110100010001000; //0x16888
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(user_print, 0b00010110100000100000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110100010001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110101010010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fclose_r, 0b00010110101010110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fclose, 0b00010110110001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sflush_r, 0b00010110110001110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fflush_r, 0b00010110111100000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fflush, 0b00010110111111100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(std, 0b00010111000000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_cleanup_r, 0b00010111000011001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__fp_lock, 0b00010111000011011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__fp_unlock, 0b00010111000100110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sfmoreglue, 0b00010111000110001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_cleanup, 0b00010111001000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sinit, 0b00010111001000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sfp, 0b00010111001100000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sfp_lock_acquire, 0b00010111010001010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sfp_lock_release, 0b00010111010001100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sinit_lock_acquire, 0b00010111010001110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__sinit_lock_release, 0b00010111010010000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__fp_lock_all, 0b00010111010010010000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__fp_unlock_all, 0b00010111010011011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__libc_fini_array, 0b00010111010100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fopen_r, 0b00010111010110000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fopen, 0b00010111011100000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_malloc_trim_r, 0b00010111011100100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_free_r, 0b00010111100001111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_freopen_r, 0b00010111110001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(freopen, 0b00010111111101111000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fscanf, 0b00010111111110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fscanf_r, 0b00011000000000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fseek_r, 0b00011000000001000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fseek, 0b00011000000001001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fseeko_r, 0b00011000000001110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(fseeko, 0b00011000010110100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fstat_r, 0b00011000010111001000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(_fwalk, 0b00011000011001010000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016888;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
