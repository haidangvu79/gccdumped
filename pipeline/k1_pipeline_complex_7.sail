// executing pipeline complex_7 test 
val k1_pipeline_complex_7: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_complex_7() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let check_float: list_I = 
 [|
     _32(0x6130e80c),        //addd $r12 = $r12, -96 (0xffffffa0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x26010c0c),        //sw 48 (0x30)[$r12] = $r0;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x2709080c),        //sd 32 (0x20)[$r12] = $r2;;
     _32(0x270d060c),        //sd 24 (0x18)[$r12] = $r3;;
     _32(0x2711040c),        //sd 16 (0x10)[$r12] = $r4;;
     _32(0x2715020c),        //sd 8 (0x8)[$r12] = $r5;;
     _32(0x30000a0c),        //lwz $r0 = 40 (0x28)[$r12];;
     _32(0x2601170c),        //sw 92 (0x5c)[$r12] = $r0;;
     _32(0x30000b0c),        //lwz $r0 = 44 (0x2c)[$r12];;
     _32(0x2601160c),        //sw 88 (0x58)[$r12] = $r0;;
     _32(0x3000080c),        //lwz $r0 = 32 (0x20)[$r12];;
     _32(0x2601150c),        //sw 84 (0x54)[$r12] = $r0;;
     _32(0x3000090c),        //lwz $r0 = 36 (0x24)[$r12];;
     _32(0x2601140c),        //sw 80 (0x50)[$r12] = $r0;;
     _32(0x3000060c),        //lwz $r0 = 24 (0x18)[$r12];;
     _32(0x2601130c),        //sw 76 (0x4c)[$r12] = $r0;;
     _32(0x3000070c),        //lwz $r0 = 28 (0x1c)[$r12];;
     _32(0x2601120c),        //sw 72 (0x48)[$r12] = $r0;;
     _32(0x3000040c),        //lwz $r0 = 16 (0x10)[$r12];;
     _32(0x2601110c),        //sw 68 (0x44)[$r12] = $r0;;
     _32(0x3000050c),        //lwz $r0 = 20 (0x14)[$r12];;
     _32(0x2601100c),        //sw 64 (0x40)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x26010f0c),        //sw 60 (0x3c)[$r12] = $r0;;
     _32(0x3000030c),        //lwz $r0 = 12 (0xc)[$r12];;
     _32(0x26010e0c),        //sw 56 (0x38)[$r12] = $r0;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x30000100),        //lwz $r0 = 4 (0x4)[$r0];;
     _32(0x7a080000),        //copyw $r2 = $r0;;
     _32(0x3000170c),        //lwz $r0 = 92 (0x5c)[$r12];;
     _32(0x73030040),        //fcompw.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000160c),        //lwz $r0 = 88 (0x58)[$r12];;
     _32(0x73030080),        //fcompw.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c001140),        //cb.wnez $r0? 169e8 <check_float+0x1c8>;;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x30000100),        //lwz $r0 = 4 (0x4)[$r0];;
     _32(0x7a080000),        //copyw $r2 = $r0;;
     _32(0x3000150c),        //lwz $r0 = 84 (0x54)[$r12];;
     _32(0x73030040),        //fcompw.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000140c),        //lwz $r0 = 80 (0x50)[$r12];;
     _32(0x73030080),        //fcompw.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000d00),        //cb.wnez $r0? 169e8 <check_float+0x1c8>;;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x30000100),        //lwz $r0 = 4 (0x4)[$r0];;
     _32(0x7a080000),        //copyw $r2 = $r0;;
     _32(0x3000130c),        //lwz $r0 = 76 (0x4c)[$r12];;
     _32(0x73030040),        //fcompw.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000120c),        //lwz $r0 = 72 (0x48)[$r12];;
     _32(0x73030080),        //fcompw.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c0008c0),        //cb.wnez $r0? 169e8 <check_float+0x1c8>;;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x30000100),        //lwz $r0 = 4 (0x4)[$r0];;
     _32(0x7a080000),        //copyw $r2 = $r0;;
     _32(0x3000110c),        //lwz $r0 = 68 (0x44)[$r12];;
     _32(0x73030040),        //fcompw.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3000100c),        //lwz $r0 = 64 (0x40)[$r12];;
     _32(0x73030080),        //fcompw.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000480),        //cb.wnez $r0? 169e8 <check_float+0x1c8>;;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x30040000),        //lwz $r1 = 0 (0x0)[$r0];;
     _32(0x30000100),        //lwz $r0 = 4 (0x4)[$r0];;
     _32(0x7a080000),        //copyw $r2 = $r0;;
     _32(0x30000f0c),        //lwz $r0 = 60 (0x3c)[$r12];;
     _32(0x73030040),        //fcompw.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x30000e0c),        //lwz $r0 = 56 (0x38)[$r12];;
     _32(0x73030080),        //fcompw.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f001b040),        //compw.ne $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 169ec <check_float+0x1cc>;;
     _32(0x18000182),        //call 16ff0 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130180c),        //addd $r12 = $r12, 96 (0x60);;
     _32(0x0fd00000)        //ret ;;
 |];

let check_double: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x26011a0c),        //sw 104 (0x68)[$r12] = $r0;;
     _32(0x2705160c),        //sd 88 (0x58)[$r12] = $r1;;
     _32(0x2709180c),        //sd 96 (0x60)[$r12] = $r2;;
     _32(0x270d120c),        //sd 72 (0x48)[$r12] = $r3;;
     _32(0x2711140c),        //sd 80 (0x50)[$r12] = $r4;;
     _32(0x27150e0c),        //sd 56 (0x38)[$r12] = $r5;;
     _32(0x2719100c),        //sd 64 (0x40)[$r12] = $r6;;
     _32(0x271d0a0c),        //sd 40 (0x28)[$r12] = $r7;;
     _32(0x27210c0c),        //sd 48 (0x30)[$r12] = $r8;;
     _32(0x2725060c),        //sd 24 (0x18)[$r12] = $r9;;
     _32(0x2729080c),        //sd 32 (0x20)[$r12] = $r10;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x27012e0c),        //sd 184 (0xb8)[$r12] = $r0;;
     _32(0x3800180c),        //ld $r0 = 96 (0x60)[$r12];;
     _32(0x27012c0c),        //sd 176 (0xb0)[$r12] = $r0;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x27012a0c),        //sd 168 (0xa8)[$r12] = $r0;;
     _32(0x3800140c),        //ld $r0 = 80 (0x50)[$r12];;
     _32(0x2701280c),        //sd 160 (0xa0)[$r12] = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x2701260c),        //sd 152 (0x98)[$r12] = $r0;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x2701240c),        //sd 144 (0x90)[$r12] = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x2701220c),        //sd 136 (0x88)[$r12] = $r0;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x2701200c),        //sd 128 (0x80)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x27011c0c),        //sd 112 (0x70)[$r12] = $r0;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x38002e0c),        //ld $r0 = 184 (0xb8)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x38002c0c),        //ld $r0 = 176 (0xb0)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c001140),        //cb.wnez $r0? 16bdc <check_double+0x1dc>;;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x38002a0c),        //ld $r0 = 168 (0xa8)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3800280c),        //ld $r0 = 160 (0xa0)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000d00),        //cb.wnez $r0? 16bdc <check_double+0x1dc>;;
     _96(0x00000000800000fce0001400),        //make $r0 = 258128 (0x3f050);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3800260c),        //ld $r0 = 152 (0x98)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3800240c),        //ld $r0 = 144 (0x90)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c0008c0),        //cb.wnez $r0? 16bdc <check_double+0x1dc>;;
     _96(0x00000000800000fce0001800),        //make $r0 = 258144 (0x3f060);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3800220c),        //ld $r0 = 136 (0x88)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3800200c),        //ld $r0 = 128 (0x80)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000480),        //cb.wnez $r0? 16bdc <check_double+0x1dc>;;
     _96(0x00000000800000fce0001c00),        //make $r0 = 258160 (0x3f070);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x38001c0c),        //ld $r0 = 112 (0x70)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f001b040),        //compw.ne $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16be0 <check_double+0x1e0>;;
     _32(0x18000105),        //call 16ff0 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let check_long_double: list_I = 
 [|
     _32(0x6130d00c),        //addd $r12 = $r12, -192 (0xffffff40);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741040c),        //sd 16 (0x10)[$r12] = $r16;;
     _32(0x26011a0c),        //sw 104 (0x68)[$r12] = $r0;;
     _32(0x2705160c),        //sd 88 (0x58)[$r12] = $r1;;
     _32(0x2709180c),        //sd 96 (0x60)[$r12] = $r2;;
     _32(0x270d120c),        //sd 72 (0x48)[$r12] = $r3;;
     _32(0x2711140c),        //sd 80 (0x50)[$r12] = $r4;;
     _32(0x27150e0c),        //sd 56 (0x38)[$r12] = $r5;;
     _32(0x2719100c),        //sd 64 (0x40)[$r12] = $r6;;
     _32(0x271d0a0c),        //sd 40 (0x28)[$r12] = $r7;;
     _32(0x27210c0c),        //sd 48 (0x30)[$r12] = $r8;;
     _32(0x2725060c),        //sd 24 (0x18)[$r12] = $r9;;
     _32(0x2729080c),        //sd 32 (0x20)[$r12] = $r10;;
     _32(0x3800160c),        //ld $r0 = 88 (0x58)[$r12];;
     _32(0x27012e0c),        //sd 184 (0xb8)[$r12] = $r0;;
     _32(0x3800180c),        //ld $r0 = 96 (0x60)[$r12];;
     _32(0x27012c0c),        //sd 176 (0xb0)[$r12] = $r0;;
     _32(0x3800120c),        //ld $r0 = 72 (0x48)[$r12];;
     _32(0x27012a0c),        //sd 168 (0xa8)[$r12] = $r0;;
     _32(0x3800140c),        //ld $r0 = 80 (0x50)[$r12];;
     _32(0x2701280c),        //sd 160 (0xa0)[$r12] = $r0;;
     _32(0x38000e0c),        //ld $r0 = 56 (0x38)[$r12];;
     _32(0x2701260c),        //sd 152 (0x98)[$r12] = $r0;;
     _32(0x3800100c),        //ld $r0 = 64 (0x40)[$r12];;
     _32(0x2701240c),        //sd 144 (0x90)[$r12] = $r0;;
     _32(0x38000a0c),        //ld $r0 = 40 (0x28)[$r12];;
     _32(0x2701220c),        //sd 136 (0x88)[$r12] = $r0;;
     _32(0x38000c0c),        //ld $r0 = 48 (0x30)[$r12];;
     _32(0x2701200c),        //sd 128 (0x80)[$r12] = $r0;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x27011e0c),        //sd 120 (0x78)[$r12] = $r0;;
     _32(0x3800080c),        //ld $r0 = 32 (0x20)[$r12];;
     _32(0x27011c0c),        //sd 112 (0x70)[$r12] = $r0;;
     _96(0x00000000800000fce0002000),        //make $r0 = 258176 (0x3f080);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x38002e0c),        //ld $r0 = 184 (0xb8)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x38002c0c),        //ld $r0 = 176 (0xb0)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c001140),        //cb.wnez $r0? 16dd4 <check_long_double+0x1dc>;;
     _96(0x00000000800000fce0002400),        //make $r0 = 258192 (0x3f090);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x38002a0c),        //ld $r0 = 168 (0xa8)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3800280c),        //ld $r0 = 160 (0xa0)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000d00),        //cb.wnez $r0? 16dd4 <check_long_double+0x1dc>;;
     _96(0x00000000800000fce0002800),        //make $r0 = 258208 (0x3f0a0);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3800260c),        //ld $r0 = 152 (0x98)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3800240c),        //ld $r0 = 144 (0x90)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c0008c0),        //cb.wnez $r0? 16dd4 <check_long_double+0x1dc>;;
     _96(0x00000000800000fce0002c00),        //make $r0 = 258224 (0x3f0b0);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x3800220c),        //ld $r0 = 136 (0x88)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x3800200c),        //ld $r0 = 128 (0x80)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000480),        //cb.wnez $r0? 16dd4 <check_long_double+0x1dc>;;
     _96(0x00000000800000fce0003000),        //make $r0 = 258240 (0x3f0c0);;
     _32(0x38040000),        //ld $r1 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _32(0x38001e0c),        //ld $r0 = 120 (0x78)[$r12];;
     _32(0x7b030040),        //fcompd.une $r0 = $r0, $r1;;
     _32(0x78043fc0),        //zxbd $r1 = $r0;;
     _32(0x38001c0c),        //ld $r0 = 112 (0x70)[$r12];;
     _32(0x7b030080),        //fcompd.une $r0 = $r0, $r2;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x7a011001),        //orw $r0 = $r1, $r0;;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _64(0x00000000f001b040),        //compw.ne $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16dd8 <check_long_double+0x1e0>;;
     _32(0x18000087),        //call 16ff0 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840040c),        //ld $r16 = 16 (0x10)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130300c),        //addd $r12 = $r12, 192 (0xc0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _96(0x00000000800000fce0000200),        //make $r0 = 258056 (0x3f008);;
     _32(0x301c0000),        //lwz $r7 = 0 (0x0)[$r0];;
     _32(0x30180100),        //lwz $r6 = 4 (0x4)[$r0];;
     _96(0x00000000800000fce0000400),        //make $r0 = 258064 (0x3f010);;
     _32(0x30200000),        //lwz $r8 = 0 (0x0)[$r0];;
     _32(0x30040100),        //lwz $r1 = 4 (0x4)[$r0];;
     _96(0x00000000800000fce0000600),        //make $r0 = 258072 (0x3f018);;
     _32(0x30240000),        //lwz $r9 = 0 (0x0)[$r0];;
     _32(0x30080100),        //lwz $r2 = 4 (0x4)[$r0];;
     _96(0x00000000800000fce0000800),        //make $r0 = 258080 (0x3f020);;
     _32(0x30280000),        //lwz $r10 = 0 (0x0)[$r0];;
     _32(0x300c0100),        //lwz $r3 = 4 (0x4)[$r0];;
     _96(0x00000000800000fce0000a00),        //make $r0 = 258088 (0x3f028);;
     _32(0x302c0000),        //lwz $r11 = 0 (0x0)[$r0];;
     _32(0x30100100),        //lwz $r4 = 4 (0x4)[$r0];;
     _32(0x7a00000b),        //copyw $r0 = $r11;;
     _32(0x6117f000),        //insf $r5 = $r0, 31 (0x1f), 0 (0x0);;
     _32(0x7a000004),        //copyw $r0 = $r4;;
     _32(0x6317f800),        //insf $r5 = $r0, 63 (0x3f), 32 (0x20);;
     _32(0x7a00000a),        //copyw $r0 = $r10;;
     _32(0x6113f000),        //insf $r4 = $r0, 31 (0x1f), 0 (0x0);;
     _32(0x7a000003),        //copyw $r0 = $r3;;
     _32(0x6313f800),        //insf $r4 = $r0, 63 (0x3f), 32 (0x20);;
     _32(0x7a000009),        //copyw $r0 = $r9;;
     _32(0x610ff000),        //insf $r3 = $r0, 31 (0x1f), 0 (0x0);;
     _32(0x7a000002),        //copyw $r0 = $r2;;
     _32(0x630ff800),        //insf $r3 = $r0, 63 (0x3f), 32 (0x20);;
     _32(0x7a000008),        //copyw $r0 = $r8;;
     _32(0x610bf000),        //insf $r2 = $r0, 31 (0x1f), 0 (0x0);;
     _32(0x7a000001),        //copyw $r0 = $r1;;
     _32(0x630bf800),        //insf $r2 = $r0, 63 (0x3f), 32 (0x20);;
     _32(0x7a000007),        //copyw $r0 = $r7;;
     _32(0x6107f000),        //insf $r1 = $r0, 31 (0x1f), 0 (0x0);;
     _32(0x7a000006),        //copyw $r0 = $r6;;
     _32(0x6307f800),        //insf $r1 = $r0, 63 (0x3f), 32 (0x20);;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe5a),        //call 16820 <check_float>;;
     _96(0x00000000800000fce0000c00),        //make $r0 = 258096 (0x3f030);;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _32(0x382c0200),        //ld $r11 = 8 (0x8)[$r0];;
     _96(0x00000000800000fce0001000),        //make $r0 = 258112 (0x3f040);;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _32(0x38040200),        //ld $r1 = 8 (0x8)[$r0];;
     _96(0x00000000800000fce0001400),        //make $r0 = 258128 (0x3f050);;
     _32(0x38100000),        //ld $r4 = 0 (0x0)[$r0];;
     _32(0x380c0200),        //ld $r3 = 8 (0x8)[$r0];;
     _96(0x00000000800000fce0001800),        //make $r0 = 258144 (0x3f060);;
     _32(0x38180000),        //ld $r6 = 0 (0x0)[$r0];;
     _32(0x38140200),        //ld $r5 = 8 (0x8)[$r0];;
     _96(0x00000000800000fce0001c00),        //make $r0 = 258160 (0x3f070);;
     _32(0x381c0000),        //ld $r7 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a240007),        //copyd $r9 = $r7;;
     _32(0x6a280000),        //copyd $r10 = $r0;;
     _32(0x6a1c0006),        //copyd $r7 = $r6;;
     _32(0x6a200005),        //copyd $r8 = $r5;;
     _32(0x6a140004),        //copyd $r5 = $r4;;
     _32(0x6a180003),        //copyd $r6 = $r3;;
     _32(0x6a0c0002),        //copyd $r3 = $r2;;
     _32(0x6a100001),        //copyd $r4 = $r1;;
     _32(0x6a04000e),        //copyd $r1 = $r14;;
     _32(0x6a08000b),        //copyd $r2 = $r11;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffead),        //call 16a00 <check_double>;;
     _96(0x00000000800000fce0002000),        //make $r0 = 258176 (0x3f080);;
     _32(0x38380000),        //ld $r14 = 0 (0x0)[$r0];;
     _32(0x382c0200),        //ld $r11 = 8 (0x8)[$r0];;
     _96(0x00000000800000fce0002400),        //make $r0 = 258192 (0x3f090);;
     _32(0x38080000),        //ld $r2 = 0 (0x0)[$r0];;
     _32(0x38040200),        //ld $r1 = 8 (0x8)[$r0];;
     _96(0x00000000800000fce0002800),        //make $r0 = 258208 (0x3f0a0);;
     _32(0x38100000),        //ld $r4 = 0 (0x0)[$r0];;
     _32(0x380c0200),        //ld $r3 = 8 (0x8)[$r0];;
     _96(0x00000000800000fce0002c00),        //make $r0 = 258224 (0x3f0b0);;
     _32(0x38180000),        //ld $r6 = 0 (0x0)[$r0];;
     _32(0x38140200),        //ld $r5 = 8 (0x8)[$r0];;
     _96(0x00000000800000fce0003000),        //make $r0 = 258240 (0x3f0c0);;
     _32(0x381c0000),        //ld $r7 = 0 (0x0)[$r0];;
     _32(0x38000200),        //ld $r0 = 8 (0x8)[$r0];;
     _32(0x6a240007),        //copyd $r9 = $r7;;
     _32(0x6a280000),        //copyd $r10 = $r0;;
     _32(0x6a1c0006),        //copyd $r7 = $r6;;
     _32(0x6a200005),        //copyd $r8 = $r5;;
     _32(0x6a140004),        //copyd $r5 = $r4;;
     _32(0x6a180003),        //copyd $r6 = $r3;;
     _32(0x6a0c0002),        //copyd $r3 = $r2;;
     _32(0x6a100001),        //copyd $r4 = $r1;;
     _32(0x6a04000e),        //copyd $r1 = $r14;;
     _32(0x6a08000b),        //copyd $r2 = $r11;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1fffff06),        //call 16bf8 <check_long_double>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1800000a),        //call 17010 <exit>;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x98000105),        //call 17410 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98000839),        //call 190e8 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let exit: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0xf838ffc0),        //zxwd $r14 = $r0
     _32(0x2739040c),        //sd 16 (0x10)[$r12] = $r14;;
     _32(0x98000161),        //call 175a8 <__call_exitprocs>
     _32(0xfa00000e),        //copyw $r0 = $r14
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _96(0x0000000080000101e0002000),        //make $r0 = 263296 (0x40480);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x38041600),        //ld $r1 = 88 (0x58)[$r0];;
     _32(0x08800081),        //cb.deqz $r1? 1704c <exit+0x3c>;;
     _32(0x0fdc0001),        //icall $r1;;
     _32(0x98000827),        //call 190e8 <_exit>
     _32(0x7a00000e),        //copyw $r0 = $r14;;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110110111110000; //0x16df0
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(check_float, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(check_double, 0b00010110101000000000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(check_long_double, 0b00010110101111111000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110110111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010110111111110000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(exit, 0b00010111000000010000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016df0;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
