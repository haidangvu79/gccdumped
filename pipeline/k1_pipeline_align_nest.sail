// executing pipeline align_nest test 
val k1_pipeline_align_nest: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_align_nest() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let foo: list_I = 
 [|
     _32(0x6130d80c),        //addd $r12 = $r12, -160 (0xffffff60);;
     _32(0x2739000c),        //sd 0 (0x0)[$r12] = $r14;;
     _32(0x2849040c),        //sq 16 (0x10)[$r12] = $r18r19;;
     _32(0x2855080c),        //so 32 (0x20)[$r12] = $r20r21r22r23;;
     _32(0x2865100c),        //so 64 (0x40)[$r12] = $r24r25r26r27;;
     _32(0x2875180c),        //so 96 (0x60)[$r12] = $r28r29r30r31;;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741020c),        //sd 8 (0x8)[$r12] = $r16;;
     _32(0x6138000c),        //addd $r14 = $r12, 0 (0x0);;
     _32(0x2601200e),        //sw 128 (0x80)[$r14] = $r0;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x6aa80000),        //copyd $r42 = $r0;;
     _32(0x303c200e),        //lwz $r15 = 128 (0x80)[$r14];;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x6a780000),        //copyd $r30 = $r0;;
     _32(0x607c0000),        //make $r31 = 0 (0x0);;
     _32(0x7b022ede),        //srld $r0 = $r30, 59 (0x3b);;
     _32(0x799e215f),        //slld $r39 = $r31, 5 (0x5);;
     _32(0x7a9d09c0),        //ord $r39 = $r0, $r39;;
     _32(0x799a215e),        //slld $r38 = $r30, 5 (0x5);;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x6100ffc0),        //addd $r0 = $r0, -1 (0xffffffff);;
     _32(0x2701260e),        //sd 152 (0x98)[$r14] = $r0;;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x6a700000),        //copyd $r28 = $r0;;
     _32(0x60740000),        //make $r29 = 0 (0x0);;
     _32(0x7b022edc),        //srld $r0 = $r28, 59 (0x3b);;
     _32(0x7996215d),        //slld $r37 = $r29, 5 (0x5);;
     _32(0x7a950940),        //ord $r37 = $r0, $r37;;
     _32(0x7992215c),        //slld $r36 = $r28, 5 (0x5);;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x61700040),        //addd $r28 = $r0, 1 (0x1);;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x61000140),        //addd $r0 = $r0, 5 (0x5);;
     _32(0x6a680000),        //copyd $r26 = $r0;;
     _32(0x606c0000),        //make $r27 = 0 (0x0);;
     _32(0x7b022f5a),        //srld $r0 = $r26, 61 (0x3d);;
     _32(0x791e20db),        //slld $r7 = $r27, 3 (0x3);;
     _32(0x7a1d01c0),        //ord $r7 = $r0, $r7;;
     _32(0x791a20da),        //slld $r6 = $r26, 3 (0x3);;
     _32(0x6000001f),        //make $r0 = 31 (0x1f);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x7e51d006),        //addcd.i $r20 = $r6, $r0;;
     _32(0x7e55c047),        //addcd $r21 = $r7, $r1;;
     _32(0x68a0f814),        //andd $r40 = $r20, -32 (0xffffffe0);;
     _32(0x68a4ffd5),        //andd $r41 = $r21, -1 (0xffffffff);;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x61000080),        //addd $r0 = $r0, 2 (0x2);;
     _32(0x791a2080),        //slld $r6 = $r0, 2 (0x2);;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x61000140),        //addd $r0 = $r0, 5 (0x5);;
     _32(0x6a600000),        //copyd $r24 = $r0;;
     _32(0x60640000),        //make $r25 = 0 (0x0);;
     _32(0x7b022f58),        //srld $r0 = $r24, 61 (0x3d);;
     _32(0x791620d9),        //slld $r5 = $r25, 3 (0x3);;
     _32(0x7a150140),        //ord $r5 = $r0, $r5;;
     _32(0x791220d8),        //slld $r4 = $r24, 3 (0x3);;
     _32(0x6000001f),        //make $r0 = 31 (0x1f);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x7e49d004),        //addcd.i $r18 = $r4, $r0;;
     _32(0x7e4dc045),        //addcd $r19 = $r5, $r1;;
     _32(0x6828f812),        //andd $r10 = $r18, -32 (0xffffffe0);;
     _32(0x682cffd3),        //andd $r11 = $r19, -1 (0xffffffff);;
     _32(0x7b022fca),        //srld $r0 = $r10, 63 (0x3f);;
     _32(0x798e204b),        //slld $r35 = $r11, 1 (0x1);;
     _32(0x7a8d08c0),        //ord $r35 = $r0, $r35;;
     _32(0x798a204a),        //slld $r34 = $r10, 1 (0x1);;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x61000140),        //addd $r0 = $r0, 5 (0x5);;
     _32(0x6a580000),        //copyd $r22 = $r0;;
     _32(0x605c0000),        //make $r23 = 0 (0x0);;
     _32(0x7b022f56),        //srld $r0 = $r22, 61 (0x3d);;
     _32(0x790e20d7),        //slld $r3 = $r23, 3 (0x3);;
     _32(0x7a0d00c0),        //ord $r3 = $r0, $r3;;
     _32(0x790a20d6),        //slld $r2 = $r22, 3 (0x3);;
     _32(0x6000001f),        //make $r0 = 31 (0x1f);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x7e41d002),        //addcd.i $r16 = $r2, $r0;;
     _32(0x7e45c043),        //addcd $r17 = $r3, $r1;;
     _32(0x6820f810),        //andd $r8 = $r16, -32 (0xffffffe0);;
     _32(0x6824ffd1),        //andd $r9 = $r17, -1 (0xffffffff);;
     _32(0x7b022fc8),        //srld $r0 = $r8, 63 (0x3f);;
     _32(0x79862049),        //slld $r33 = $r9, 1 (0x1);;
     _32(0x7a850840),        //ord $r33 = $r0, $r33;;
     _32(0x79822048),        //slld $r32 = $r8, 1 (0x1);;
     _32(0x6903f00f),        //sxwd $r0 = $r15;;
     _32(0x61000080),        //addd $r0 = $r0, 2 (0x2);;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _32(0x610000c0),        //addd $r0 = $r0, 3 (0x3);;
     _32(0x610007c0),        //addd $r0 = $r0, 31 (0x1f);;
     _32(0x7b022140),        //srld $r0 = $r0, 5 (0x5);;
     _32(0x79022140),        //slld $r0 = $r0, 5 (0x5);;
     _32(0x75310300),        //sbfd $r12 = $r0, $r12;;
     _32(0x6a00000c),        //copyd $r0 = $r12;;
     _32(0x610000c0),        //addd $r0 = $r0, 3 (0x3);;
     _32(0x7b022080),        //srld $r0 = $r0, 2 (0x2);;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x2701220e),        //sd 136 (0x88)[$r14] = $r0;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x2601250e),        //sw 148 (0x94)[$r14] = $r0;;
     _32(0x1000000d),        //goto 169f4 <foo+0x1d4>;;
     _32(0x7b022086),        //srld $r0 = $r6, 2 (0x2);;
     _32(0x3804220e),        //ld $r1 = 136 (0x88)[$r14];;
     _32(0x3408250e),        //lws $r2 = 148 (0x94)[$r14];;
     _32(0x54001002),        //muld $r0 = $r2, $r0;;
     _32(0x79022080),        //slld $r0 = $r0, 2 (0x2);;
     _32(0x71010001),        //addd $r0 = $r1, $r0;;
     _32(0x71010700),        //addd $r0 = $r0, $r28;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3000250e),        //lwz $r0 = 148 (0x94)[$r14];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x2601250e),        //sw 148 (0x94)[$r14] = $r0;;
     _32(0x3000250e),        //lwz $r0 = 148 (0x94)[$r14];;
     _64(0x00000000f401b040),        //compw.le $r0 = $r0, 1 (0x1);;
     _32(0x0c7ffc40),        //cb.wnez $r0? 169c4 <foo+0x1a4>;;
     _32(0x6a30002a),        //copyd $r12 = $r42;;
     _32(0x7f03f000),        //nop ;;
     _32(0x6130000e),        //addd $r12 = $r14, 0 (0x0);;
     _32(0x3838000c),        //ld $r14 = 0 (0x0)[$r12];;
     _32(0x3c48040c),        //lq $r18r19 = 16 (0x10)[$r12];;
     _32(0x3c54080c),        //lo $r20r21r22r23 = 32 (0x20)[$r12];;
     _32(0x3c64100c),        //lo $r24r25r26r27 = 64 (0x40)[$r12];;
     _32(0x3c74180c),        //lo $r28r29r30r31 = 96 (0x60)[$r12];;
     _32(0x3840020c),        //ld $r16 = 8 (0x8)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130280c),        //addd $r12 = $r12, 160 (0xa0);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1fffff76),        //call 16820 <foo>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000)        //ret ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110101000111000; //0x16a38
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(foo, 0b00010110100000100000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110101000111000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016a38;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
