// executing pipeline vprintf_chk_1.c.out.dumped test 
val k1_pipeline_vprintf_chk_1: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_vprintf_chk_1() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let __vprintf_chk: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x2601060c),        //sw 24 (0x18)[$r12] = $r0;;
     _32(0x2705040c),        //sd 16 (0x10)[$r12] = $r1;;
     _32(0x2709020c),        //sd 8 (0x8)[$r12] = $r2;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3804020c),        //ld $r1 = 8 (0x8)[$r12];;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x1800049d),        //call 17ac8 <vprintf>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x7f03f000)        //nop ;;
 |];

let inner: list_I = 
 [|
     _32(0x6130e00c),        //addd $r12 = $r12, -128 (0xffffff80);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741000c),        //sd 0 (0x0)[$r12] = $r16;;
     _32(0x27050a0c),        //sd 40 (0x28)[$r12] = $r1;;
     _32(0x28090c0c),        //sq 48 (0x30)[$r12] = $r2r3;;
     _32(0x2811100c),        //sq 64 (0x40)[$r12] = $r4r5;;
     _32(0x2819140c),        //sq 80 (0x50)[$r12] = $r6r7;;
     _32(0x2821180c),        //sq 96 (0x60)[$r12] = $r8r9;;
     _32(0x28291c0c),        //sq 112 (0x70)[$r12] = $r10r11;;
     _32(0x2601020c),        //sw 8 (0x8)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701060c),        //sd 24 (0x18)[$r12] = $r0;;
     _32(0x61000a0c),        //addd $r0 = $r12, 40 (0x28);;
     _32(0x2701040c),        //sd 16 (0x10)[$r12] = $r0;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _64(0x00000000f901b280),        //compw.gtu $r0 = $r0, 10 (0xa);;
     _32(0x0c007380),        //cb.wnez $r0? 16fec <inner+0x77c>;;
     _32(0x3000020c),        //lwz $r0 = 8 (0x8)[$r12];;
     _32(0x790220c0),        //slld $r0 = $r0, 3 (0x3);;
     _96(0x0000000080000101e1000000),        //addd $r0 = $r0, 263168 (0x40400);;
     _32(0x38000000),        //ld $r0 = 0 (0x0)[$r0];;
     _32(0x0fd80000),        //igoto $r0;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f000),        //make $r1 = 263104 (0x403c0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffffc8),        //call 16820 <__vprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16920 <inner+0xb0>;;
     _32(0x180001ff),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f000),        //make $r1 = 263104 (0x403c0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffffb5),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b140),        //compw.eq $r0 = $r0, 5 (0x5);;
     _32(0x0c000080),        //cb.wnez $r0? 16964 <inner+0xf4>;;
     _32(0x180001ee),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08006780),        //cb.dnez $r0? 16ff0 <inner+0x780>;;
     _32(0x180001e7),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000100e000f000),        //make $r0 = 263104 (0x403c0);;
     _32(0x1800030a),        //call 175c8 <puts>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 169c0 <inner+0x150>;;
     _32(0x180001d7),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f200),        //make $r1 = 263112 (0x403c8);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffff8d),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b180),        //compw.eq $r0 = $r0, 6 (0x6);;
     _32(0x0c000080),        //cb.wnez $r0? 16a04 <inner+0x194>;;
     _32(0x180001c6),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08005e00),        //cb.dnez $r0? 16ff8 <inner+0x788>;;
     _32(0x180001bf),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x60000061),        //make $r0 = 97 (0x61);;
     _32(0x18000202),        //call 17240 <putchar>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16a58 <inner+0x1e8>;;
     _32(0x180001b1),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f400),        //make $r1 = 263120 (0x403d0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffff67),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16a9c <inner+0x22c>;;
     _32(0x180001a0),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08005500),        //cb.dnez $r0? 17000 <inner+0x790>;;
     _32(0x18000199),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ae8 <inner+0x278>;;
     _32(0x1800018d),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f600),        //make $r1 = 263128 (0x403d8);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffff43),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16b24 <inner+0x2b4>;;
     _32(0x1800017e),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08004d00),        //cb.dnez $r0? 17008 <inner+0x798>;;
     _32(0x18000177),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f800),        //make $r1 = 263136 (0x403e0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffff2d),        //call 16820 <__vprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16b8c <inner+0x31c>;;
     _32(0x18000164),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f800),        //make $r1 = 263136 (0x403e0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffff1a),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b140),        //compw.eq $r0 = $r0, 5 (0x5);;
     _32(0x0c000080),        //cb.wnez $r0? 16bd0 <inner+0x360>;;
     _32(0x18000153),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x080042c0),        //cb.dnez $r0? 17010 <inner+0x7a0>;;
     _32(0x1800014c),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f800),        //make $r1 = 263136 (0x403e0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1fffff02),        //call 16820 <__vprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16c38 <inner+0x3c8>;;
     _32(0x18000139),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f800),        //make $r1 = 263136 (0x403e0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffeef),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b180),        //compw.eq $r0 = $r0, 6 (0x6);;
     _32(0x0c000080),        //cb.wnez $r0? 16c7c <inner+0x40c>;;
     _32(0x18000128),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08003880),        //cb.dnez $r0? 17018 <inner+0x7a8>;;
     _32(0x18000121),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f800),        //make $r1 = 263136 (0x403e0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffed7),        //call 16820 <__vprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ce4 <inner+0x474>;;
     _32(0x1800010e),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f800),        //make $r1 = 263136 (0x403e0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffec4),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16d28 <inner+0x4b8>;;
     _32(0x180000fd),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08002e40),        //cb.dnez $r0? 17020 <inner+0x7b0>;;
     _32(0x180000f6),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f800),        //make $r1 = 263136 (0x403e0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffeac),        //call 16820 <__vprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16d90 <inner+0x520>;;
     _32(0x180000e3),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004f800),        //make $r1 = 263136 (0x403e0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffe99),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08800080),        //cb.deqz $r0? 16dcc <inner+0x55c>;;
     _32(0x180000d4),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08002480),        //cb.dnez $r0? 17028 <inner+0x7b8>;;
     _32(0x180000cd),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004fa00),        //make $r1 = 263144 (0x403e8);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffe83),        //call 16820 <__vprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16e34 <inner+0x5c4>;;
     _32(0x180000ba),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004fa00),        //make $r1 = 263144 (0x403e8);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffe70),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b040),        //compw.eq $r0 = $r0, 1 (0x1);;
     _32(0x0c000080),        //cb.wnez $r0? 16e78 <inner+0x608>;;
     _32(0x180000a9),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08001a40),        //cb.dnez $r0? 17030 <inner+0x7c0>;;
     _32(0x180000a2),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004fc00),        //make $r1 = 263152 (0x403f0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffe58),        //call 16820 <__vprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16ee0 <inner+0x670>;;
     _32(0x1800008f),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004fc00),        //make $r1 = 263152 (0x403f0);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffe45),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b1c0),        //compw.eq $r0 = $r0, 7 (0x7);;
     _32(0x0c000080),        //cb.wnez $r0? 16f24 <inner+0x6b4>;;
     _32(0x1800007e),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08001000),        //cb.dnez $r0? 17038 <inner+0x7c8>;;
     _32(0x18000077),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800060c),        //ld $r0 = 24 (0x18)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004fe00),        //make $r1 = 263160 (0x403f8);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffe2d),        //call 16820 <__vprintf_chk>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x08000080),        //cb.dnez $r0? 16f8c <inner+0x71c>;;
     _32(0x18000064),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3800040c),        //ld $r0 = 16 (0x10)[$r12];;
     _32(0x6a080000),        //copyd $r2 = $r0;;
     _96(0x0000000080000100e004fe00),        //make $r1 = 263160 (0x403f8);;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffe1a),        //call 16820 <__vprintf_chk>;;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _64(0x00000000f101b080),        //compw.eq $r0 = $r0, 2 (0x2);;
     _32(0x0c000080),        //cb.wnez $r0? 16fd0 <inner+0x760>;;
     _32(0x18000053),        //call 17118 <abort>;;
     _96(0x000000008000011be0004000),        //make $r0 = 290048 (0x46d00);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x080005c0),        //cb.dnez $r0? 17040 <inner+0x7d0>;;
     _32(0x1800004c),        //call 17118 <abort>;;
     _32(0x1800004b),        //call 17118 <abort>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000014),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000012),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000010),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x1000000e),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x1000000c),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x1000000a),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000008),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000006),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000004),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x10000002),        //goto 17044 <inner+0x7d4>;;
     _32(0x7f03f000),        //nop ;;
     _32(0x7f03f000),        //nop ;;
     _32(0x3840000c),        //ld $r16 = 0 (0x0)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130200c),        //addd $r12 = $r12, 128 (0x80);;
     _32(0x0fd00000)        //ret ;;
 |];

let main: list_I = 
 [|
     _32(0x6130f80c),        //addd $r12 = $r12, -32 (0xffffffe0);;
     _32(0x0fc400d0),        //get $r16 = $ra;;
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x1ffffe02),        //call 16870 <inner>;;
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x1ffffe00),        //call 16870 <inner>;;
     _32(0x60000002),        //make $r0 = 2 (0x2);;
     _32(0x1ffffdfe),        //call 16870 <inner>;;
     _32(0x60000003),        //make $r0 = 3 (0x3);;
     _32(0x1ffffdfc),        //call 16870 <inner>;;
     _96(0x0000000080000100e004f000),        //make $r1 = 263104 (0x403c0);;
     _32(0x60000004),        //make $r0 = 4 (0x4);;
     _32(0x1ffffdf7),        //call 16870 <inner>;;
     _96(0x0000000080000100e004f200),        //make $r1 = 263112 (0x403c8);;
     _32(0x60000005),        //make $r0 = 5 (0x5);;
     _32(0x1ffffdf2),        //call 16870 <inner>;;
     _96(0x0000000080000100e004f400),        //make $r1 = 263120 (0x403d0);;
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x1ffffded),        //call 16870 <inner>;;
     _96(0x0000000080000100e004f600),        //make $r1 = 263128 (0x403d8);;
     _32(0x60000007),        //make $r0 = 7 (0x7);;
     _32(0x1ffffde8),        //call 16870 <inner>;;
     _32(0x60040078),        //make $r1 = 120 (0x78);;
     _32(0x60000008),        //make $r0 = 8 (0x8);;
     _32(0x1ffffde5),        //call 16870 <inner>;;
     _96(0x0000000080000100e004f200),        //make $r1 = 263112 (0x403c8);;
     _32(0x60000009),        //make $r0 = 9 (0x9);;
     _32(0x1ffffde0),        //call 16870 <inner>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x6000000a),        //make $r0 = 10 (0xa);;
     _32(0x1ffffddd),        //call 16870 <inner>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x3840060c),        //ld $r16 = 24 (0x18)[$r12];;
     _32(0x0fc000d0),        //set $ra = $r16;;
     _32(0x6130080c),        //addd $r12 = $r12, 32 (0x20);;
     _32(0x0fd00000),        //ret ;;
     _32(0x00000000)        //errop ;;
 |];

let abort: list_I = 
 [|
     _32(0x8fc400d0),        //get $r16 = $ra
     _32(0xe130f80c),        //addd $r12 = $r12, -32 (0xffffffe0)
     _32(0x60000006),        //make $r0 = 6 (0x6);;
     _32(0x980001dd),        //call 17898 <raise>
     _32(0x2741060c),        //sd 24 (0x18)[$r12] = $r16;;
     _32(0x98002c9b),        //call 22398 <_exit>
     _32(0x60000001),        //make $r0 = 1 (0x1);;
     _32(0x00000000)        //errop ;;
 |];

let adr_start:bits(addr_bits) = 0b00010111000001011000; //0x17058
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(__vprintf_chk, 0b00010110100000100000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(inner, 0b00010110100001110000, num_instr, mI);
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010111000001011000, num_instr, mI);
(adr_end:bits(addr_bits),num_instr,mI)  = Write_ProgI(abort, 0b00010111000100011000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000017058;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, rcount, wcount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, rcount, wcount, adr_end_main);
print_list_data(mD);
}
