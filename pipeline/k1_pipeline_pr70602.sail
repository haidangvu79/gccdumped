// executing pipeline pr70602 test 
val k1_pipeline_pr70602: unit -> unit effect {barr, eamem, escape, exmem, rmem, rmemt, rreg, undef, wmv, wmvt, wreg,wmem}
function k1_pipeline_pr70602() = {
mI:mem_I = [||];
mD:mem_D = [||];
icount:int = 0;
rcount:int = 0;
wcount:int = 0;
//initialize platform
(mI,mD,icount,rcount,wcount) = init_k1_model();
let main: list_I = 
 [|
     _32(0x6130f00c),        //addd $r12 = $r12, -64 (0xffffffc0);;
     _32(0x10000123),        //goto 16cb0 <main+0x490>;;
     _32(0x2800000c),        //lhz $r0 = 0 (0x0)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501000c),        //sh 0 (0x0)[$r12] = $r0;;
     _32(0x2800000c),        //lhz $r0 = 0 (0x0)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x2501000c),        //sh 0 (0x0)[$r12] = $r0;;
     _32(0x2000008c),        //lbz $r0 = 2 (0x2)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401008c),        //sb 2 (0x2)[$r12] = $r0;;
     _32(0x280000cc),        //lhz $r0 = 3 (0x3)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x250100cc),        //sh 3 (0x3)[$r12] = $r0;;
     _32(0x200000cc),        //lbz $r0 = 3 (0x3)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x240100cc),        //sb 3 (0x3)[$r12] = $r0;;
     _32(0x2000010c),        //lbz $r0 = 4 (0x4)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x2401010c),        //sb 4 (0x4)[$r12] = $r0;;
     _32(0x2000014c),        //lbz $r0 = 5 (0x5)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401014c),        //sb 5 (0x5)[$r12] = $r0;;
     _32(0x2800018c),        //lhz $r0 = 6 (0x6)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501018c),        //sh 6 (0x6)[$r12] = $r0;;
     _32(0x2800018c),        //lhz $r0 = 6 (0x6)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x2501018c),        //sh 6 (0x6)[$r12] = $r0;;
     _32(0x2000020c),        //lbz $r0 = 8 (0x8)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401020c),        //sb 8 (0x8)[$r12] = $r0;;
     _32(0x2800024c),        //lhz $r0 = 9 (0x9)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501024c),        //sh 9 (0x9)[$r12] = $r0;;
     _32(0x2000024c),        //lbz $r0 = 9 (0x9)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x2401024c),        //sb 9 (0x9)[$r12] = $r0;;
     _32(0x2000028c),        //lbz $r0 = 10 (0xa)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x2401028c),        //sb 10 (0xa)[$r12] = $r0;;
     _32(0x200002cc),        //lbz $r0 = 11 (0xb)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x240102cc),        //sb 11 (0xb)[$r12] = $r0;;
     _32(0x2800030c),        //lhz $r0 = 12 (0xc)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501030c),        //sh 12 (0xc)[$r12] = $r0;;
     _32(0x2800030c),        //lhz $r0 = 12 (0xc)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x2501030c),        //sh 12 (0xc)[$r12] = $r0;;
     _32(0x2000038c),        //lbz $r0 = 14 (0xe)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401038c),        //sb 14 (0xe)[$r12] = $r0;;
     _32(0x280003cc),        //lhz $r0 = 15 (0xf)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x250103cc),        //sh 15 (0xf)[$r12] = $r0;;
     _32(0x200003cc),        //lbz $r0 = 15 (0xf)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x240103cc),        //sb 15 (0xf)[$r12] = $r0;;
     _32(0x2000040c),        //lbz $r0 = 16 (0x10)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x2401040c),        //sb 16 (0x10)[$r12] = $r0;;
     _32(0x2000044c),        //lbz $r0 = 17 (0x11)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401044c),        //sb 17 (0x11)[$r12] = $r0;;
     _32(0x2800048c),        //lhz $r0 = 18 (0x12)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501048c),        //sh 18 (0x12)[$r12] = $r0;;
     _32(0x2800048c),        //lhz $r0 = 18 (0x12)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x2501048c),        //sh 18 (0x12)[$r12] = $r0;;
     _32(0x2000050c),        //lbz $r0 = 20 (0x14)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401050c),        //sb 20 (0x14)[$r12] = $r0;;
     _32(0x2800054c),        //lhz $r0 = 21 (0x15)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501054c),        //sh 21 (0x15)[$r12] = $r0;;
     _32(0x2000054c),        //lbz $r0 = 21 (0x15)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x2401054c),        //sb 21 (0x15)[$r12] = $r0;;
     _32(0x2000058c),        //lbz $r0 = 22 (0x16)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x2401058c),        //sb 22 (0x16)[$r12] = $r0;;
     _32(0x200005cc),        //lbz $r0 = 23 (0x17)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x240105cc),        //sb 23 (0x17)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2800060c),        //lhz $r0 = 24 (0x18)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x2501060c),        //sh 24 (0x18)[$r12] = $r0;;
     _32(0x2000068c),        //lbz $r0 = 26 (0x1a)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401068c),        //sb 26 (0x1a)[$r12] = $r0;;
     _32(0x280006cc),        //lhz $r0 = 27 (0x1b)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x250106cc),        //sh 27 (0x1b)[$r12] = $r0;;
     _32(0x200006cc),        //lbz $r0 = 27 (0x1b)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x240106cc),        //sb 27 (0x1b)[$r12] = $r0;;
     _32(0x2000070c),        //lbz $r0 = 28 (0x1c)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x2401070c),        //sb 28 (0x1c)[$r12] = $r0;;
     _32(0x2000074c),        //lbz $r0 = 29 (0x1d)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401074c),        //sb 29 (0x1d)[$r12] = $r0;;
     _32(0x2800078c),        //lhz $r0 = 30 (0x1e)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501078c),        //sh 30 (0x1e)[$r12] = $r0;;
     _32(0x2800078c),        //lhz $r0 = 30 (0x1e)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x2501078c),        //sh 30 (0x1e)[$r12] = $r0;;
     _32(0x2000080c),        //lbz $r0 = 32 (0x20)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401080c),        //sb 32 (0x20)[$r12] = $r0;;
     _32(0x2800084c),        //lhz $r0 = 33 (0x21)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501084c),        //sh 33 (0x21)[$r12] = $r0;;
     _32(0x2000084c),        //lbz $r0 = 33 (0x21)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x2401084c),        //sb 33 (0x21)[$r12] = $r0;;
     _32(0x2000088c),        //lbz $r0 = 34 (0x22)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x2401088c),        //sb 34 (0x22)[$r12] = $r0;;
     _32(0x200008cc),        //lbz $r0 = 35 (0x23)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x240108cc),        //sb 35 (0x23)[$r12] = $r0;;
     _32(0x2800090c),        //lhz $r0 = 36 (0x24)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x2501090c),        //sh 36 (0x24)[$r12] = $r0;;
     _32(0x2800090c),        //lhz $r0 = 36 (0x24)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x2501090c),        //sh 36 (0x24)[$r12] = $r0;;
     _32(0x2000098c),        //lbz $r0 = 38 (0x26)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x2401098c),        //sb 38 (0x26)[$r12] = $r0;;
     _32(0x280009cc),        //lhz $r0 = 39 (0x27)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x250109cc),        //sh 39 (0x27)[$r12] = $r0;;
     _32(0x200009cc),        //lbz $r0 = 39 (0x27)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x240109cc),        //sb 39 (0x27)[$r12] = $r0;;
     _32(0x20000a0c),        //lbz $r0 = 40 (0x28)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x24010a0c),        //sb 40 (0x28)[$r12] = $r0;;
     _32(0x20000a4c),        //lbz $r0 = 41 (0x29)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x24010a4c),        //sb 41 (0x29)[$r12] = $r0;;
     _32(0x28000a8c),        //lhz $r0 = 42 (0x2a)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x25010a8c),        //sh 42 (0x2a)[$r12] = $r0;;
     _32(0x28000a8c),        //lhz $r0 = 42 (0x2a)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x25010a8c),        //sh 42 (0x2a)[$r12] = $r0;;
     _32(0x20000b0c),        //lbz $r0 = 44 (0x2c)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x24010b0c),        //sb 44 (0x2c)[$r12] = $r0;;
     _32(0x28000b4c),        //lhz $r0 = 45 (0x2d)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x25010b4c),        //sh 45 (0x2d)[$r12] = $r0;;
     _32(0x20000b4c),        //lbz $r0 = 45 (0x2d)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x24010b4c),        //sb 45 (0x2d)[$r12] = $r0;;
     _32(0x20000b8c),        //lbz $r0 = 46 (0x2e)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x24010b8c),        //sb 46 (0x2e)[$r12] = $r0;;
     _32(0x20000bcc),        //lbz $r0 = 47 (0x2f)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x24010bcc),        //sb 47 (0x2f)[$r12] = $r0;;
     _32(0x28000c0c),        //lhz $r0 = 48 (0x30)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x25010c0c),        //sh 48 (0x30)[$r12] = $r0;;
     _32(0x28000c0c),        //lhz $r0 = 48 (0x30)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x25010c0c),        //sh 48 (0x30)[$r12] = $r0;;
     _32(0x20000c8c),        //lbz $r0 = 50 (0x32)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x24010c8c),        //sb 50 (0x32)[$r12] = $r0;;
     _32(0x28000ccc),        //lhz $r0 = 51 (0x33)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x25010ccc),        //sh 51 (0x33)[$r12] = $r0;;
     _32(0x20000ccc),        //lbz $r0 = 51 (0x33)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x24010ccc),        //sb 51 (0x33)[$r12] = $r0;;
     _32(0x20000d0c),        //lbz $r0 = 52 (0x34)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x24010d0c),        //sb 52 (0x34)[$r12] = $r0;;
     _32(0x20000d4c),        //lbz $r0 = 53 (0x35)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x24010d4c),        //sb 53 (0x35)[$r12] = $r0;;
     _32(0x28000d8c),        //lhz $r0 = 54 (0x36)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x25010d8c),        //sh 54 (0x36)[$r12] = $r0;;
     _32(0x28000d8c),        //lhz $r0 = 54 (0x36)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x25010d8c),        //sh 54 (0x36)[$r12] = $r0;;
     _32(0x20000e0c),        //lbz $r0 = 56 (0x38)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x24010e0c),        //sb 56 (0x38)[$r12] = $r0;;
     _32(0x28000e4c),        //lhz $r0 = 57 (0x39)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x25010e4c),        //sh 57 (0x39)[$r12] = $r0;;
     _32(0x20000e4c),        //lbz $r0 = 57 (0x39)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x24010e4c),        //sb 57 (0x39)[$r12] = $r0;;
     _32(0x20000e8c),        //lbz $r0 = 58 (0x3a)[$r12];;
     _32(0x78000000),        //andw $r0 = $r0, 0 (0x0);;
     _32(0x24010e8c),        //sb 58 (0x3a)[$r12] = $r0;;
     _32(0x20000ecc),        //lbz $r0 = 59 (0x3b)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x24010ecc),        //sb 59 (0x3b)[$r12] = $r0;;
     _32(0x28000f0c),        //lhz $r0 = 60 (0x3c)[$r12];;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _32(0x60030001),        //insf $r0 = $r1, 0 (0x0), 0 (0x0);;
     _32(0x25010f0c),        //sh 60 (0x3c)[$r12] = $r0;;
     _32(0x28000f0c),        //lhz $r0 = 60 (0x3c)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x7a000480),        //orw $r0 = $r0, 18 (0x12);;
     _32(0x25010f0c),        //sh 60 (0x3c)[$r12] = $r0;;
     _32(0x20000f8c),        //lbz $r0 = 62 (0x3e)[$r12];;
     _32(0x7800f800),        //andw $r0 = $r0, -32 (0xffffffe0);;
     _32(0x24010f8c),        //sb 62 (0x3e)[$r12] = $r0;;
     _96(0x0000000080000117e0002600),        //make $r0 = 285848 (0x45c98);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x08000140),        //cb.dnez $r0? 16c4c <main+0x42c>;;
     _32(0x2000000c),        //lbz $r0 = 0 (0x0)[$r12];;
     _32(0x78000040),        //andw $r0 = $r0, 1 (0x1);;
     _32(0x78003fc0),        //zxbd $r0 = $r0;;
     _32(0x088000c0),        //cb.deqz $r0? 16c54 <main+0x434>;;
     _32(0x60040001),        //make $r1 = 1 (0x1);;
     _32(0x10000002),        //goto 16c58 <main+0x438>;;
     _32(0x60040000),        //make $r1 = 0 (0x0);;
     _96(0x0000000080000117e0002600),        //make $r0 = 285848 (0x45c98);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _32(0x3000000c),        //lwz $r0 = 0 (0x0)[$r12];;
     _32(0x69034040),        //extfs $r0 = $r0, 20 (0x14), 1 (0x1);;
     _32(0x7800ffc0),        //zxwd $r0 = $r0;;
     _32(0x6a040000),        //copyd $r1 = $r0;;
     _96(0x0000000080000117e0002800),        //make $r0 = 285856 (0x45ca0);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000117e0002a00),        //make $r0 = 285864 (0x45ca8);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x71000040),        //addw $r0 = $r0, 1 (0x1);;
     _32(0x7804ffc0),        //zxwd $r1 = $r0;;
     _96(0x0000000080000117e0002a00),        //make $r0 = 285864 (0x45ca8);;
     _32(0x26050000),        //sw 0 (0x0)[$r0] = $r1;;
     _96(0x0000000080000117e0002a00),        //make $r0 = 285864 (0x45ca8);;
     _32(0x30000000),        //lwz $r0 = 0 (0x0)[$r0];;
     _32(0x0e7fb680),        //cb.wlez $r0? 16828 <main+0x8>;;
     _32(0x60000000),        //make $r0 = 0 (0x0);;
     _32(0x6130100c),        //addd $r12 = $r12, 64 (0x40);;
     _32(0x0fd00000)        //ret ;;
 |];

let adr_start:bits(addr_bits) = 0b00010110100000100000; //0x16820
count:int=0;
//write program in instruction memory
mI: mem_I = [||];
num_instr: int = 0;
(adr_end_main:bits(addr_bits),num_instr,mI)  = Write_ProgI(main, 0b00010110100000100000, num_instr, mI);
adr_end_main = adr_end_main - 4;
//print_list_instr(mI);
//create and initialize the VLIW pipeline
k1pipeline:vliw_k1_pipeline = create_vliw_k1_pipeline();
//initialize VLIW counters and data structures (PFB, bundles, syllables, etc.)
(bdl:bundle, nb_syllables:int, nb_bundles:int)=initialize_vliw();
//set PC to the first address of the program
PC = 0x0000000000016820;
cycles:int=0;
bdl_formed:bool=false;
//execute vliw pipeline
(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed) = execute_vliw_pipeline(k1pipeline, mI, mD, bdl, nb_bundles, cycles, icount, bdl_formed, num_instr, adr_end_main);
print_list_data(mD);
}
